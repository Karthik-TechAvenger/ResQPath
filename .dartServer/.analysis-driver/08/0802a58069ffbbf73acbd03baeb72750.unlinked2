Å+nametoStringmergeUpsiblingMergeGroups_mergeUp_siblingMergeGroupsmarkAsMergeUpmarkAsSiblingMergeGroupbuildlabelhintactionhashCode==_nextId_actions_idsgetIdentifier	getActionresetForTestsstring
attributes+showWhenEmptyisInterestingvalueToStringflagsactions
identifierattributedLabelvalueattributedValueincreasedValueattributedIncreasedValuedecreasedValueattributedDecreasedValueattributedHinttooltipheadingLeveltextDirectiontextSelectionscrollChildCountscrollIndexscrollPositionscrollExtentMaxscrollExtentMinplatformViewIdmaxValueLengthcurrentValueLengthlinkUrlrecttags	transform	elevation	thicknesscustomSemanticsActionIdshasFlag	hasActiontoStringShortdebugFillProperties_sortedListsEqual
childOrdergetChildren	onTapHintonLongPressHint
isNotEmptyenabledcheckedmixedexpandedtoggledselectedbuttonlinkheader	textFieldsliderkeyboardKeyreadOnly	focusablefocusedinMutuallyExclusiveGrouphiddenobscured	multilinescopesRoute
namesRouteimage
liveRegionhintOverridessortKeytagForChildrenonTaponLongPressonScrollLeftonScrollRight
onScrollUponScrollDown
onIncrease
onDecreaseonCopyonCutonPasteonMoveCursorForwardByCharacteronMoveCursorBackwardByCharacteronMoveCursorForwardByWordonMoveCursorBackwardByWordonSetSelection	onSetTextonDidGainAccessibilityFocusonDidLoseAccessibilityFocusonFocus	onDismisscustomSemanticsActions$_maxFrameworkAccessibilityIdentifier_lastIdentifier_generateNewIdkeyid_id_showOnScreen
_transform_rectparentSemanticsClipRectparentPaintClipRectelevationAdjustmentindexInParentisInvisibleisMergedIntoParent_isMergedIntoParentareUserActionsBlocked_areUserActionsBlockedisPartOfNodeMergingmergeAllDescendantsIntoThisNode _mergeAllDescendantsIntoThisNode	_children_debugPreviousSnapshot_replaceChildrenhasChildren_deadchildrenCountvisitChildren_visitDescendantsowner_ownerattachedparent_parentdepth_depth_redepthChild_redepthChildren _updateChildMergeFlagRecursively_updateChildrenMergeFlags_adoptChild
_dropChildattachdetach_dirty
_markDirty)_isDifferentFromCurrentSemanticAnnotation_customSemanticsActions_effectiveActionsAsBits_actionsAsBitsisTagged_flags_identifier_attributedLabel_attributedValue_attributedIncreasedValue_attributedDecreasedValue_attributedHint_tooltip
_elevation
_thickness_hintOverrides_textDirection_sortKey_textSelectionisMultiline_isMultiline_scrollChildCount_scrollIndex_scrollPosition_scrollExtentMax_scrollExtentMin_platformViewId_maxValueLength_currentValueLength_headingLevel_linkUrl_canPerformAction_kEmptyConfig
updateWithgetSemanticsData_initIdentityTransform_kEmptyChildList!_kEmptyCustomSemanticsActionsList_kIdentityTransform_addToUpdate_childrenInTraversalOrder	sendEvent_debugIsActionBlockedtoStringDeeptoDiagnosticsNodedebugDescribeChildrendebugListChildrenInOrderisLeadingEdgeoffsetnode	compareTostartOffsetnodessortedWithinVerticalGroupsortedWithinKnotpositiononSemanticsUpdate_dirtyNodes_nodes_detachedNodesrootSemanticsNodedisposesendSemanticsUpdate_getSemanticsActionHandlerForIdperformAction%_getSemanticsActionHandlerForPositionperformActionAtisSemanticBoundary_isSemanticBoundaryisBlockingUserActionsexplicitChildNodes+isBlockingSemanticsOfPreviouslyPaintedNodeshasBeenAnnotated_hasBeenAnnotated
_addAction_addArgumentlessAction_onTap_onLongPress_onScrollLeft
_onDismiss_onScrollRight_onScrollUp_onScrollDown_onIncrease_onDecrease_onCopy_onCut_onPasteonShowOnScreen_onShowOnScreen_onMoveCursorForwardByCharacter _onMoveCursorBackwardByCharacter_onMoveCursorForwardByWord_onMoveCursorBackwardByWord_onSetSelection
_onSetText_onDidGainAccessibilityFocus_onDidLoseAccessibilityFocus_onFocuschildConfigurationsDelegate_childConfigurationsDelegategetActionHandler_indexInParentisMergingSemanticsOfDescendants _isMergingSemanticsOfDescendants_onCustomSemanticsActionisImage
isSelected
isExpanded	isEnabled	isCheckedisCheckStateMixed	isToggledisInMutuallyExclusiveGroupisFocusable	isFocusedisButtonisLinkisHeaderisSliderisKeyboardKeyisHiddenisTextField
isReadOnly
isObscuredhasImplicitScrollingtagsForChildrentagsChildrenWith_tagsForChildrenaddTagForChildren_setFlag_hasFlagisCompatibleWithabsorbcopyinverseHitTesttraversalOrder	doCompareorder SemanticsNodeVisitorMoveCursorHandlerSetSelectionHandlerSetTextHandlerSemanticsActionHandlerSemanticsUpdateCallback$ChildSemanticsConfigurationsDelegate_kUnblockedUserActionsSemanticsTag"ChildSemanticsConfigurationsResult)ChildSemanticsConfigurationsResultBuilderCustomSemanticsActionAttributedStringAttributedStringPropertySemanticsData_SemanticsDiagnosticableNodeSemanticsHintOverridesSemanticsPropertiesdebugResetSemanticsIdCounterSemanticsNode_BoxEdge_SemanticsSortGroup_pointInParentCoordinates_childrenInDefaultOrder_TraversalSortNodeSemanticsOwnerSemanticsConfigurationDebugSemanticsDumpOrder_concatAttributedStringSemanticsSortKeyOrdinalSortKey_mergeHeadingLevelsÅ∑OffsetRectSemanticsActionSemanticsFlagSemanticsUpdateSemanticsUpdateBuilderStringAttributeTextDirectionMatrixUtilsTransformPropertySemanticsBindingVoidCallbackDiagnosticLevelDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsTreeStyleKeyTextTreeConfigurationTextSelectionMatrix4SemanticsEventvisitChildrenboolvoidsetSelectionsetTextStringgetActionHandlerObjectonSemanticsUpdatechildConfigurationsDelegatetagsChildrenWithListintdidGainAccessibilityFocusindexdidLoseAccessibilityFocusRenderSemanticsGestureHandleroverrideobjectRuntimeTypePipelineOwnermergeUpaddsiblingMergeGroupsSet	flattenedconfig_	immutablehashruntimeTypelabelhintactionMapvisibleForTestingclear	TextRange
isNotEmptyisEmptylength	attributerangestartendstringof
attributescopy
listEqualsDiagnosticsPropertyvaluedefaultValueisInterestingparentConfigurationlineBreakProperties
replaceAllmergeAllDescendantsIntoThisNodegetSemanticsDataDiagnosticableisLinkincreasedecreaseScrollPositionpixelsdoublemaxScrollExtentminScrollExtentAndroidView	UiKitViewisTextFieldUri	elevation	thicknessdebugFillPropertiesshowNameDoublePropertyvaluesnamemap	getActionactionIdtoListIterablePropertyifEmptyflagStringPropertyEnumPropertyisValidMessagePropertyIntPropertyflagsactions
identifierattributedLabelattributedValueattributedIncreasedValueattributedDecreasedValueattributedHinttooltiptextDirectionrect	setEqualstagsscrollChildCountscrollIndextextSelectionscrollPositionscrollExtentMaxscrollExtentMinplatformViewIdmaxValueLengthcurrentValueLength	transformheadingLevellinkUrlcustomSemanticsActionIdshashAlliDiagnosticableNodedebugDescribeChildren
childOrderDiagnosticableTree	onTapHintonLongPressHintCheckboxtristateSubmenuButtonexplicitChildNodesscopesRoute
namesRouteisImageSnackBarisLiveRegion
liveRegionCommonFindersbySemanticsIdentifierDirectionalityincreasedValuedecreasedValueRenderObjectaddTagForChildrentap	longPress
scrollLeftscrollRightscrollUp
scrollDowncutpastemoveCursorForwardByCharactermoveCursorBackwardByCharactermoveCursorForwardByWordmoveCursorBackwardByWord	FocusNode
FocusScopeFocusManagerfocusdismisscustomActionid_lastIdentifierflushSemanticsDiagnosticableTreeMixinshowOnScreenmatrixEquals
isIdentityzeroisFiniteisMergingSemanticsOfDescendantsanychild_deadparent
_dropChildattached	identicalErrorDescriptionErrorSpacertoDiagnosticsNodestyle
singleLineFlutterError	fromPartsErrorSummary	ErrorHint_visitDescendantsowner_depth_redepthChildrenforEach_isMergedIntoParent_updateChildrenMergeFlags_parentattachdetach_nodescontainsKey_detachedNodesremovecontains_dirtyNodes_flags_sortKey_textSelection_scrollPosition_scrollExtentMax_scrollExtentMin_actionsAsBitsindexInParent_maxValueLength_currentValueLengthisBlockingUserActions_headingLevel_linkUrl_actions_customSemanticsActionsPhysicalModelAchildrenInInversePaintOrderhintOverridessortKeyisMultiline_platformViewIdkeysgetIdentifieroverridingActionnodeisMergedIntoParent_effectiveActionsAsBits_textDirection_scrollChildCount_scrollIndexsourceLeveltargetLevel_identifier_attributedValue_attributedIncreasedValue_attributedDecreasedValue_tooltipaddAllthisAttributedStringthisTextDirectionotherAttributedString_attributedLabelotherTextDirection_attributedHintmax
_thickness
_elevationsortFloat64Listidentitystorage	Int32List
updateNodelabelAttributesvalueAttributesincreasedValueAttributesdecreasedValueAttributeshintAttributestextSelectionBase
baseOffsettextSelectionExtentextentOffsetscrollChildrennanchildrenInTraversalOrderchildrenInHitTestOrderadditionalActionstoStringpositionsortNodeSystemChannelsaccessibilitysendtoMapnodeIdFlagPropertyifTrueifFalselevelhiddeninfogetAsTranslationshift
getAsScaletoStringAsFixedsplittakeline	substringjoindescriptiontagwhereisHiddendebugtraversalOrdertoStringDeepprefixLineOneprefixOtherLinesminLevel	wrapWidthsparseinverseHitTest
Comparable	compareTooffsetstartOffsetdeflateisLeadingEdgetopLeftdxbottomRightedgenodesrtlreversedexpandsortedWithinKnot	directioncenternextNodeltrpiabdyVector3
transform3xysortedWithinVerticalGroupensureSemanticsSemanticsHandleChangeNotifier kFlutterMemoryAllocationsEnabledFlutterMemoryAllocationsinstancedispatchObjectCreatedlibrary	classNameobjectFlutterViewdispatchObjectDisposeddisposerootSemanticsNodechildrenCounterrorPropertydepth_dirtyisPartOfNodeMerging
_markDirtycreateSemanticsUpdateBuilder_addToUpdateupdateCustomAction
overrideIdbuildnotifyListeners_canPerformActionargs_showOnScreencopyInversetransformPointhasChildren	_childrendescribeIdentityvisitChildrenForSemanticsGestureDetectordynamiccastListTileselected
isSelectedhasExpandedState
isExpandedExcludeSemanticshasEnabledState	isEnabledhasCheckedState	isCheckedisCheckStateMixedhasToggledState	isToggledRadioisInMutuallyExclusiveGroupisFocusable	isFocusedisButtonisHeaderisSliderisKeyboardKey
isReadOnly
isObscuredListViewTabBarhasImplicitScrollingIterableRenderViewportexcludeFromScrollinghasBeenAnnotatedkey_hintOverrides_hasBeenAnnotated_isSemanticBoundary+isBlockingSemanticsOfPreviouslyPaintedNodes _isMergingSemanticsOfDescendants_tagsForChildren_indexInParentdebugDumpSemanticsTreeUnicodeRLELREPDF	protectedinfinitynegativeInfinityorderDiagnosticsPropertyDiagnosticableDiagnosticableNodeDiagnosticableTreeDiagnosticableTreeMixin
ComparableChangeNotifierSemanticsSortKey-2»T«´Z€ë”É4ÉìOffsetRectSemanticsActionSemanticsFlagStringAttributeTextDirectionVoidCallback É#dart:uiÉøÑ3DiagnosticLevelDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsTreeStyleKeyTextTreeConfiguration Éñpackage:flutter/foundation.dartÑ\ÑnTextSelection Ñ5package:flutter/services.dartÑ°Ñ≠Matrix4 Ñp'package:vector_math/vector_math_64.dartÑŒÑ·SemanticsEvent Ñ∞semantics_event.dart 	  Å/   ÅAmathÅD	dart:mathÅ[Å’OffsetRectSemanticsActionSemanticsFlagSemanticsUpdateSemanticsUpdateBuilderStringAttributeTextDirection ÅK   dart:ui  ÅŸ   "package:collection/collection.dart  Ç   package:flutter/foundation.dartÇVÇyMatrixUtilsTransformProperty Ç0   package:flutter/painting.dart  Ç|   package:flutter/services.dart  Ç§   'package:vector_math/vector_math_64.dartÇÏÉSemanticsBinding Ç◊   binding.dart  É   semantics_event.dart¿Ó ¿7åîﬂ <ÄÜÄ§Ä•ÄøÄ√ÄÛÅ$Å-Å.ÅJÅ◊ÅÿÇÇ/Ç{Ç£Ç’Ç÷ÉÉ"É#ÉïÉñÑ5ÑpÑØÑ∞Ñ„Ñ‰Ö*Ö.ÖWÖ[ÖÜÖ»Ö…ÜÜÜVÜ•ÜÊÜÁá3árá∏áπàà)à^à_àìàóà“âââfâjâöâ„â‰ä0ä4ä}ä¬ãã6ã:ãÑã’ãŸå$å/å©å™å˝ç2ç3çTçXçóç‰é0é4éÇéœé›é·è/è}èÀè⁄èÔêêêeêµëëë7ë8ëuë{ë¡ë÷ë◊ë„í/í1í2ímíåíêí›ììbìsìwì¿ìÎî:î;îãî¨î≤î˛ïHïäï∏ïπññ2ñ8ñÅñ∫óóOóUó£óˆòCòîò·ôôYô[ô\ô©ô∫ôæô˜ö4öÉöΩöÔõ,õ[õ\õ®úúú\úhúnú¶úÛù@ùAùÑùÆù¥ùˆûNû∏ûπüü6üEüó††$†G†î†·°°°°+°5°Ö°â°ã°å°º°¿¢¢J¢í¢⁄£)£x£Ü£ä£Ÿ§§§`§s§w§ø§Í§Ó§¸• •Q•\•z•ß•≠•“¶¶)¶<¶Q¶R¶¢¶∞¶∂¶⁄ßLßfßzß{ßπß–ß—®®#®$®^®®Ä®å®ƒ®≈®—®Ù© ©4©:©d©Ñ©¢©≈©…© ©÷©Ï™I™M™N™ó™∞™ ´$´z´{´™´Â¨¨¨9¨V¨w¨}¨ê¨î¨ï¨ƒ¨¯≠≠≠≠g≠|≠ú≠¨≠ƒ≠ÿ≠Î≠˛ÆÆÆÆÆGÆRÆkÆéÆîÆﬂÆÔÆıØ?ØNØbØuØ¶ØﬁØÒ∞/∞A∞w∞©∞Ò∞˛±±±)±*±b±y±z±§±™±Ï≤≤≤Z≤`≤±≤˙≥2≥L≥`≥f≥Ü≥ô≥ü≥†≥≈≥˘¥O¥v¥û¥‡µµ?µlµwµ µ¯∂ ∂∂I∂M∂N∂ö∂¶∂…∂ı∑∑<∑Ç∑Ü∑á∑ì∑ ∑À∑◊∑Ì∏N∏R∏T∏U∏ü∏›π,πrπxπµπ—πËπ˚∫∫/∫G∫X∫o∫u∫v∫√∫˛ªª)ªEªFªRª≈ª∆ª“ºº2ºGºMºnºïº…ΩΩ/Ω5ΩZΩrΩxΩÂΩÈΩÎΩÏæ$æ(ætæ≈øø'ø+øiøtøûø≈øÀ¿ @¿ @(¿ @A¿ @\¿ @z¿ @ù¿ @¿¿ @Ï¿ A¿ A:¿ AU¿ Av¿ Aé¿ A´¿ A»¿ AÈ¿ B¿ B,¿ BN¿ Bq¿ Bî¿ B∂¿ Bÿ¿ B˛¿ C¿ C9¿ CH¿ C\¿ C¿ D¿ D£¿ ED¿ F ¿ Fº¿ GZ¿ G∫¿ HV¿ HW¿ Hñ¿ H©¿ H™¿ HÎ¿ I ¿ I¿ IA¿ I\¿ I]¿ Iú¿ I¢¿ I€¿ I·¿ J¿ JI¿ JJ¿ Jã¿ J¨¿ J≤¿ JÎ¿ JÒ¿ K*¿ KT¿ KU¿ Kî¿ Kö¿ K”¿ KŸ¿ L¿ LA¿ LB¿ LÉ¿ L§¿ L™¿ L„¿ LÈ¿ M"¿ ML¿ MM¿ Mâ¿ M≤¿ M∏¿ MÒ¿ M˜¿ N:¿ Nz¿ N{¿ N∑¿ N˝¿ O¿ O<¿ OB¿ OÑ¿ O∑¿ O∏¿ OÙ¿ P¿ P#¿ P\¿ Pb¿ P•¿ PÂ¿ PÊ¿ Q"¿ Qh¿ Qn¿ Qß¿ Q≠¿ QÔ¿ R"¿ R#¿ Rq¿ Rw¿ R∞¿ R∂¿ RÔ¿ S¿ S¿ Si¿ Sç¿ Sì¿ SÃ¿ S“¿ T
¿ T3¿ T4¿ Ti¿ To¿ T®¿ T¿¿ T¡¿ T˘¿ Tˇ¿ UL¿ Uö¿ U¥¿ Uµ¿ UÛ¿ V)¿ VO¿ VP¿ V°¿ VÕ¿ VÛ¿ VÙ¿ W@¿ WF¿ Wì¿ Wü¿ Wæ¿ Wø¿ X¿ X¿ X ¿ Xp¿ XÇ¿ Xà¿ Xÿ¿ Y$¿ Yj¿ Yp¿ YÄ¿ YÜ¿ Y–¿ Y¿ YÒ¿ Z@¿ ZR¿ ZX¿ Zì¿ Zô¿ Z©¿ ZØ¿ [¿ [#¿ [$¿ [s¿ [Ö¿ [ã¿ [∆¿ [Ã¿ [‹¿ [‚¿ \5¿ \V¿ \W¿ \°¿ \æ¿ \ƒ¿ ]¿ ]\¿ ]q¿ ]w¿ ]á¿ ]ç¿ ]Õ¿ ^¿ ^$¿ ^%¿ ^q¿ ^É¿ ^â¿ ^÷¿ ^Í¿ ^¿ _@¿ _Ç¿ _ü¿ _†¿ _Ô¿ `¿ `¿ `T¿ `h¿ `n¿ `ø¿ `Í¿ a¿ a¿ a3¿ a9¿ aI¿ aO¿ aô¿ aØ¿ a∞¿ aÔ¿ b¿ b¿ b?¿ b`¿ ba¿ bª¿ b¡¿ c¿ cY¿ ch¿ cÑ¿ cÖ¿ cÕ¿ c”¿ c„¿ cÈ¿ d9¿ d[¿ du¿ dv¿ dº¿ d¬¿ d“¿ dÿ¿ e$¿ e>¿ e?¿ eä¿ e©¿ eØ¿ e‚¿ eË¿ e¯¿ e˛¿ fF¿ fs¿ ft¿ f£¿ f‰¿ fÂ¿ g¿ gc¿ gd¿ gp¿ g∂¿ g∑¿ g√¿ h¿ h3¿ hÅ¿ hÂ¿ i4¿ iÉ¿ i¥¿ i˜¿ j"¿ j9¿ j@¿ jë¿ jÈ¿ j˙¿ kQ¿ kæ¿ kø¿ kÓ¿ l+¿ lR¿ lg¿ ln¿ l¡¿ m¿ mY¿ m°¿ m˚¿ nU¿ nõ¿ nÂ¿ oJ¿ ou¿ o·¿ oÁ¿ p>¿ pï¿ pÙ¿ qM¿ qû¿ q˙¿ rT¿ r∞¿ s ¿ sV¿ sZ¿ s[¿ sg¿ sä¿ s¨¿ sÃ¿ s¿ t¿ tN¿ tÇ¿ t»¿ u¿ u@¿ ud¿ uî¿ u≤¿ uŸ¿ v¿ v;¿ vk¿ vù¿ v—¿ w¿ w7¿ wi¿ w£¿ wÀ¿ wÛ¿ x¿ xI¿ xm¿ x≈¿ x…¿ x ¿ x÷¿ x˘¿ y¿ y¿ y!¿ y6¿ yK¿ yi¿ yá¿ yõ¿ y®¿ yª¿ y≈¿ yœ¿ y‚¿ y¯¿ z	¿ z¿ z2¿ zG¿ z[¿ zl¿ zÇ¿ zú¿ z≠¿ zæ¿ zœ¿ z„¿ zÚ¿ {M¿ {T¿ {Y¿ {Z¿ {ü¿ {»¿ {€¿ {·¿ |
¿ |3¿ |I¿ |Q¿ |¿ |¢¿ |∫¿ |¬¿ |Ã¿ |ﬂ¿ |Â¿ |˜¿ |˚¿ |˝¿ |˛¿ }M¿ }n¿ }~¿ }ò¿ }≤¿ }–¿ }÷¿ }◊¿ ~¿ ~¿ ~¿ ~n¿ ~p¿ ~q¿ ~∏¿ ~«¿ ~À¿ ~¯¿ ¿ =¿ g¿ à¿ ú¿ ∂¿ ÷¿ ¸¿ ˝¿ Ä#¿ Ä)¿ Ä[¿ Äa¿ Ä®¿ Ä’¿ Ä€¿ Å¿ Å¿ Å9¿ Å:¿ Åg¿ Åm¿ Åü¿ Å•¿ ÅÔ¿ Ç)¿ Ç/¿ Ça¿ Ç}¿ Çû¿ Çü¿ Ç—¿ É¿ É¿ É%¿ Éd¿ Ée¿ Éq¿ Éî¿ É¿¿ É‘¿ É⁄¿ Ñ¿ Ñ-¿ Ñb¿ Ñf¿ Ñg¿ Ñs¿ Ñ∏¿ Ñ„¿ Ö3¿ Öè¿ Öì¿ Öï¿ Öñ¿ ÖÂ¿ Ö˙¿ Ö˛¿ ÜN¿ Üb¿ Üm¿ Ü§¿ Ü…¿ ÜÁ¿ Ü˘¿ á¿ á¿ á.¿ áA¿ áS¿ ád¿ ás¿ áÖ¿ áñ¿ á≠¿ á¡¿ á“¿ áË¿ á˚¿ à¿ à!¿ àD¿ àU¿ àh¿ à|¿ àí¿ àß¿ à∑¿ àÃ¿ àÂ¿ â¿ â¿ â'¿ âA¿ âQ¿ âk¿ âÑ¿ âß¿ â¿¿ â„¿ âÚ¿ ä¿ ä¿ ä5¿ äM¿ ä_¿ äx¿ äà¿ äû¿ äµ¿ äÕ¿ ä‚¿ ä˘¿ ã¿ ã#¿ ã4¿ ãD¿ ãV¿ ã¿ ã©¿ ãÕ¿ ãÚ¿ å¿ å¿ åE¿ åk¿ å}¿ åë¿ å≤¿ ç&¿ çö¿ é2¿ é ¿ è:¿ è≥¿ ê¿ ê¿ êc¿ êä¿ êê¿ êﬁ¿ ë)¿ ë[¿ ër¿ ës¿ ë∏¿ ë˝¿ í¿ í¿ íS¿ íó¿ íπ¿ íø¿ í¸¿ ì¿ ì¿ ìY¿ ìù¿ ì◊¿ ì›¿ î¿ îT¿ îê¿ î†¿ î¶¿ îÂ¿ î˙¿ î˚¿ ï?¿ ïx¿ ï~¿ ïø¿ ïˇ¿ ñ¿ ñ$¿ ñ%¿ ño¿ ñ∞¿ ñ¿¿ ñ∆¿ ó¿ ó¿ ó¿ ój¿ ó≤¿ ó∏¿ ò¿ ò-¿ òE¿ òF¿ òä¿ òê¿ ò›¿ òÔ¿ ô¿ ô¿ ôH¿ ôN¿ ôû¿ ôË¿ ôˆ¿ ö
¿ ö¿ öO¿ öU¿ ö§¿ öÚ¿ õ¿ õ-¿ õ.¿ õv¿ õ|¿ õ∆¿ õÿ¿ õÒ¿ õÚ¿ ú6¿ ú<¿ úÉ¿ úú¿ ú≤¿ ú≥¿ ú˝¿ ù¿ ù¿ ùV¿ ù\¿ ùå¿ ùí¿ ù’¿ ùÌ¿ ùÓ¿ û/¿ û5¿ û|¿ ûÇ¿ û‘¿ ü¿ üo¿ üÆ¿ ü«¿ ü»¿ †	¿ †¿ †`¿ ††¿ †¶¿ †¯¿ °B¿ °ì¿ °“¿ °È¿ °Í¿ ¢7¿ ¢=¿ ¢ç¿ ¢Œ¿ ¢ˆ¿ ¢˜¿ £1¿ £7¿ £Ü¿ £◊¿ £›¿ §-¿ §z¿ §å¿ §í¿ §‚¿ •¿ •¿ •X¿ •¶¿ •Û¿ ¶+¿ ¶A¿ ¶B¿ ¶y¿ ¶¿ ¶Ã¿ ß¿ ßa¿ ßy¿ ßz¿ ß»¿ ß◊¿ ß›¿ ®'¿ ®a¿ ®g¿ ®ú¿ ®µ¿ ®∂¿ ©¿ ©1¿ ©7¿ ©h¿ ©∂¿ ©Ï¿ ©Ú¿ ™¿ ™¿ ™T¿ ™p¿ ™ã¿ ™å¿ ™Ÿ¿ ™ﬂ¿ ™Ô¿ ™ı¿ ´D¿ ´^¿ ´_¿ ´ò¿ ´û¿ ´Æ¿ ´¥¿ ´˙¿ ¨¿ ¨¿ ¨X¿ ¨^¿ ¨™¿ ¨˜¿ ≠*¿ ≠0¿ ≠~¿ ≠Ã¿ Æ¿ Æ_¿ ÆÆ¿ Æÿ¿ Æﬁ¿ ÆÓ¿ ÆÙ¿ ØE¿ Øú¿ Ø∂¿ Ø∑¿ ∞¿ ∞¿ ∞¿ ∞h¿ ∞|¿ ∞Ç¿ ∞Ã¿ ±¿ ±"¿ ±#¿ ±r¿ ±Ñ¿ ±ä¿ ±◊¿ ±Î¿ ±Ò¿ ≤:¿ ≤Y¿ ≤z¿ ≤{¿ ≤æ¿ ≥¿ ≥¿ ≥T¿ ≥Z¿ ≥¶¿ ≥Û¿ ¥-¿ ¥3¿ ¥Ö¿ ¥»¿ ¥Œ¿ µ¿ µ"¿ µx¿ µ¶¿ µª¿ µ◊¿ µÿ¿ ∂¿ ∂¿ ∂a¿ ∂ö¿ ∂†¿ ∂Ô¿ ∑¿ ∑	¿ ∑¿ ∑¿ ∑p¿ ∑î¿ ∑„¿ ∑˙¿ ∑˚¿ ∏N¿ ∏T¿ ∏û¿ ∏Ë¿ ∏Ó¿ π=¿ πQ¿ πW¿ πg¿ πm¿ πΩ¿ πÏ¿ ∫*¿ ∫U¿ ∫V¿ ∫ó¿ ∫ù¿ ∫Ï¿ ª%¿ ª+¿ ªz¿ ªé¿ ªî¿ ª§¿ ª™¿ ª˚¿ º¿ ºn¿ ºÖ¿ ºÜ¿ º◊¿ ºÏ¿ ºÚ¿ Ω<¿ ΩÜ¿ Ωå¿ Ω€¿ ΩÔ¿ Ωı¿ æ¿ æ¿ æ[¿ æä¿ æ»¿ æÛ¿ æÙ¿ ø:¿ øÖ¿ øã¿ ø÷¿ ¿!¿ ¿9¿ ¿?¿ ¿x¿ ¿¥¿ ¿∫¿ ¿ ¿ ¿–¿ ¡¿ ¡N¿ ¡ú¿ ¡Ø¿ ¡œ¿ ¡–¿ ¬!¿ ¬n¿ ¬t¿ ¬≈¿ √¿ √7¿ √=¿ √v¿ √≤¿ √∏¿ √»¿ √Œ¿ ƒ¿ ƒV¿ ƒù¿ ƒ—¿ ƒ“¿ ≈¿ ≈c¿ ≈i¿ ≈¥¿ ≈ˇ¿ ∆¿ ∆¿ ∆V¿ ∆í¿ ∆ò¿ ∆®¿ ∆Æ¿ ∆˝¿ «,¿ «z¿ «ç¿ «≠¿ «Æ¿ «ˇ¿ »L¿ »R¿ »£¿ »Ì¿ …¿ …¿ …T¿ …ú¿ …¢¿ …≤¿ …∏¿  ¿  @¿  á¿  ª¿  º¿ À¿ À!¿ À'¿ Àu¿ ÀÆ¿ À¥¿ Ã¿ Ã¿ Ã¿ Ã+¿ Ã1¿ ÃÅ¿ Ã•¿ ÃÛ¿ Õ	¿ Õ
¿ Õ[¿ Õé¿ Õî¿ Õ›¿ Œ'¿ Œ-¿ Œz¿ Œé¿ Œî¿ Œ§¿ Œ™¿ Œ˘¿ œ(¿ œe¿ œè¿ œê¿ œŒ¿ œ‘¿ –%¿ –_¿ –í¿ –ò¿ –⁄¿ —$¿ —=¿ —>¿ —u¿ —{¿ — ¿ —–¿ “¿ “c¿ “¨¿ “˜¿ ”+¿ ”F¿ ”G¿ ”ê¿ ”°¿ ”ß¿ ”Û¿ ‘B¿ ‘y¿ ‘¿ ‘Œ¿ ‘˝¿ ‘˛¿ ’E¿ ’i¿ ’o¿ ’ü¿ ’≈¿ ’∆¿ ÷¿ ÷'¿ ÷-¿ ÷{¿ ÷…¿ ÷¿ ◊¿ ◊¿ ◊\¿ ◊b¿ ◊≠¿ ◊¸¿ ÿ¿ ÿ#¿ ÿm¿ ÿæ¿ Ÿ¿ Ÿ¿ Ÿ¿ Ÿ#¿ Ÿs¿ Ÿë¿ Ÿ∑¿ Ÿ∏¿ Ÿﬂ¿ ŸÂ¿ ⁄4¿ ⁄:¿ ⁄J¿ ⁄P¿ ⁄ô¿ ⁄Ø¿ ⁄∞¿ ⁄›¿ ⁄„¿ €3¿ €É¿ €ë¿ €ó¿ €Â¿ ‹,¿ ‹2¿ ‹¿ ‹œ¿ ›¿ ›Y¿ ›v¿ ›w¿ ›™¿ ›∞¿ ﬁ ¿ ﬁ;¿ ﬁA¿ ﬁè¿ ﬁﬁ¿ ﬁ¿ ﬁˆ¿ ﬂC¿ ﬂî¿ ﬂÂ¿ ‡2¿ ‡?¿ ‡b¿ ‡c¿ ‡ó¿ ‡ù¿ ‡Ï¿ ·:¿ ·Y¿ ·_¿ ·Ø¿ ·˚¿ ‚F¿ ‚ï¿ ‚®¿ ‚Ã¿ ‚Õ¿ „¿ „¿ „W¿ „•¿ „ƒ¿ „ ¿ ‰¿ ‰g¿ ‰¥¿ Â¿ Â¿ Â<¿ Â=¿ Âo¿ Âu¿ Âƒ¿ Ê¿ Ê/¿ Ê5¿ ÊÉ¿ Êœ¿ Á¿ Ái¿ Á|¿ Áû¿ Áü¿ Á”¿ ÁŸ¿ Ë(¿ Ëv¿ Ëì¿ Ëô¿ ËÈ¿ È5¿ ÈÇ¿ È“¿ ÈÂ¿ Í	¿ Í
¿ Í<¿ ÍB¿ Íè¿ Í”¿ ÍŸ¿ Î¿ Îl¿ Îr¿ Îæ¿ Ï¿ Ï&¿ ÏH¿ ÏI¿ Ï{¿ ÏÅ¿ ÏŒ¿ Ì¿ Ì¿ Ì^¿ Ì´¿ Ì±¿ Ìˇ¿ ÓO¿ Ói¿ Óã¿ Óå¿ Ó∫¿ Ó¿¿ Ô¿ Ô¿ Ô]¿ ÔÜ¿ Ô§¿ Ô•¿ Ô“¿ Ôÿ¿ !¿ 2¿ 8¿ á¿ ∞¿ Õ¿ Œ¿ ˝¿ Ò¿ ÒJ¿ ÒP¿ Òü¿ Ò»¿ ÒÁ¿ ÒË¿ Ú.¿ Ú4¿ Ú~¿ Ú©¿ ÚØ¿ Ú˝¿ Û#¿ Û^¿ Û_¿ Û¶¿ Û¨¿ Ûˆ¿ Ù"¿ Ù(¿ Ùx¿ Ùû¿ Ù⁄¿ Ù€¿ ı¿ ı"¿ ıl¿ ıì¿ ıô¿ ıÈ¿ ˆ¿ ˆE¿ ˆF¿ ˆà¿ ˆé¿ ˆÿ¿ ˆˇ¿ ˜¿ ˜U¿ ˜{¿ ˜≤¿ ˜≥¿ ˜È¿ ˜Ô¿ ¯@¿ ¯ä¿ ¯ê¿ ¯€¿ ˘¿ ˘J¿ ˘K¿ ˘|¿ ˘Ç¿ ˘”¿ ˘˘¿ ˘ˇ¿ ˙N¿ ˙k¿ ˙é¿ ˙è¿ ˙“¿ ˙ÿ¿ ˚&¿ ˚d¿ ˚¨¿ ˚ˆ¿ ¸ ¿ ¸&¿ ¸w¿ ¸»¿ ˝¿ ˝¿ ˝,¿ ˝2¿ ˝Ç¿ ˝´¿ ˝¸¿ ˛,¿ ˛~¿ ˛±¿ ˛≤¿ ˛ı¿ ˛˚¿ ˇC¿ ˇÉ¿ ˇœ¿ ¿ C¿ I¿ ö¿ Î¿9¿?¿O¿U¿¢¿¿¿¿E¿F¿Ü¿µ¿ª¿	¿W¿ß¿Ô¿ı¿G¿í¿≤¿˛¿¿ ¿q¿ø¿≈¿’¿€¿(¿F¿[¿z¿{¿¨¿≤¿Ò¿˜¿D¿ì¿±¿“¿”¿"¿(¿r¿¡¿	¿	`¿	f¿	v¿	|¿	ƒ¿
¿
¿
¿
`¿
ã¿
‚¿5¿é¿Á¿9¿Å¿Á¿/¿ï¿Ê¿^¿Ø¿'¿m¿—¿¿Ç¿Â¿Z¿^¿_¿k¿Ì¿Ô¿¿5¿M¿s¿ò¿ö¿õ¿ ¿Œ¿¿e¿≤¿œ¿¿!¿'¿w¿â¿õ¿©¿…¿Ë¿¿¿Y¿_¿ñ¿≠¿ª¿€¿˛¿¿4¿G¿K¿L¿M¿ì¿ò¿˚¿]¿é¿’¿÷¿¯¿¿l¿à¿å¿ç¿œ¿’¿%¿F¿X¿Y¿Ñ¿ä¿”¿#¿Q¿W¿ü¿Î¿%¿:¿E¿F¿k¿l¿z¿{¿’¿€¿"¿s¿Ç¿™¿¡¿„¿¿m¿Å¿á¿ã¿å¿À¿Â¿ˇ¿¿k¿Ö¿ö¿Æ¿¥¿∏¿π¿¿¿X¿l¿r¿¬¿ ¿ b¿ ∞¿ ﬂ¿ Â¿!,¿!h¿!n¿!™¿!˘¿"
¿"+¿",¿"q¿"w¿"»¿"‹¿"‚¿#2¿#Å¿#–¿$¿$¿$[¿$a¿$´¿$»¿$…¿%¿%¿%^¿%®¿%¿&:¿&ä¿&ó¿&ù¿&Í¿'2¿'8¿'H¿'N¿'í¿'±¿'≤¿'˛¿(¿(L¿(õ¿(Î¿)¿)3¿)4¿)Y¿)_¿)Æ¿)¸¿*B¿*^¿*d¿*±¿*ˇ¿+ ¿+_¿+`¿+m¿+n¿+Ω¿+√¿,¿,<¿,Ñ¿,®¿,©¿,˜¿,˝¿-I¿-ñ¿-—¿-Ù¿.0¿.W¿.Å¿.¨¿.∫¿.¿¿.‰¿.ˆ¿.˙¿.˚¿/F¿/L¿/ù¿/Õ¿/”¿/„¿/È¿0¿02¿0ã¿0å¿0Ë¿18¿1ë¿1í¿1ì¿1°¿1¢¿1Ï¿2¿2¿2^¿2≠¿2¿¿2Û¿2Ù¿3/¿3u¿3Ö¿3∆¿3˝¿4&¿4J¿4]¿4g¿4h¿4†¿4Ω¿4Û¿5¿5¿5¿5R¿5m¿5s¿5è¿5¨¿5‚¿5˝¿6#¿6h¿6†¿6ø¿6À¿6Á¿6Ò¿6˘¿6ˇ¿74¿7V¿7z¿7∆¿8¿8U¿8ù¿8’¿9 ¿9
¿9+¿9G¿9a¿9i¿9o¿9º¿9œ¿9ﬂ¿:¿:X¿:õ¿: ¿;¿;F¿;T¿;e¿;û¿;Á¿<¿<I¿<Y¿<∏¿=G¿=∆¿=‘¿=‡¿=Í¿>¿>M¿>ƒ¿?@¿?p¿?è¿?ù¿?ß¿?Ø¿?Û¿?Ù¿@¿@J¿@o¿@w¿@√¿@÷¿@‡¿@·¿A¿AC¿Ab¿Añ¿AÀ¿AÁ¿A¯¿B¿B
¿B¿B-¿BB¿BV¿B\¿B`¿Ba¿Bú¿B÷¿BÏ¿BÌ¿C¿CY¿CZ¿Cå¿Cí¿C„¿D/¿DD¿Dy¿Dñ¿DÃ¿DÎ¿D˝¿E¿E¿E¿E¿E¿EH¿EN¿Eù¿EÊ¿F¿FM¿Fj¿F†¿F‰¿F¸¿G¿G¿G¿G%¿G)¿G*¿G^¿Gd¿G∏¿Gﬂ¿G˘¿G˙¿HS¿HY¿Hé¿Hî¿H ¿HÒ¿HÚ¿I'¿I-¿Ip¿Iò¿I≤¿I≥¿IÁ¿IÌ¿J=¿JÖ¿Jã¿J÷¿JÒ¿K¿K¿K0¿KR¿Kt¿Kï¿Kµ¿Kª¿Kø¿K¿¿K‹¿L¿L¿L¿LG¿Li¿L®¿L©¿LÍ¿L¯¿L˛¿Lˇ¿M9¿MK¿ML¿M}¿MŒ¿M€¿N¿N
¿N¿N¿N4¿Nn¿Nr¿Ns¿Nù¿N¿¿N–¿NÒ¿O¿O2¿O:¿OÉ¿Oñ¿O†¿O∫¿OŒ¿OÎ¿OÒ¿P¿P8¿P<¿P=¿Pf¿Pâ¿P±¿PÀ¿Pﬂ¿Pı¿P˚¿Pˇ¿Q ¿Q5¿QJ¿Qp¿Qå¿Q†¿QÀ¿R¿R`¿R~¿RÑ¿R°¿R»¿R⁄¿R¿S¿S
¿S'¿S]¿Sz¿SÇ¿Sà¿Så¿Sç¿Sæ¿S”¿SÂ¿T¿T,¿T_¿T}¿T¢¿Tµ¿TÒ¿U¿UD¿Uë¿U¡¿UÂ¿Uˇ¿V	¿V¿V¿V[¿Vú¿Væ¿V–¿V‘¿V’¿VÎ¿VÏ¿W¿W¿W+¿W9¿W?¿WR¿Wf¿Wõ¿Wø¿W≈¿W…¿W ¿X¿XR¿XÜ¿X∞¿X⁄¿Y¿YX¿Y†¿Y∆¿YÈ¿Z¿ZB¿Zu¿Z™¿Z·¿[¿[K¿[|¿[Ø¿[‰¿\!¿\w¿\π¿\Í¿]¿]¿]¿]2¿]3¿]Ö¿]Ò¿]Ú¿^j¿^ü¿^†¿^‘¿^⁄¿_*¿_K¿_f¿_g¿_ï¿_ﬂ¿_‡¿`¿`¿`E¿`Ö¿`Ü¿`∆¿`Ó¿a¿a ¿aJ¿aP¿aâ¿aè¿a…¿a¯¿a˘¿b@¿bF¿b¿bÖ¿bæ¿b˙¿c?¿c@¿c¿cÖ¿cæ¿cƒ¿c˛¿d-¿d.¿do¿dê¿dñ¿dœ¿d’¿e¿eJ¿eè¿eê¿e·¿e˚¿f¿fO¿fm¿fs¿f¨¿f≤¿fı¿g6¿g7¿gÜ¿g‘¿g⁄¿h(¿hF¿hL¿hÖ¿hã¿hÕ¿i¿ir¿is¿iƒ¿iﬁ¿i‰¿j2¿jP¿jV¿jè¿jï¿jÿ¿k¿k¿ki¿k∑¿kΩ¿l¿l)¿l/¿lh¿ln¿l∞¿l˛¿mU¿mV¿m§¿m™¿m„¿mÈ¿n"¿nO¿nP¿nù¿n¡¿n«¿o ¿o¿o>¿ox¿oª¿oº¿oÒ¿o˜¿p0¿pR¿p}¿p~¿pœ¿pÚ¿p¯¿q@¿qê¿qπ¿qø¿qœ¿q’¿r¿r^¿r´¿r—¿s ¿s¿sO¿sU¿sü¿sÏ¿t;¿tÑ¿t‘¿u¿u#¿u9¿uÖ¿u≠¿u≥¿v¿vH¿vn¿vt¿vƒ¿wE¿wK¿wõ¿wË¿x5¿xY¿xg¿xÅ¿xû¿x∏¿x‹¿y¿y(¿yD¿yk¿yç¿y¨¿y–¿yﬂ¿yÏ¿y˜¿yˇ¿z	¿z¿z!¿z1¿z7¿zÅ¿z—¿z˜¿{&¿{'¿{p¿{Å¿{¿¿{Í¿{Î¿|;¿|S¿|â¿|»¿|…¿}¿}*¿}0¿}~¿}Ã¿}Û¿~ ¿~>¿~?¿~ê¿~º¿~Ú¿¿¿c¿Å¿™¿¿¿¡¿Ä¿Ä¿Ä`¿Äl¿Äû¿Ä∏¿Äπ¿Äˇ¿Å'¿Å<¿Å=¿Åç¿Åü¿Å•¿Åı¿ÇA¿Çá¿Çç¿Çù¿Ç£¿ÇÌ¿É¿É9¿É:¿Éâ¿Éõ¿É°¿É‹¿É‚¿ÉÚ¿É¯¿ÑK¿Ñ~¿Ñö¿Ñõ¿ÑÍ¿Ñ¸¿Ö¿Ö=¿ÖC¿ÖS¿ÖY¿Ö´¿Öﬁ¿Ö˙¿Ö˚¿ÜE¿Üb¿Üh¿Ü∂¿á ¿á¿á¿á+¿á1¿áq¿á´¿áŸ¿áÒ¿áÚ¿à>¿àP¿àV¿à£¿à∑¿àΩ¿â¿âO¿â}¿âï¿âñ¿âÂ¿â˜¿â˝¿äJ¿ä^¿äd¿ä≥¿ä€¿ã¿ã-¿ã.¿ãy¿ã≈¿å¿å1¿åd¿åe¿åå¿å¨¿å÷¿å◊¿ç¿ç/¿ç0¿çÄ¿çÅ¿ç–¿é¿éE¿éK¿éò¿é∆¿éÃ¿è¿èk¿è¿è¨¿è‚¿èÈ¿ê¿êD¿êX¿ê^¿ê_¿êk¿êﬁ¿ë'¿ë.¿ë/¿ë∏¿ëπ¿ëﬁ¿í¿í<¿í}¿íæ¿íÎ¿ì
¿ì5¿ìX¿ì{¿ìó¿ì¬¿ì·¿î2¿îù¿î…¿îı¿ï¿ïJ¿ïz¿ï™¿ï˘¿ñ*¿ñQ¿ñ{¿ñ©¿ñ◊¿ó¿óH¿ór¿óí¿ó‡¿ó·¿ò¿ò;¿òA¿òB¿òN¿ò≠¿ô,¿ô3¿ô?¿ôû¿ö¿ö$¿ö(¿ö)¿ö*¿öb¿öh¿öπ¿õ¿õ8¿õ]¿õu¿õ¡¿õ¸¿ú¿úC¿ú|¿úµ¿ù ¿ùK¿ùÇ¿ù°¿ù‘¿û+¿û^¿ûç¿û≤¿û‡¿ü¿ü@¿ük¿üñ¿ü…¿üÔ¿†¿†;¿†X¿†è¿†ﬁ¿°/¿°5¿°V¿°Ñ¿°Ÿ¿¢¿¢+¿¢6¿¢â¿¢ë¿¢≈¿£¿£K¿£x¿£É¿£÷¿£ﬁ¿£‰¿£Â¿§¿§?¿§h¿§Ü¿§∑¿§∏¿§Á¿•¿•K¿•v¿•ß¿•⁄¿¶¿¶>¿¶o¿¶®¿¶À¿¶˜¿ß"¿ßG¿ßR¿ßS¿ßs¿ßú¿ß¶¿ß“¿®¿®¿®D¿®â¿®ì¿®»¿©¿©¿©4¿©W¿©a¿©Ç¿©≠¿©◊¿©·¿™4¿™â¿™ì¿™Ω¿™Ù¿´M¿´Å¿´¨¿´ª¿¨¿¨¿¨[¿¨¥¿¨Ó¿≠¿≠.¿≠Ö¿≠ë¿≠õ¿≠Œ¿≠ˇ¿Æ+¿Æc¿Æñ¿Æ°¿Æ”¿Ø¿Ø/¿Øf¿Øô¿Ø§¿Ø•¿ØÒ¿ØÚ¿∞¿∞¿∞¿∞¿∞2¿∞F¿∞ö¿∞∏¿∞‡¿±¿±B¿±|¿±¢¿±∫¿±ﬁ¿±¿≤¿≤(¿≤D¿≤\¿≤Ä¿≤™¿≤ ¿≤¿≥¿≥@¿≥f¿≥å¿≥∫¿¥¿¥'¿¥?¿¥F¿¥J¿¥K¿¥{¿¥¢¿¥¶¿¥ß¿¥·¿µ,¿µw¿µx¿µ◊¿µÎ¿∂¿∂L¿∂x¿∂≥¿∂Ê¿∑¿∑$¿∑T¿∑¢¿∑⁄¿∏
¿∏F¿∏N¿∏ü¿∏Ø¿∏Â¿π¿πa¿πi¿πo¿πò¿π÷¿∫)¿∫q¿∫∫¿ª	¿ª¿ª¿ª/¿ª=¿ªV¿ªs¿ªä¿ª≠¿ª◊¿º¿º9¿ºq¿º≠¿º˜¿Ω3¿Ω}¿Ω•¿Ω€¿Ω¯¿æ!¿æ|¿æ€¿ø¿ø=¿øv¿ø®¿ø”¿¿¿¿G¿¿Ç¿¿√¿¿‰¿¡¿¡?¿¡u¿¡Õ¿¡Ù¿¬#¿¬*¿¬>¿¬B¿¬C¿¬ì¿¬«¿√¿√(¿√i¿√†¿√¬¿√»¿√…¿√˙¿ƒ$¿ƒÄ¿ƒç¿ƒœ¿ƒ˘¿ƒˇ¿≈ ¿≈O¿≈û¿≈Î¿∆2¿∆Ä¿∆«¿∆Í¿«A¿«Ö¿«º¿«›¿»¿»(¿»l¿»®¿»Í¿…0¿…Ä¿…†¿…√¿…ﬂ¿…È¿ ¿ 0¿ 8¿ 9¿ a¿ v¿ ê¿ ¨¿ ∂¿ º¿ Ω¿À	¿À%¿ÀD¿À\¿Àb¿Àä¿Àã¿Àß¿ÀÒ¿Ã¿Ã¿Ã¿ÃL¿ÃR¿Ãõ¿ÃÏ¿Õ¿Õ*¿Õ8¿Õ>¿Õ~¿ÕÇ¿ÕÉ¿Õ∫¿Õ”¿Õ‚¿Œ ¿Œ3¿Œ=¿ŒP¿ŒT¿ŒU¿Œa¿Œ∞¿Œ±¿ŒΩ¿œ¿œ-¿œH¿œZ¿œÆ¿–¿–:¿–@¿–À¿—6¿—¿¿“ ¿“:¿“ò¿“•¿” ¿”¿”6¿”|¿”…¿‘L¿‘Ñ¿‘å¿‘ˆ¿‘¸¿’q¿÷¿÷g¿÷´¿÷º¿◊¿◊t¿ÿ¿ÿS¿ÿ≠¿Ÿ¿Ÿf¿ŸØ¿Ÿ¯¿⁄S¿⁄Æ¿⁄ı¿€@¿€¶¿‹	¿‹5¿‹§¿‹™¿›¿›X¿›∑¿ﬁ¿ﬁa¿ﬁΩ¿ﬂ¿ﬂs¿ﬂ»¿‡¿‡f¿‡∑¿‡ª¿‡º¿·¿·
¿·Z¿·ä¿·ñ¿·Æ¿·Õ¿·Î¿‚!¿‚r¿‚ä¿‚ë¿„@¿„D¿„E¿„Q¿„w¿„â¿„»¿‰¿‰ ¿‰I¿‰[¿‰n¿‰Ç¿‰†¿‰ß¿‰´¿‰¨¿‰∏¿Â9¿Âi¿ÂÕ¿Âﬁ¿Â‚¿Â„¿Ê2¿Êá¿Ê§¿Ê ¿Ê–¿Ê—¿ÊÚ¿Á.¿Á{¿ÁÇ¿ÁÜ¿Áà¿Áâ¿Á”¿Ë¿Ë¿Ëe¿Ë≤¿È¿È[¿È¶¿È◊¿È‰¿Í¿Í¿Í7¿ÍW¿ÍX¿Í°¿Í«¿ÍÕ¿ÍÌ¿ÍÛ¿ÎG¿Îô¿ÎÈ¿Î˝¿Ï¿Ï¿Ïd¿ÏÜ¿Ïù¿Ïû¿Ï≈¿Ï·¿Ï‚¿ÏÓ¿Ì¿Ì;¿Ì?¿ÌA¿ÌB¿Ìë¿Ì«¿ÌÀ¿Ó¿Ó[¿Ós¿Óí¿Ó≥¿Óπ¿Ó∫¿Ô¿Ô&¿Ô,¿Ôx¿Ôù¿Ôπ¿Ô∫¿Ôﬂ¿Ô‡¿¿I¿J¿V¿É¿∏¿º¿Ω¿Ò¿Ò¿Òa¿Òë¿Ò≈¿ÒÙ¿Ú#¿Úq¿Úß¿Ú¡¿Úﬁ¿Û&¿Û;¿ÛE¿Û_¿Û}¿Û…¿Ûﬁ¿ÛË¿ÛÓ¿Ù ¿Ù¿ÙK¿Ùk¿Ù~¿Ùß¿Ù«¿Ù€¿ı¿ı&¿ıN¿ıY¿ı}¿ıå¿ı†¿ı®¿ı¿¿ıÊ¿ı¸¿ˆ¿ˆ
¿ˆ'¿ˆ(¿ˆV¿ˆì¿ˆô¿ˆö¿ˆ∂¿ˆ˝¿˜¿˜¿˜¿˜_¿˜e¿˜¥¿˜’¿˜€¿¯)¿¯v¿¯∆¿¯Ì¿¯Û¿˘>¿˘é¿˘‹¿˙+¿˙W¿˙Ç¿˙ü¿˙≈¿˙Ÿ¿˙ﬂ¿˚#¿˚Q¿˚¿˚û¿˚Ì¿¸!¿¸k¿¸∑¿¸‹¿¸¿¸˙¿¸˚¿˝X¿˝ê¿˝ƒ¿˝¸¿˛G¿˛å¿˛◊¿ˇ"¿ˇT¿ˇ|¿ˇÜ¿ˇé¿ˇî¿ˇï¿ˇæ¿ˇÁ¿ L¿ ò¿ ‰¿'¿F¿d¿l¿û¿¶¿ß¿¡¿Ê¿ˆ¿˛¿¿;¿W¿_¿x¿~¿¿…¿'¿+¿-¿.¿o¿¥¿‘¿Ê¿Í¿%¿K¿p¿r¿s¿√¿—¿’¿#¿t¿Æ¿≤¿‰¿¿¿s¿‹¿	¿9¿Z¿¶¿⁄¿Ú¿¿S¿f¿n¿Ü¿¢¿Ï¿ˇ¿	¿	¿	¿	¿	h¿	Ü¿	ó¿	æ¿	‹¿	Ó¿
¿
5¿
[¿
d¿
Ü¿
ì¿
•¿
´¿
¡¿
„¿
˜¿
˝¿¿¿¿3¿Å¿ê¿í¿ì¿⁄¿¿¿]¿a¿∞¿¯¿=¿T¿l¿~¿ö¿†¿°¿⁄¿ˆ¿˜¿6¿<¿{¿ç¿∞¿±¿˛¿¿!¿"¿.¿Z¿é¿∂¿º¿Î¿Ô¿Ò¿Ú¿<¿W¿[¿™¿˜¿#¿Q¿•¿∏¿›¿„¿#¿[¿á¿∆¿˘¿¿5¿>¿D¿H¿I¿õ¿Í¿¿¿X¿¨¿–¿¿?¿Ä¿ø¿¿¿Û¿˘¿-¿b¿c¿o¿Ç¿Æ¿¸¿¿¿/¿K¿`¿d¿e¿õ¿∫¿¿¿U¿¶¿Ô¿¿I¿j¿é¿ ¿¸¿¿¿#¿$¿k¿í¿ﬂ¿4¿e¿Æ¿Ì¿˜¿ˇ¿ ¿$¿9¿A¿B¿ã¿«¿Ë¿>¿ˆ¿¿	¿
¿@¿ì¿Ô¿ ¿3¿ù¿Î¿ˆ¿ 	¿ _¿ ≤¿ ﬁ¿ È¿ ¸¿!Y¿!µ¿"¿"¿"¿"$¿"%¿"D¿"R¿"X¿"è¿"œ¿"Ù¿#z¿#ï¿#≥¿$¿$4¿$n¿$ã¿$¿%¿%g¿%≈¿&¿&`¿&≈¿&—¿&€¿&„¿&È¿'9¿'û¿'”¿(0¿(r¿(∑¿(˝¿)>¿)b¿)£¿)Ê¿*,¿*p¿*Ö¿*Ø¿*Ì¿*ı¿*˚¿+¿+O¿+¶¿,&¿,,¿,T¿,k¿,o¿,p¿,Ã¿,Ù¿-Q¿-á¿-µ¿-Œ¿. ¿.
¿.0¿.:¿.@¿.Ä¿.ì¿.ô¿.æ¿.¬¿.√¿/¿/¿/f¿/à¿/é¿/€¿/˜¿0@¿0ô¿0¥¿0…¿0◊¿0›¿0ﬁ¿1¿1j¿1é¿1î¿1ò¿1ô¿2¿2:¿2l¿2•¿2∫¿2¬¿3¿3¿31¿3D¿3J¿3z¿3ó¿3Ã¿3˚¿4¿4-¿47¿4L¿4V¿4}¿4É¿4ü¿4„¿5S¿5r¿5å¿5ñ¿5û¿5§¿5∆¿5 ¿5À¿6¿6#¿6r¿6î¿6ö¿6Á¿7¿7W¿7ä¿7¢¿7∞¿7∂¿8!¿8<¿8Q¿8W¿8[¿8\¿8h¿8ó¿8ô¿8ö¿8‹¿8¿8Ù¿9>¿9R¿9q¿9r¿9í¿9ì¿9·¿9¸¿:¿:Q¿:†¿:Ï¿;¿;¿;Y¿;£¿;–¿;÷¿<#¿<Y¿<}¿<§¿<€¿<¸¿= ¿=¿=P¿=V¿=û¿=Î¿>7¿>=¿>ä¿> ¿?¿?%¿?+¿?y¿?»¿?Ú¿@¿@¿@j¿@π¿@Ï¿@Ú¿A?¿Aç¿A¡¿B¿B]¿Bé¿Bî¿B·¿C0¿CS¿CT¿C£¿CÒ¿D¿D¿DV¿D¢¿DÒ¿E¿E"¿Er¿E¿¿F¿F¿F]¿Fò¿F‘¿F’¿FÔ¿G)¿GI¿GJ¿Gu¿G{¿G…¿G˙¿H,¿HN¿HO¿Hõ¿H—¿H◊¿HÁ¿HÌ¿I¿IÇ¿IÉ¿I˙¿J¿J¿JC¿JI¿Jë¿J°¿JÌ¿K¿K1¿KO¿KS¿KT¿K¢¿K∑¿KΩ¿L¿L¿Lc¿Lã¿Lß¿L∏¿L¿¿Lƒ¿L≈¿LÚ¿L¯¿MH¿Mò¿M¶¿M¨¿M¯¿N?¿NE¿Nê¿Nﬁ¿O/¿O}¿OÕ¿P¿Pi¿P∑¿Pˇ¿QP¿Qê¿Qµ¿QÕ¿Q¿R)¿R=¿RA¿RB¿Ru¿R{¿RÀ¿S¿S¿SX¿Sß¿Sπ¿SÍ¿T¿T1¿Tp¿Tä¿Té¿Tè¿T√¿T…¿U¿Uf¿UÖ¿Uã¿U€¿V'¿Vr¿V¡¿V‘¿W¿W&¿WP¿Wê¿W´¿WØ¿W∞¿W·¿WÁ¿X&¿X,¿Xy¿X»¿XÊ¿Y¿Y/¿YV¿Yì¿Y´¿YØ¿Y∞¿YÂ¿YÎ¿Z:¿Zà¿Zß¿Z≠¿Z˛¿[J¿[ó¿[Á¿[˙¿\/¿\O¿\z¿\ª¿\◊¿\€¿\‹¿]¿]¿]c¿]±¿]Œ¿]‘¿^"¿^n¿^π¿_¿_¿_J¿_g¿_è¿_Õ¿_Ê¿_Í¿_Î¿`¿`%¿`t¿`¬¿`ﬂ¿`Â¿a5¿aÅ¿aŒ¿b¿b1¿bd¿bÉ¿b≠¿bÌ¿c¿c¿c¿c?¿cE¿cí¿c÷¿c‹¿d ¿dm¿ds¿dø¿e¿e'¿eV¿es¿eõ¿eŸ¿eÚ¿eˆ¿e˜¿f)¿f/¿f|¿f¿¿f∆¿g
¿gW¿g]¿g´¿g˚¿h¿hD¿ha¿hâ¿h«¿h‡¿h‰¿hÂ¿i¿i¿ia¿ig¿i∂¿iﬂ¿j¿j¿jC¿j}¿jí¿jñ¿jó¿jƒ¿j ¿k¿k$¿k*¿ky¿k¢¿k«¿kﬂ¿l¿l;¿lO¿lS¿lT¿lÉ¿lâ¿l–¿l÷¿m%¿mN¿mw¿më¿m∂¿mÒ¿n¿n¿n¿nB¿nH¿nñ¿nÊ¿o
¿o¿oY¿o°¿o√¿o˙¿p¿pG¿pâ¿p¶¿p™¿p´¿pÒ¿p˜¿qA¿ql¿qr¿q¿¿qÊ¿rB¿rx¿rπ¿r‘¿s"¿sT¿ss¿s{¿s®¿s¨¿s≠¿sÙ¿s˙¿tD¿tp¿tv¿t∆¿tÏ¿uJ¿uÅ¿u√¿uﬁ¿v-¿v_¿v~¿vÜ¿v¥¿v∏¿vπ¿v˙¿w ¿wJ¿wq¿ww¿w«¿wÌ¿x?¿xp¿x¨¿x«¿y¿yB¿ya¿yi¿yñ¿yö¿yõ¿y›¿y„¿z-¿zT¿zZ¿z™¿z–¿{$¿{V¿{ì¿{Æ¿{¯¿|*¿|I¿|Q¿|¿|É¿|Ñ¿|∫¿|¿¿}¿}[¿}a¿}¨¿}Ó¿~,¿~T¿~á¿~¢¿~‡¿¿j¿≤¿Œ¿ˆ¿Ä"¿Ä,¿Ä4¿ÄQ¿ÄU¿ÄV¿Äá¿Äç¿Äﬁ¿Å¿Å
¿ÅY¿Åv¿Å•¿Å√¿ÅÏ¿Ç¿Ç@¿Çn¿Çô¿Ç≠¿Çµ¿ÇÕ¿Ç—¿Ç“¿É¿É¿Éi¿Éß¿ÉÔ¿Ñ9¿Ñc¿Ñi¿Ñ∫¿Ö¿ÖY¿Ö_¿Öo¿Öu¿Ö≈¿ÖÓ¿Ü@¿Üë¿Üø¿Ü¯¿áG¿áq¿áu¿áv¿áπ¿áø¿à¿àG¿àì¿à›¿â¿â¿â^¿âØ¿â˝¿ä¿ä¿ä¿äf¿äÑ¿ä÷¿ã'¿ãU¿ãé¿ã›¿å¿å¿å¿åI¿år¿åå¿å±¿åÏ¿ç¿ç¿ç¿çV¿çs¿çy¿ç∆¿é¿ée¿é±¿é∑¿è¿èV¿èà¿èÒ¿ê7¿êà¿ê£¿êÕ¿ë¿ëB¿ëF¿ëG¿ëî¿ë¶¿ë˛¿ëˇ¿íN¿í`¿íf¿í¥¿ì¿ì)¿ì/¿ì~¿ì…¿î¿î7¿îd¿îÇ¿î´¿î∆¿î‹¿î˙¿î˛¿îˇ¿ïK¿ïQ¿ïô¿ïË¿ñ8¿ñj¿ññ¿ñ≠¿ñœ¿ñÎ¿ó	¿ó¿ó¿óZ¿ó`¿ó≠¿óπ¿óÎ¿ò¿ò*¿òO¿ò]¿òc¿òÇ¿ò†¿ò§¿ò•¿òÔ¿ô ¿ô(¿ô=¿ô]¿ô}¿ôã¿ôë¿ô´¿ô…¿ôÕ¿ôŒ¿ö¿ö5¿öc¿ö{¿öû¿ö¡¿öœ¿ö’¿öÚ¿õ¿õ¿õ¿õa¿õs¿õy¿õ∆¿õ⁄¿õ‡¿ú,¿úe¿úì¿ú´¿úŒ¿úÒ¿úˇ¿ù¿ù"¿ù@¿ùD¿ùE¿ùî¿ù¶¿ù¨¿ù˘¿û¿û¿û^¿û}¿û≥¿ûœ¿ûˆ¿ü¿ü+¿ü1¿üR¿üp¿üt¿üu¿ü∆¿†¿†¿†W¿†ú¿†⁄¿†‡¿°,¿°|¿°≠¿°·¿¢¿¢/¿¢M¿¢Q¿¢R¿¢ë¿¢ó¿¢„¿£-¿£v¿£≠¿§¿§}¿§Ã¿§Í¿•$¿•I¿•ê¿•î¿•ï¿•≈¿¶¿¶8¿¶F¿¶L¿¶ê¿¶¨¿¶æ¿¶ƒ¿¶»¿¶…¿ß	¿ß1¿ßL¿ßr¿ßê¿ßÆ¿ß≤¿ß≥¿ßÌ¿ßÛ¿®5¿®;¿®t¿®z¿®ä¿®ê¿®ﬁ¿©¿©)¿©Y¿©w¿©{¿©|¿©À¿©Ÿ¿©ﬂ¿™)¿™x¿™ƒ¿´¿´N¿´T¿´ç¿´ì¿´£¿´©¿´„¿¨¿¨[¿¨ï¿¨Ω¿¨€¿¨ﬂ¿¨‡¿≠0¿≠6¿≠x¿≠~¿≠∑¿≠Ω¿≠Õ¿≠”¿Æ!¿Æo¿Æµ¿Ø¿ØI¿Øx¿Øî¿Øƒ¿Ø‚¿ØÊ¿ØÁ¿∞6¿∞Z¿∞`¿∞™¿∞˘¿±E¿±é¿±œ¿±’¿≤¿≤¿≤$¿≤*¿≤d¿≤¥¿≤‰¿≥4¿≥d¿≥†¿≥‹¿¥¿¥>¿¥\¿¥`¿¥a¿¥õ¿¥ƒ¿¥ ¿µ¿µ¿µj¿µ¥¿µﬂ¿µÂ¿∂¿∂$¿∂4¿∂:¿∂ë¿∂“¿∑ ¿∑B¿∑`¿∑d¿∑e¿∑ü¿∑Â¿∑Î¿∏:¿∏Ñ¿∏Ø¿∏µ¿∏Ó¿∏Ù¿π¿π
¿πM¿πõ¿π‡¿∫,¿∫f¿∫Ñ¿∫à¿∫â¿∫√¿∫Ï¿∫Ú¿ª=¿ªC¿ªí¿ª‹¿º¿º¿ºF¿ºL¿º£¿º‰¿Ω¿ΩT¿Ωr¿Ωv¿Ωw¿Ω±¿Ω˜¿Ω˝¿æL¿æñ¿æ¡¿æ«¿ø ¿ø¿ø¿ø¿ø_¿ø≠¿øÚ¿¿>¿¿x¿¿ñ¿¿ö¿¿õ¿¿È¿¿Ô¿¡0¿¡6¿¡o¿¡u¿¡Ö¿¡ã¿¡ÿ¿¬¿¬¿¬M¿¬k¿¬o¿¬p¿¬¿¿¬·¿¬Á¿√0¿√¿√Ã¿ƒ¿ƒV¿ƒ\¿ƒï¿ƒõ¿ƒ´¿ƒ±¿ƒÍ¿≈$¿≈_¿≈ó¿≈Ω¿≈€¿≈ﬂ¿≈‡¿∆¿∆¿∆T¿∆v¿∆é¿∆Æ¿∆∆¿∆‰¿∆Ë¿∆È¿«2¿«C¿«Ç¿«¨¿«·¿«˙¿»¿»¿»*¿»H¿»L¿»M¿»ñ¿»º¿»‚¿»˝¿…¿…7¿…V¿…d¿…j¿…Ç¿…†¿…§¿…•¿…ˆ¿ ¿ ¿ b¿ ±¿ ≈¿ Î¿À¿À&¿À@¿À_¿Àm¿Às¿Àã¿À©¿À≠¿ÀÆ¿À˘¿Ã¿Ã¿Ã*¿Ã0¿Ã¿Ãæ¿Ãﬁ¿Õ¿Õ¿Õ¿ÕS¿ÕY¿Õi¿Õo¿Õº¿Õ˘¿Œ¿ŒG¿ŒK¿ŒL¿ŒÇ¿Œπ¿Œ’¿œ¿œ¿œ¿œ9¿œ?¿œã¿œÿ¿–¿–¿–_¿–≠¿–˚¿—@¿—è¿—π¿—ø¿—œ¿—’¿“+¿“j¿“â¿“∫¿“æ¿“ø¿”¿”3¿”i¿”ä¿”æ¿”‚¿‘ ¿‘¿‘¿‘P¿‘V¿‘£¿‘ˆ¿’H¿’Ä¿’Ω¿’‹¿÷¿÷¿÷¿÷a¿÷ª¿÷¡¿◊¿◊Z¿◊`¿◊©¿◊…¿ÿ9¿ÿY¿ÿç¿ÿΩ¿ÿ¡¿ÿ¬¿Ÿ ¿Ÿ¿ŸW¿Ÿ¶¿Ÿ€¿Ÿ·¿⁄1¿⁄U¿⁄[¿⁄™¿⁄◊¿⁄›¿€0¿€Ü¿€î¿‹¿‹ ¿‹S¿‹Ç¿‹Ü¿‹á¿‹ÿ¿›#¿›7¿›=¿›é¿›’¿›€¿ﬁ$¿ﬁC¿ﬁ∞¿ﬁœ¿ﬂ¿ﬂ:¿ﬂi¿ﬂm¿ﬂn¿ﬂ∫¿ﬂ‚¿ﬂË¿‡9¿‡Ä¿‡Ü¿‡œ¿‡Í¿·g¿·é¿·æ¿·Ò¿‚(¿‚,¿‚-¿‚~¿‚Ã¿‚“¿„#¿„_¿„e¿„Æ¿„¬¿‰/¿‰N¿‰Å¿‰∞¿‰¥¿‰µ¿Â¿Â;¿ÂA¿Âé¿Â÷¿Ê3¿Êb¿Ê°¿Ê•¿Ê¶¿ÊË¿Á'¿ÁG¿Áw¿Á{¿Á|¿Á≈¿Ë ¿Ë¿ËL¿ËP¿ËQ¿Ëú¿Ë’¿ËÚ¿È¿È#¿È$¿Èm¿È¢¿ÈΩ¿ÈË¿ÈÏ¿ÈÌ¿Í$¿ÍD¿ÍU¿ÍV¿Ír¿Íè¿Íù¿Í£¿Íπ¿Í◊¿Í€¿Í‹¿Î'¿Î`¿Î}¿Î™¿ÎÆ¿ÎØ¿ÎÏ¿ÎÚ¿Ï@¿Ïi¿ÏÇ¿ÏÉ¿Ï£¿Ï…¿ÏÍ¿Ï¯¿Ï˛¿Ì¿Ì7¿Ì;¿Ì<¿Ìá¿Ì¿¿Ì›¿Ó
¿Ó¿Ó¿ÓW¿Ód¿Óß¿Ó…¿Ó˚¿Óˇ¿Ô ¿Ô>¿ÔD¿Ôì¿Ô‰¿ÔÍ¿:¿á¿ô¿ü¿Ô¿Ò¿Ò¿Òe¿Ò≥¿Ú ¿Ú8¿Úq¿Úé¿Úª¿Úø¿Ú¿¿Ú˘¿Û8¿ÛX¿Ûà¿Ûå¿Ûç¿Û√¿Û…¿Û˚¿Ù8¿ÙW¿ÙÜ¿Ùä¿Ùã¿Ùµ¿Ùª¿ı
¿ıZ¿ıõ¿ıÿ¿ı˜¿ˆ&¿ˆ*¿ˆ+¿ˆV¿ˆ\¿ˆ´¿ˆ‰¿˜#¿˜C¿˜s¿˜w¿˜x¿˜»¿˜Û¿˜˘¿¯I¿¯ó¿¯‚¿˘¿˘d¿˘ç¿˘∆¿˘ ¿˘À¿˙¿˙H¿˙~¿˙ü¿˙À¿˙Ê¿˚¿˚ ¿˚$¿˚%¿˚u¿˚á¿˚ç¿˚›¿¸)¿¸o¿¸u¿¸Ö¿¸ã¿¸’¿˝¿˝!¿˝G¿˝b¿˝¿˝ù¿˝°¿˝¢¿˝Ò¿˛¿˛	¿˛D¿˛J¿˛Z¿˛`¿˛≥¿˛Ê¿ˇ¿ˇ)¿ˇD¿ˇb¿ˇÄ¿ˇÑ¿ˇÖ¿ˇ‘¿ˇÊ¿ˇÏ¿ '¿ -¿ =¿ C¿ ñ¿ …¿ Â¿¿'¿E¿c¿g¿h¿r¿s¿ª¿”¿Ÿ¿È¿Ô¿>¿N¿ë¿í¿›¿˘¿P¿Q¿x¿y¿»¿Ê¿Ï¿0¿Å¿ü¿•¿Ò¿B¿è¿ï¿•¿´¿Ï¿¿5¿`¿Ä¿Ñ¿Ö¿£¿§¿∂¿Ë¿˘¿¿"¿?¿E¿c¿g¿h¿´¿¨¿—¿“¿¿0¿6¿Ö¿ ¿	¿	L¿	_¿	e¿	õ¿	Ø¿	µ¿	›¿	Ò¿	˜¿
;¿
O¿
U¿
ô¿
≠¿
≥¿
ˇ¿¿¿s¿á¿ç¿û¿¢¿£¿Ô¿ı¿C¿g¿m¿º¿ˆ¿¸¿F¿ò¿“¿ ¿!¿"¿E¿S¿Y¿Ä¿”¿	¿*¿4¿>¿K¿r¿x¿≠¿¿¿9¿h¿ô¿ ¿˜¿#¿L¿¿Æ¿›¿¿¿>¿f¿à¿è¿ê¿ª¿‹¿˘¿ ¿&¿V¿Ñ¿¨¿·¿¿¿@¿q¿w¿©¿Ï¿Ú¿$¿g¿m¿ú¿…¿Ò¿%¿T¿[¿u¿ñ¿ú¿ù¿È¿Í¿0¿4¿5¿h¿ä¿Æ¿‡¿¿r¿†¿Ï¿¿0¿R¿~¿º¿Ë¿&¿P¿x¿î¿¥¿‘¿Ï¿¿@¿j¿ñ¿¬¿Í¿¿5¿c¿ç¿∑¿È¿¿K¿Å¿ß¿ƒ¿»¿ ¿À¿¿+¿J¿w¿}¿ ¿¿L¿^¿_¿é¿î¿„¿ ¿ ¿ ¿ ¿ B¿ t¿ ß¿ ‘¿!¿!¿!5¿!V¿!Z¿!©¿!˜¿"1¿"k¿"r¿"⁄¿"ﬁ¿#¿#-¿#1¿#2¿#Ç¿#Ñ¿#Ö¿#÷¿#Û¿#˜¿$D¿$î¿$Œ¿$“¿%¿%K¿%O¿%†¿%Ã¿%–¿%ﬁ¿%‚¿&&¿&Ñ¿&’¿'¿'D¿'E¿'ñ¿'©¿'Ø¿'Ô¿'ı¿(C¿(r¿(à¿(â¿(ï¿(ø¿(ı¿)t¿)u¿)ƒ¿)Â¿*¿*"¿*(¿*)¿*{¿*ä¿*∏¿*…¿*˛¿+¿+¿+¿+>¿+B¿+C¿+l¿+r¿+¬¿+Ÿ¿+ﬂ¿,0¿,Ä¿,Œ¿,€¿,Ë¿-¿-¿-(¿-m¿-ò¿-ﬁ¿-‚¿-‰¿-Â¿.+¿.6¿.:¿.Ä¿.¨¿.∞¿/ ¿/O¿/ê¿/ß¿/´¿/˜¿0$¿0(¿0t¿0Ω¿0ˇ¿15¿1e¿1µ¿1ª¿1Ê¿1˛¿2¿2 ¿2P¿2x¿2y¿2«¿3¿3'¿3-¿3{¿3»¿3ﬁ¿3ﬂ¿3Î¿4¿43¿4C¿4I¿4r¿4v¿4w¿4É¿4»¿4Û¿5;¿5?¿5A¿5B¿5ç¿5∑¿5ª¿6¿6R¿6V¿6•¿6¿7¿7S¿7ä¿7å   ~/// @docImport 'dart:ui';
///
/// @docImport 'package:flutter/material.dart';
/// @docImport 'package:flutter/rendering.dart';	Å.ÅE ÅJ Å[Å’Åÿ  Ç  Ç/ ÇVÇyÇ{  Ç£  Ç÷ ÇÏÉÉ  É#É4ÉìÉñÉøÑ3Ñ5Ñ\ÑnÑpÑ°Ñ≠Ñ∞ÑŒÑ· ç3Ñ˝è‡Ç¶/// A tag for a [SemanticsNode].
///
/// Tags can be interpreted by the parent of a [SemanticsNode]
/// and depending on the presence of a tag the parent can for example decide
/// how to add the tagged node as a child. Tags are not sent to the engine.
///
/// As an example, the [RenderSemanticsGestureHandler] uses tags to determine
/// if a child node should be excluded from the scrollable area for semantic
/// purposes.
///
/// The provided [name] is only used for debugging. Two tags created with the
/// same [name] and the `new` operator are not considered identical. However,
/// two tags created with the same [name] and the `const` operator are always
/// identical. èÒÅE ëë*Å/// Creates a [SemanticsTag].
///
/// The provided [name] is only used for debugging. Two tags created with the
/// same [name] and the `new` operator are not considered identical. However,
/// two tags created with the same [name] and the `const` operator are always
/// identical.ë+	ë1   ë:Äöë–ÄÇ/// A human-readable name for this tag used for debugging.
///
/// This string is not used to determine if two tags are identical.  ëŸUëÏ   ëŸë⁄ í2á(ì∆Åç/// The result that contains the arrangement for the child
/// [SemanticsConfiguration]s.
///
/// When the [PipelineOwner] builds the semantics tree, it uses the returned
/// [ChildSemanticsConfigurationsResult] from
/// [SemanticsConfiguration.childConfigurationsDelegate] to decide how semantics nodes
/// should form.
///
/// Use [ChildSemanticsConfigurationsResultBuilder] to build the result. ìÌLîîî îî  î î&   î=ÅyïØÅB/// Returns the [SemanticsConfiguration]s that are supposed to be merged into
/// the parent semantics node.
///
/// [SemanticsConfiguration]s that are either semantics boundaries or are
/// conflicting with other [SemanticsConfiguration]s will form explicit
/// semantics nodes. All others will be merged into the parent. ïªÉúôEÉD/// The groups of child semantics configurations that want to merge together
/// and form a sibling [SemanticsNode].
///
/// All the [SemanticsConfiguration]s in a given group that are either
/// semantics boundaries or are conflicting with other
/// [SemanticsConfiguration]s of the same group will be excluded from the
/// sibling merge group and form independent semantics nodes as usual.
///
/// The result [SemanticsNode]s from the merges are attached as the sibling
/// nodes of the immediate parent semantics node. For example, a `RenderObjectA`
/// has a rendering child, `RenderObjectB`. If both of them form their own
/// semantics nodes, `SemanticsNodeA` and `SemanticsNodeB`, any semantics node
/// created from sibling merge groups of `RenderObjectB` will be attach to
/// `SemanticsNodeA` as a sibling of `SemanticsNodeB`.    ô\à.ö√Å`/// The builder to build a [ChildSemanticsConfigurationsResult] based on its
/// annotations.
///
/// To use this builder, one can use [markAsMergeUp] and
/// [markAsSiblingMergeGroup] to annotate the arrangement of
/// [SemanticsConfiguration]s. Once all the configs are annotated, use [build]
/// to generate the [ChildSemanticsConfigurationsResult]. öÒi õ.õW:/// Creates a [ChildSemanticsConfigurationsResultBuilder].  õ^HõÅ õ§õ•õåõ£õçõ™_õ” úúõÈúõÍõÓúõÔ úÅ1ú˙Ä‹/// Marks the [SemanticsConfiguration] to be merged into the parent semantics
/// node.
///
/// The [SemanticsConfiguration] will be added to the
/// [ChildSemanticsConfigurationsResult.mergeUp] that this builder builds. ùù    ùCÅtûUÅ/// Marks a group of [SemanticsConfiguration]s to merge together
/// and form a sibling [SemanticsNode].
///
/// The group of [SemanticsConfiguration]s will be added to the
/// [ChildSemanticsConfigurationsResult.siblingMergeGroups] that this builder builds. ûm$ûã   ûªÇÕü,K/// Builds a [ChildSemanticsConfigurationsResult] contains the arrangement.    °ååÅ•bÉƒ/// An identifier of a custom semantics action.
///
/// Custom semantics actions can be provided to make complex user
/// interactions more accessible. For instance, if an application has a
/// drag-and-drop list that requires the user to press and hold an item
/// to move it, users interacting with the application using a hardware
/// switch may have difficulty. This can be made accessible by creating custom
/// actions and pairing them with handlers that move a list item up or down in
/// the list.
///
/// In Android, these actions are presented in the local context menu. In iOS,
/// these are presented in the radial context menu.
///
/// Localization and text direction do not automatically apply to the provided
/// label or hint.
///
/// Instances of this class should either be instantiated with const or
/// new instances cached in static fields.
///
/// See also:
///
///  * [SemanticsProperties], where the handler for a custom action is provided. •|Ä‘ •⁄•ÔQ/// Creates a new [CustomSemanticsAction].
///
/// The [label] must not be empty.•Ò¶  ¶¶¶&¶!¶¶$¶4¶/¶6¶I¶B¶K¶TÅ%¶˜¶¯ß/// Creates a new [CustomSemanticsAction] that overrides a standard semantics
/// action.
///
/// The [hint] must not be empty.ß
ß   ß%$ßD  	ßRßXßcß^ßYßaßrßlßtß}Qß…;/// The user readable name of this custom semantics action. ß”N®9/// The hint description of this custom semantics action. ®&W®w7/// The standard semantics action this action replaces. ™≤™Ω ™«™ÃV™˘ ´ ´!´´´´
´&R´S ´v´w´Z´u´[´r®ÇA®ñ   ®Ç®É®«Å®·  ®‰®Ï  ®«®»©ÃÄÄ©ﬂ   ©Ã©Õ´}Å´∑,/// Get the identifier for a given `action`. ´≈´‹   ¨ó}¨‰,/// Get the `action` for a given identifier. ¨Ó¨Û   ≠ÄÛ≠äN/// Resets internal state between tests. Does nothing if asserts are disabled.  ≠i≠j•Q•RÆäDÆX7/// A string that carries a list of [StringAttribute]s. ÆmÇª ØPØ`Ä‘/// Creates a attributed string.
///
/// The [TextRange] in the [attributes] must be inside the length of the
/// [string].
///
/// The [attributes] must not be changed after the attributed string is
/// created.ØfØl  Øy+Ø  ØãØ¢Ø£ØëØ°ØíØ≠Ø≥Ø€Ø∆Ø¥Ø∫ØªØ…Ø”Ø‘ØÂØÎ±&ØÏ±#±$±%±,K±q5/// The plain string stored in the attributed string. ±|Äò≤
k/// The attributes this string carries.
///
/// The list must not be modified after this string is created. ∑â@∑ù   ∑â∑ä≤Ñ3≥Ä⁄/// Returns a new [AttributedString] by concatenate the operands
///
/// The string attribute list of the returned [AttributedString] will contains
/// the string attributes from both operands with updated text ranges. ≥≥*   ∂PÅ5∂∂I/// Two [AttributedString]s are equal if their string and attributes are. ∂π∂¡  ∂ú∂ù∑ÕÄÑ∑‡   ∑Õ∑ŒÆGÆH∏UÖï∏„Äá/// A [DiagnosticsProperty] for [AttributedString]s, which shows a string
/// when there are no attributes, and more details otherwise. π.ÅF π∑πœÄÇ/// Create a diagnostics property for an [AttributedString] object.
///
/// Such properties are used with [SemanticsData] objects.π’π„  πÏπÛ  πˇ∫  ∫∫  ∫3∫:  ∫K∫R  ∫\∫c  ∫(∫xÄÀª6Ä™/// Whether to show the property when the [value] is an [AttributedString]
/// whose [AttributedString.string] is the empty string.
///
/// This overrides [defaultValue]. ªH|ª]   ªHªIª»Ç ª€  ªÍ*º  ª»ª… ΩÏøøzÅ|/// Summary information about a [SemanticsNode] object.
///
/// A semantics node might [SemanticsNode.mergeAllDescendantsIntoThisNode],
/// which means the individual fields on the semantics node don't fully describe
/// the semantics at that node. This data structure contains the full semantics
/// for the node.
///
/// Typically obtained from [SemanticsNode.getSemanticsData]. ø†àµ ¿ @¿ @%q/// Creates a semantics data object.
///
/// If [label] is not empty, then [textDirection] must also not be null.¿ @,¿ @;  ¿ @E¿ @T  ¿ @`¿ @o  ¿ @~¿ @ç  ¿ @°¿ @∞  ¿ @ƒ&¿ @”  ¿ @&¿ @ˇ  ¿ A¿ A+  ¿ A>¿ AM  ¿ AY¿ Ah  ¿ Az¿ Aâ  ¿ Aí¿ A°  ¿ AØ¿ Aæ  ¿ AÃ¿ A€  ¿ AÌ¿ A¸  ¿ B¿ B  ¿ B0¿ B?  ¿ BR¿ Ba  ¿ Bu¿ BÑ  ¿ Bò¿ Bß  ¿ B∫¿ B…  ¿ B‹ ¿ BÎ  ¿ C¿ C  ¿ C"¿ C1  ¿ C=	¿ CC  ¿ CL¿ CR  ¿ C`¿ Cf  Äì¿ CÜ¿ Cå¿ C≥¿ Cˇ¿ Cõ¿ Cï¿ Cç¿ Cò¿ C¨¿ Cû¿ CØ¿ Cµ¿ C€¿ C‹¿ C„¿ D	¿ D¿ DE¿ D†¿ D-¿ D'¿ D¿ D¿ D ¿ D*¿ D>¿ D0¿ DA¿ DG¿ Dk¿ DÉ¿ Dm¿ D|¿ D}¿ DÑ¿ D™¿ D∞¿ DÊ¿ EA¿ DŒ¿ D»¿ D±¿ D¿¿ D¡¿ DÀ¿ Dﬂ¿ D—¿ D‚¿ DË¿ E¿ E$¿ E¿ E¿ E¿ E%¿ EK¿ EQ¿ Eê¿ E˝¿ Ex¿ Er¿ ER¿ Ej¿ Ek¿ Eu¿ Eâ¿ E{¿ Eå¿ Eí¿ Eø¿ E‡¿ E¡¿ EŸ¿ E⁄¿ E·¿ F¿ F¿ FL¿ Fπ¿ F4¿ F.¿ F¿ F&¿ F'¿ F1¿ FE¿ F7¿ FH¿ FN¿ F{¿ Fú¿ F}¿ Fï¿ Fñ¿ Fù¿ F√¿ F…¿ F˛¿ GW¿ FÊ¿ F‡¿ F ¿ Fÿ¿ FŸ¿ F„¿ F˜¿ FÈ¿ F˙¿ G ¿ G#¿ G:¿ G%¿ G3¿ G4¿ G;¿ Ga¿ Gg¿ Gé¿ G∑¿ Gz¿ Gu¿ Gh¿ Gx¿ Gä¿ G}¿ Gç¿ Gê¿ G¡¿ G«¿ H¿ HS¿ Gÿ¿ G–¿ G»¿ G”¿ H ¿ G€¿ G˛¿ G‚¿ G‹¿ G‰¿ GÒ¿ GÚ¿ G¯¿ G˘¿ H¿ H¿ HYN¿ H¢</// A bit field of [SemanticsFlag]s that apply to this node. ¿ H¨R¿ H˜>/// A bit field of [SemanticsAction]s that apply to this node. ¿ IW¿ IP=/// {@macro flutter.semantics.SemanticsProperties.identifier} ¿ JLÅ¿ KCÄ”/// A textual description for the current label of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [label], which exposes just the raw text. ¿ LDÅ¿ M;Ä”/// A textual description for the current value of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [value], which exposes just the raw text. ¿ N}Å8¿ OùÄ¸/// The value that [value] will become after performing a
/// [SemanticsAction.increase] action in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [increasedValue], which exposes just the raw text. ¿ PËÅ8¿ RÄ¸/// The value that [value] will become after performing a
/// [SemanticsAction.decrease] action in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [decreasedValue], which exposes just the raw text. ¿ SÅ¿ T#Ä·/// A brief description of the result of performing an action on this node
/// in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [hint], which exposes just the raw text. ¿ T6Äà¿ T∑m/// A textual description of the widget's tooltip.
///
/// The reading direction is given by [textDirection]. ¿ T√ÄÔ¿ U¶Ä–/// Indicates that this subtree represents a heading.
///
/// A value of 0 indicates that it is not a heading. The value should be a
/// number between 1 and 6, indicating the hierarchical level as a heading. ¿ U∑Äñ¿ V@o/// The reading direction for the text in [label], [value],
/// [increasedValue], [decreasedValue], and [hint]. ¿ VRÄü¿ V‰x/// The currently selected text (or the position of the cursor) within [value]
/// if this node represents a text field. ¿ VˆÄ∆¿ W¨Ä¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null. ¿ W¡\¿ XC/// The index of the first visible semantic child of a scroll node. ¿ X"ÅÃ¿ Y‡Åõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken. ¿ YÛÅ.¿ [Å /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken. ¿ [&Å.¿ \EÅ /// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent], from where this value is usually taken. ¿ \YÅ…¿ ^Åô/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.
///
/// If this value is non-null, the SemanticsNode must not have any children
/// as those would be replaced by the semantics nodes of the referenced
/// platform view.
///
/// See also:
///
///  * [AndroidView], which is the platform view for Android.
///  * [UiKitView], which is the platform view for iOS. ¿ ^'Åv¿ _èÅL/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Defaults
/// to null, which means no limit is imposed on the text field. ¿ _¢Åg¿ `˜Å9/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. This must
/// be set when [maxValueLength] is set. ¿ aÄü¿ a¶ÄÇ/// The URL that this node links to.
///
/// See also:
///
/// * [SemanticsFlag.isLink], which indicates that this node is a link. ¿ a≤N¿ a¸</// The bounding box for this node in its coordinate system. ¿ bY¿ bZ9/// The set of [SemanticsTag]s associated with this node. ¿ bcÅ¿ cyÄ¸/// The transform from this node's coordinate system to its parent's coordinate system.
///
/// By default, the transform is null, which represents the identity
/// transformation (i.e., that this node has the same coordinate system as its
/// parent). ¿ cáÄÏ¿ djÄ…/// The elevation of this node relative to the parent semantics node.
///
/// See also:
///
///  * [SemanticsConfiguration.elevation] for a detailed discussion regarding
///    elevation and semantics. ¿ dxÄƒ¿ e3Ä£/// The extent of this node along the z-axis beyond its [elevation]
///
/// See also:
///
///  * [SemanticsConfiguration.thickness] for a more detailed definition. ¿ eAÅ0¿ fYÄˆ/// The identifiers for the custom semantics actions and standard action
/// overrides for this node.
///
/// The list must be sorted in increasing order.
///
/// See also:
///
///  * [CustomSemanticsAction], for an explanation of custom actions. ¿ I_ÄÈ¿ J(Ä≥/// A textual description for the current label of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedLabel].   ¿ KWÄÈ¿ L Ä≥/// A textual description for the current value of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedValue].   ¿ MOÅ*¿ NGÄ‡/// The value that [value] will become after performing a
/// [SemanticsAction.increase] action.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedIncreasedValue].   ¿ O∫Å*¿ P≤Ä‡/// The value that [value] will become after performing a
/// [SemanticsAction.decrease] action.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedDecreasedValue].   ¿ R%Äı¿ R¸Ä¡/// A brief description of the result of performing an action on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedHint].   ¿ xÃÇå¿ x‡   ¿ xÃ¿ xÕ¿ fvm¿ f™,/// Whether [flags] contains the given flag. ¿ f≤¿ f¡   ¿ fÁ{¿ g0/// Whether [actions] contains the given action. ¿ g)¿ g:   ¿ gfO¿ gy   ¿ gf¿ gg¿ gπã†¿ g   ¿ gﬁ&¿ g˚  ¿ gπ¿ g∫¿ s]Ök¿ sw  ¿ sz¿ sÇ  ¿ s]¿ s^¿ {\Åû¿ {h  ¿ {z¿ {Ü  ¿ {ã¿ {ó   øiøj¿ |˛Åq¿ }  ¿ }OÄÜ ¿ }O¿ }k ¿ }r
¿ }y  ¿ }Ç¿ }í  ¿ }ú¿ }¨  ¿ }∂¿ }≈   ¿ }Ÿ(¿ }˜   ¿ ~g¿ ~(   ¿ ~¿ ~ ¿ ~qá#¿ 	ÄÜ/// Provides hint values which override the default hints on supported
/// platforms.
///
/// On iOS, these values are always ignored. ¿ ?Äº ¿ o¿ Ö'/// Creates a semantics hint overrides.¿ å¿ í  ¿ †¿ ¶  ¿ Ω¿ √¿ ”¿ Œ¿ ƒ¿ —¿ ›¿ „¿ ˘¿ Ù¿ ‰¿ ˜¿ ˇÅ8¿ Å.Å/// The hint text for a tap action.
///
/// If null, the standard hint is used instead.
///
/// The hint should describe what happens when a tap occurs, not the
/// manner in which a tap is accomplished.
///
/// Bad: 'Double tap to show movies'.
/// Good: 'show movies'. ¿ Å<Å`¿ ÇçÅ0/// The hint text for a long press action.
///
/// If null, the standard hint is used instead.
///
/// The hint should describe what happens when a long press occurs, not
/// the manner in which the long press is accomplished.
///
/// Bad: 'Double tap and hold to show tooltip'.
/// Good: 'show tooltip'. ¿ Ç°v¿ Ç‹//// Whether there are any non-null hint values.   ¿ ÉH¿ É/   ¿ É¿ É¿ ÉgÄ˛¿ ÉÅ  ¿ ÉÑ¿ Éå  ¿ Ég¿ Éh¿ ÑiÅ)¿ Ñz  ¿ Ñé&¿ Ñ´  ¿ Ñi¿ Ñj¿ ~¯¿ ~˘¿ Öñ¿ åX¿ ÜsÄÀ/// Contains properties used by assistive technologies to make the application
/// more accessible.
///
/// The properties of this class are used to generate a [SemanticsNode]s in the
/// semantics tree. ¿ Ü¶âk ¿ Ü—¿ Ü‰"/// Creates a semantic annotation.A¿ ÜÎ¿ ÜÒ  ¿ Ü˝¿ á  ¿ á
¿ á  ¿ á¿ á%  ¿ á2¿ á8  ¿ áE¿ áK  ¿ áW¿ á]  ¿ áh	¿ án  ¿ áw¿ á}  ¿ áâ¿ áè  ¿ áö¿ á†  ¿ á±¿ á∑  ¿ á≈¿ áÀ  ¿ á÷¿ á‹  ¿ áÏ¿ áÚ  ¿ áˇ¿ à  ¿ à¿ à  ¿ à%¿ à+  ¿ àH¿ àN  ¿ àY¿ à_  ¿ àl¿ àr  ¿ àÄ¿ àÜ  ¿ àñ¿ àú  ¿ à´
¿ à±  ¿ àª¿ à¡  ¿ à–¿ à÷  ¿ àÈ¿ àÔ  ¿ â¿ â  ¿ â
¿ â!  ¿ â+¿ â1  ¿ âE
¿ âK  ¿ âU¿ â[  ¿ âo¿ âu  ¿ âà¿ âé  ¿ â´¿ â±  ¿ âƒ¿ â   ¿ âÁ	¿ âÌ  ¿ âˆ¿ â¸  ¿ ä¿ ä  ¿ ä!¿ ä'  ¿ ä9¿ ä?  ¿ äQ¿ äW  ¿ äc¿ äi  ¿ ä|
¿ äÇ  ¿ äå¿ äí  ¿ ä¢¿ ä®  ¿ äπ¿ äø  ¿ ä—¿ ä◊  ¿ äÊ¿ äÏ  ¿ ä˝¿ ã  ¿ ã¿ ã  ¿ ã'¿ ã-  ¿ ã8
¿ ã>  ¿ ãH¿ ãN  ¿ ãZ#¿ ã`  ¿ ãÉ$¿ ãâ  ¿ ã≠¿ ã≥  ¿ ã—¿ ã◊  ¿ ãˆ¿ ã¸  ¿ å¿ å  ¿ å# ¿ å)  ¿ åI ¿ åO  ¿ åo¿ åu  ¿ åÅ¿ åá  ¿ åï¿ åõ  \¿ åπ¿ åø¿ åË¿ ç#¿ åŒ¿ å∆¿ å¿¿ å…¿ å·¿ å—¿ å‰¿ åÍ¿ ç-¿ ç3¿ ç\¿ çó¿ çB¿ ç:¿ ç4¿ ç=¿ çU¿ çE¿ çX¿ ç^¿ ç°¿ çß¿ ç‚¿ é/¿ çø¿ ç∑¿ ç®¿ ç∫¿ ç€¿ ç¬¿ çﬁ¿ ç‰¿ é9¿ é?¿ éz¿ é«¿ éW¿ éO¿ é@¿ éR¿ és¿ éZ¿ év¿ é|¿ é—¿ é◊¿ é˛¿ è7¿ éÂ¿ é›¿ éÿ¿ é‡¿ é˜¿ éË¿ é˙¿ è ¿ èA¿ èG¿ èá¿ è∞¿ è]¿ èU¿ èH¿ èX¿ è`¿ èÜ¿ èr¿ èn¿ èa¿ èp¿ èÇ¿ èu¿ èÖ¿ èâ¿ è∫¿ è¿¿ è„¿ ê¿ è—¿ è…¿ è¡¿ èÃ¿ è‘¿ è‚¿ è⁄¿ è’¿ è›¿ èÂA¿ êÅ[¿ ëiÅ;/// If non-null, indicates that this subtree represents something that can be
/// in an enabled or disabled state.
///
/// For example, a button that a user can currently interact with would set
/// this field to true. A button that currently does not respond to user
/// interactions would set this field to false. ¿ ëuÅú¿ ì
Åv/// If non-null, indicates that this subtree represents a checkbox
/// or similar widget with a "checked" state, and what its current
/// state is.
///
/// When the [Checkbox.value] of a tristate Checkbox is null,
/// indicating a mixed-state, this value shall be false, in which
/// case, [mixed] will be true.
///
/// This is mutually exclusive with [toggled] and [mixed]. ¿ ìÅ‚¿ îÛÅº/// If non-null, indicates that this subtree represents a checkbox
/// or similar widget with a "half-checked" state or similar, and
/// whether it is currently in this half-checked state.
///
/// This must be null when [Checkbox.tristate] is false, or
/// when the widget is not a checkbox. When a tristate
/// checkbox is fully unchecked/checked, this value shall
/// be false.
///
/// This is mutually exclusive with [checked] and [toggled]. ¿ î˝Å%¿ ñÅ/// If non-null, indicates that this subtree represents something
/// that can be in an "expanded" or "collapsed" state.
///
/// For example, if a [SubmenuButton] is opened, this property
/// should be set to true; otherwise, this property should be
/// false. ¿ ñ'ÄÒ¿ óÄ”/// If non-null, indicates that this subtree represents a toggle switch
/// or similar widget with an "on" state, and what its current
/// state is.
///
/// This is mutually exclusive with [checked] and [mixed]. ¿ óÅ&¿ ò;Å/// If non-null indicates that this subtree represents something that can be
/// in a selected or unselected state, and what its current state is.
///
/// The active tab in a tab bar for example is considered "selected", whereas
/// all other tabs are unselected. ¿ òHÄª¿ ò˝Ä†/// If non-null, indicates that this subtree represents a button.
///
/// TalkBack/VoiceOver provides users with the hint "button" when a button
/// is focused. ¿ ôÅ ¿ öÄÂ/// If non-null, indicates that this subtree represents a link.
///
/// iOS's VoiceOver provides users with a unique hint when a link is focused.
/// Android's Talkback will announce a link hint the same way it does a
/// button. ¿ öÅ¿ õ%Å/// If non-null, indicates that this subtree represents a header.
///
/// A header divides into sections. For example, an address book application
/// might define headers A, B, C, etc. to divide the list of alphabetically
/// sorted contacts into sections. ¿ õ0Äø¿ õÊÄ°/// If non-null, indicates that this subtree represents a text field.
///
/// TalkBack/VoiceOver provide special affordances to enter text into a
/// text field. ¿ õÙÄº¿ ú™Ä°/// If non-null, indicates that this subtree represents a slider.
///
/// Talkback/\VoiceOver provides users with the hint "slider" when a
/// slider is focused. ¿ úµa¿ ùG/// If non-null, indicates that this subtree represents a keyboard key. ¿ ùÄ–¿ ù„Ä±/// If non-null, indicates that this subtree is read only.
///
/// Only applicable when [textField] is true.
///
/// TalkBack/VoiceOver will treat it as non-editable text field. ¿ ùÅ’¿ üºÅØ/// If non-null, whether the node is able to hold input focus.
///
/// If [focusable] is set to false, then [focused] must not be true.
///
/// Input focus indicates that the node will receive keyboard events. It is not
/// to be confused with accessibility focus. Accessibility focus is the
/// green/black rectangular highlight that TalkBack/VoiceOver draws around the
/// element it is reading, and is separate from input focus. ¿ ü Ç¿ °‡Å˜/// If non-null, whether the node currently holds input focus.
///
/// At most one node in the tree should hold input focus at any point in time,
/// and it should not be set to true if [focusable] is false.
///
/// Input focus indicates that the node will receive keyboard events. It is not
/// to be confused with accessibility focus. Accessibility focus is the
/// green/black rectangular highlight that TalkBack/VoiceOver draws around the
/// element it is reading, and is separate from input focus. ¿ °ÏÅ¿ ¢‹Ä€/// If non-null, whether a semantic node is in a mutually exclusive group.
///
/// For example, a radio button is in a mutually exclusive group because only
/// one radio button in that group can be marked as [checked]. ¿ ¢˘ÉF¿ ¶9É/// If non-null, whether the node is considered hidden.
///
/// Hidden elements are currently not visible on screen. They may be covered
/// by other elements or positioned outside of the visible area of a viewport.
///
/// Hidden elements cannot gain accessibility focus though regular touch. The
/// only way they can be focused is by moving the focus to them via linear
/// navigation.
///
/// Platforms are free to completely ignore hidden elements and new platforms
/// are encouraged to do so.
///
/// Instead of marking an element as hidden it should usually be excluded from
/// the semantics tree altogether. Hidden elements are only included in the
/// semantics tree to work around platform limitations and they are mainly
/// used to implement accessibility scrolling on iOS. ¿ ¶DÅ3¿ ßoÅ/// If non-null, whether [value] should be obscured.
///
/// This option is usually set in combination with [textField] to indicate
/// that the text field contains a password (or other sensitive information).
/// Doing so instructs screen readers to not read out the [value]. ¿ ß|Å7¿ ®™Å/// Whether the [value] is coming from a field that supports multiline text
/// editing.
///
/// This option is only meaningful when [textField] is true to indicate
/// whether it's a single-line or multiline text field.
///
/// This option is null when [textField] is false. ¿ ®∏Å—¿ ™~Å£/// If non-null, whether the node corresponds to the root of a subtree for
/// which a route name should be announced.
///
/// Generally, this is set in combination with
/// [SemanticsConfiguration.explicitChildNodes], since nodes with this flag
/// are not considered focusable by Android or iOS.
///
/// See also:
///
///  * [SemanticsFlag.scopesRoute] for a description of how the announced
///    value is selected. ¿ ™éÄŒ¿ ´RÄ≠/// If non-null, whether the node contains the semantic label for a route.
///
/// See also:
///
///  * [SemanticsFlag.namesRoute] for a description of how the name is used. ¿ ´aÄ¨¿ ¨Äê/// If non-null, whether the node represents an image.
///
/// See also:
///
///  * [SemanticsFlag.isImage], for the flag this setting controls. ¿ ¨É¢¿ Ø™Éi/// If non-null, whether the node should be considered a live region.
///
/// A live region indicates that updates to semantics node are important.
/// Platforms may use this information to make polite announcements to the
/// user to inform them of updates to this node.
///
/// An example of a live region is a [SnackBar] widget. On Android and iOS,
/// live region causes a polite announcement to be generated automatically,
/// even if the widget does not have accessibility focus. This announcement
/// may not be spoken if the OS accessibility services are already
/// announcing something else, such as reading the label of a focused widget
/// or providing a system announcement.
///
/// See also:
///
///  * [SemanticsFlag.isLiveRegion], the semantics flag this setting controls.
///  * [SemanticsConfiguration.liveRegion], for a full description of a live region. ¿ ØπÅg¿ ±Å=/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [textField] is true. Defaults to null,
/// which means no limit is imposed on the text field. ¿ ±%ÅS¿ ≤fÅ%/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [textField] is true. Must be set when
/// [maxValueLength] is set. ¿ ≤}ÉX¿ µÀÉ/// {@template flutter.semantics.SemanticsProperties.identifier}
/// Provides an identifier for the semantics node in native accessibility hierarchy.
///
/// This value is not exposed to the users of the app.
///
/// It's usually used for UI testing with tools that work by querying the
/// native accessibility, like UIAutomator, XCUITest, or Appium. It can be
/// matched with [CommonFinders.bySemanticsIdentifier].
///
/// On Android, this is used for `AccessibilityNodeInfo.setViewIdResourceName`.
/// It'll be appear in accessibility hierarchy as `resource-id`.
///
/// On iOS, this will set `UIAccessibilityElement.accessibilityIdentifier`.
///
/// On web, this will set a `flt-semantics-identifier` attribute on the DOM element
/// that corresponds to the semantics node.
/// {@endtemplate} ¿ µ⁄Ç¿ ∑ÛÅ/// Provides a textual description of the widget.
///
/// If a label is provided, there must either by an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [label] and [attributedLabel]. One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.label] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedLabel] for an [AttributedString] version of this property. ¿ ∑˝ÇV¿ ∫DÇ/// Provides an [AttributedString] version of textual description of the widget.
///
/// If a [attributedLabel] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [label] and [attributedLabel]. One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedLabel] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [label] for a plain string version of this property. ¿ ∫XÇ+¿ º~Å˝/// Provides a textual description of the value of the widget.
///
/// If a value is provided, there must either by an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [value] and [attributedValue], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.value] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedLabel] for an [AttributedString] version of this property. ¿ ºàÇi¿ æ‚Ç%/// Provides an [AttributedString] version of textual description of the value
/// of the widget.
///
/// If a [attributedValue] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [value] and [attributedValue], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [value] for a plain string version of this property. ¿ æˆÇ◊¿ ¡øÇö/// The value that [value] or [attributedValue] will become after a
/// [SemanticsAction.increase] action has been performed on this widget.
///
/// If a value is provided, [onIncrease] must also be set and there must
/// either be an ambient [Directionality] or an explicit [textDirection]
/// must be provided.
///
/// Callers must not provide both [increasedValue] and
/// [attributedIncreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.increasedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [attributedIncreasedValue] for an [AttributedString] version of this
///    property. ¿ ¡“Ç˝¿ ƒ∑ÇÆ/// The [AttributedString] that [value] or [attributedValue] will become after
/// a [SemanticsAction.increase] action has been performed on this widget.
///
/// If a [attributedIncreasedValue] is provided, [onIncrease] must also be set
/// and there must either be an ambient [Directionality] or an explicit
/// [textDirection] must be provided.
///
/// Callers must not provide both [increasedValue] and
/// [attributedIncreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedIncreasedValue] for a description of
///    how this is exposed in TalkBack and VoiceOver.
///  * [increasedValue] for a plain string version of this property. ¿ ƒ‘Ç◊¿ «ùÇö/// The value that [value] or [attributedValue] will become after a
/// [SemanticsAction.decrease] action has been performed on this widget.
///
/// If a value is provided, [onDecrease] must also be set and there must
/// either be an ambient [Directionality] or an explicit [textDirection]
/// must be provided.
///
/// Callers must not provide both [decreasedValue] and
/// [attributedDecreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.decreasedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [attributedDecreasedValue] for an [AttributedString] version of this
///    property. ¿ «∞É	¿  °Ç∫/// The [AttributedString] that [value] or [attributedValue] will become after
/// a [SemanticsAction.decrease] action has been performed on this widget.
///
/// If a [attributedDecreasedValue] is provided, [onDecrease] must also be set
/// and there must either be an ambient [Directionality] or an explicit
/// [textDirection] must be provided.
///
/// Callers must not provide both [decreasedValue] and
/// [attributedDecreasedValue], One or both must be null/// provided.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedDecreasedValue] for a description of
///    how this is exposed in TalkBack and VoiceOver.
///  * [decreasedValue] for a plain string version of this property. ¿  æÇI¿ ÕÇ/// Provides a brief textual description of the result of an action performed
/// on the widget.
///
/// If a hint is provided, there must either be an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [hint] and [attributedHint], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.hint] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedHint] for an [AttributedString] version of this property. ¿ ÕÇÅ¿ œÇ>/// Provides an [AttributedString] version of brief textual description of the
/// result of an action performed on the widget.
///
/// If a [attributedHint] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [hint] and [attributedHint], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedHint] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [hint] for a plain string version of this property. ¿ œíÅ©¿ —4ÅÉ/// Provides a textual description of the widget's tooltip.
///
/// In Android, this property sets the `AccessibilityNodeInfo.setTooltipText`.
/// In iOS, this property is appended to the end of the
/// `UIAccessibilityElement.accessibilityLabel`.
///
/// If a [tooltip] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided. ¿ —@Ç¿ ”8Å⁄/// The heading level in the DOM document structure.
///
/// This is only applied to web semantics and is ignored on other platforms.
///
/// Screen readers will use this value to determine which part of the page
/// structure this heading represents. A level 1 heading, indicated
/// with aria-level="1", usually indicates the main heading of a page,
/// a level 2 heading, defined with aria-level="2" the first subsection,
/// a level 3 is a subsection of that, and so on. ¿ ”IÅ≤¿ ‘ÓÅv/// Provides hint values which override the default hints on supported
/// platforms.
///
/// On Android, If no hint overrides are used then default [hint] will be
/// combined with the [label]. Otherwise, the [hint] will be ignored as long
/// as there as at least one non-null hint override.
///
/// On iOS, these are always ignored and the default [hint] is used instead. ¿ ’ Ä√¿ ’∂Äò/// The reading direction of the [label], [value], [increasedValue],
/// [decreasedValue], and [hint].
///
/// Defaults to the ambient [Directionality]. ¿ ’»ÅI¿ ◊
Å/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android). ¿ ◊Çü¿ ŸßÇ`/// A tag to be applied to the child [SemanticsNode]s of this widget.
///
/// The tag is added to all child [SemanticsNode]s that pass through the
/// [RenderObject] corresponding to this widget while looking to be attached
/// to a parent SemanticsNode.
///
/// Tags are used to communicate to a parent SemanticsNode that a child
/// SemanticsNode was passed through a particular RenderObject. The parent can
/// use this information to determine the shape of the semantics tree.
///
/// See also:
///
///  * [SemanticsConfiguration.addTagForChildren], to which the tags provided
///    here will be passed. ¿ Ÿ∫ÄÛ¿ ⁄¶Ä“/// The URL that this node links to.
///
/// On the web, this is used to set the `href` attribute of the DOM element.
///
/// See also:
///
/// * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#href ¿ ⁄≤Ç¬¿ ›oÇé/// The handler for [SemanticsAction.tap].
///
/// This is the semantic equivalent of a user briefly tapping the screen with
/// the finger without moving it. For example, a button should implement this
/// action.
///
/// VoiceOver users on iOS and TalkBack users on Android *may* trigger this
/// action by double-tapping the screen while an element is focused.
///
/// Note: different OSes or assistive technologies may decide to interpret
/// user inputs differently. Some may simulate real screen taps, while others
/// may call semantics tap. One way to handle taps properly is to provide the
/// same handler to both gesture tap and semantics tap. ¿ ›yÇÁ¿ ‡UÇ´/// The handler for [SemanticsAction.longPress].
///
/// This is the semantic equivalent of a user pressing and holding the screen
/// with the finger for a few seconds without moving it.
///
/// VoiceOver users on iOS and TalkBack users on Android *may* trigger this
/// action by double-tapping the screen without lifting the finger after the
/// second tap.
///
/// Note: different OSes or assistive technologies may decide to interpret
/// user inputs differently. Some may simulate real long presses, while others
/// may call semantics long press. One way to handle long press properly is to
/// provide the same handler to both gesture long press and semantics long
/// press. ¿ ‡eÇe¿ ‚æÇ./// The handler for [SemanticsAction.scrollLeft].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from right to left. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping left with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided. ¿ ‚œÇk¿ Â-Ç3/// The handler for [SemanticsAction.scrollRight].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from left to right. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping right with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided. ¿ Â?Ç]¿ ÁíÇ(/// The handler for [SemanticsAction.scrollUp].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from bottom to top. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping up with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided. ¿ Á°Çf¿ È˚Ç//// The handler for [SemanticsAction.scrollDown].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from top to bottom. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping down with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided. ¿ ÍÇ:¿ Ï<Ç/// The handler for [SemanticsAction.increase].
///
/// This is a request to increase the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If a [value] is set, [increasedValue] must also be provided and
/// [onIncrease] must ensure that [value] will be set to [increasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping up with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume up button. ¿ ÏKÇ>¿ ÓÇ	/// The handler for [SemanticsAction.decrease].
///
/// This is a request to decrease the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If a [value] is set, [decreasedValue] must also be provided and
/// [onDecrease] must ensure that [value] will be set to [decreasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping down with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume down button. ¿ ÓéÅ¿ ÔúÄÌ/// The handler for [SemanticsAction.copy].
///
/// This is a request to copy the current selection to the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿ ÔßÅ$¿ ∆Ä¸/// The handler for [SemanticsAction.cut].
///
/// This is a request to cut the current selection and place it in the
/// clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿ –Å¿ ÒﬁÄÌ/// The handler for [SemanticsAction.paste].
///
/// This is a request to paste the current content of the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿ ÒÍÅr¿ Û>Å,/// The handler for [SemanticsAction.moveCursorForwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field forward by one character.
///
/// TalkBack users can trigger this by pressing the volume up key while the
/// input focus is in a text field. ¿ ÛaÅw¿ ÙπÅ0/// The handler for [SemanticsAction.moveCursorBackwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one character.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿ Ù›Åf¿ ˆ*Å%/// The handler for [SemanticsAction.moveCursorForwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿ ˆHÅh¿ ˜ñÅ&/// The handler for [SemanticsAction.moveCursorBackwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿ ˜µÅì¿ ˘:Å[/// The handler for [SemanticsAction.setSelection].
///
/// This handler is invoked when the user either wants to change the currently
/// selected text in a text field or change the position of the cursor.
///
/// TalkBack users can trigger this handler by selecting "Move cursor to
/// beginning/end" or "Select all" from the local context menu. ¿ ˘MÅ?¿ ˙ÉÅ/// The handler for [SemanticsAction.setText].
///
/// This handler is invoked when the user wants to replace the current text in
/// the text field with a new text.
///
/// Voice access users can trigger this handler by speaking `type <text>` to
/// their Android devices. ¿ ˙ëÑ¿ ˛îÉ»/// The handler for [SemanticsAction.didGainAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler gains
/// the accessibility focus. The accessibility focus is the
/// green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidLoseAccessibilityFocus], which is invoked when the accessibility
///    focus is removed from the node.
///  * [onFocus], which is invoked when the assistive technology requests that
///    the input focus is gained by a widget.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus. ¿ ˛¥Éè¿(É=/// The handler for [SemanticsAction.didLoseAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler
/// loses the accessibility focus. The accessibility focus is
/// the green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidGainAccessibilityFocus], which is invoked when the node gains
///    accessibility focus.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus. ¿HÑ0¿qÉË/// {@template flutter.semantics.SemanticsProperties.onFocus}
/// The handler for [SemanticsAction.focus].
///
/// This handler is invoked when the assistive technology requests that the
/// focusable widget corresponding to this semantics node gain input focus.
/// The [FocusNode] that manages the focus of the widget must gain focus. The
/// widget must begin responding to relevant key events. For example:
///
/// * Buttons must respond to tap/click events produced via keyboard shortcuts.
/// * Text fields must become focused and editable, showing an on-screen
///   keyboard, if necessary.
/// * Checkboxes, switches, and radio buttons must become togglable using
///   keyboard shortcuts.
///
/// Focus behavior is specific to the platform and to the assistive technology
/// used. See the documentation of [SemanticsAction.focus] for more detail.
///
/// See also:
///
///  * [onDidGainAccessibilityFocus], which is invoked when the node gains
///    accessibility focus.
/// {@endtemplate} ¿}ÅS¿«Å'/// The handler for [SemanticsAction.dismiss].
///
/// This is a request to dismiss the currently focused node.
///
/// TalkBack users on Android can trigger this action in the local context
/// menu, and VoiceOver users on iOS can trigger this action with a standard
/// gesture or menu option. ¿’Ç7¿	ˆÅ‹/// A map from each supported [CustomSemanticsAction] to a provided handler.
///
/// The handler associated with each custom action is called whenever a
/// semantics action of type [SemanticsAction.customAction] is received. The
/// provided argument will be an identifier used to retrieve an instance of
/// a custom action which can then retrieve the correct handler from this map.
///
/// See also:
///
///  * [CustomSemanticsAction], for an explanation of custom actions.  ¿
áL¿
"  ¿
6&¿
S  ¿
¿
¿aU¿t   ¿a¿b¿ Üb¿ Üc¿õ¿ ‘Ï¿’Å3/// A node that represents some semantic data.
///
/// The semantics tree is maintained during the semantics phase of the pipeline
/// (i.e., during [PipelineOwner.flushSemantics]), which happens after
/// compositing. The semantics tree is then uploaded into the engine for use
/// by assistive technology. ¿Å ¿ã¿ò~/// Creates a semantic node.
///
/// Each semantic node has a unique identifier that is assigned when the node
/// is created.¿ü¿•  ¿≠¿º  ¿‘¿–¿÷¿‰¿Â¿˝¿Ô¿ˇ¿Å:¿•¿¶¿™ÄÅ/// Creates a semantic node to represent the root of the semantics tree.
///
/// The root node is assigned an identifier of zero.¿±¿∑  ¿ø¿Œ  ¿ﬂ¿¯  ¿	¿¿¿#¿¿%6¿êC¿° ¿–¿»¿Œ¿ ¿…¿Ã¿“¿ÿ¿„ ¿ı¿èÄ«¿SÄ∞/// Uniquely identifies this node in the list of sibling nodes.
///
/// Keys are used during the construction of the semantics tree. They are not
/// transferred to the engine. ¿<¿@  ¿H!¿\  ¿¨¿µ  ¿Á¿Ï ¿Ù¿¯¿˘¿ªÉn¿"É./// The semantic clip from an ancestor that was applied to this node.
///
/// Expressed in the coordinate system of the node. May be null if no clip has
/// been applied.
///
/// Descendant [SemanticsNode]s that are positioned outside of this rect will
/// be excluded from the semantics tree. Descendant [SemanticsNode]s that are
/// overlapping with this rect, but are outside of [parentPaintClipRect] will
/// be included in the tree, but they will be marked as hidden because they
/// are assumed to be not visible on screen.
///
/// If this rect is null, all descendant [SemanticsNode]s outside of
/// [parentPaintClipRect] will be excluded from the tree.
///
/// If this rect is non-null it has to completely enclose
/// [parentPaintClipRect]. If [parentPaintClipRect] is null this property is
/// also null. ¿".Çò¿$≥Çd/// The paint clip from an ancestor that was applied to this node.
///
/// Expressed in the coordinate system of the node. May be null if no clip has
/// been applied.
///
/// Descendant [SemanticsNode]s that are positioned outside of this rect will
/// either be excluded from the semantics tree (if they have no overlap with
/// [parentSemanticsClipRect]) or they will be included and marked as hidden
/// (if they are overlapping with [parentSemanticsClipRect]).
///
/// This rect is completely enclosed by [parentSemanticsClipRect].
///
/// If this rect is null [parentSemanticsClipRect] also has to be null. ¿$ÀÇ‰¿'úÇÆ/// The elevation adjustment that the parent imposes on this node.
///
/// The [elevation] property is relative to the elevation of the parent
/// [SemanticsNode]. However, as [SemanticsConfiguration]s from various
/// ascending [RenderObject]s are merged into each other to form that
/// [SemanticsNode] the parent‚Äôs elevation may change. This requires an
/// adjustment of the child‚Äôs relative elevation which is represented by this
/// value.
///
/// The value is rarely accessed directly. Instead, for most use cases the
/// [elevation] value should be used, which includes this adjustment.
///
/// See also:
///
///  * [elevation], the actual elevation of this [SemanticsNode]. ¿'¥Å}¿)$Å^/// The index of this node within the parent's list of semantic children.
///
/// This includes all semantic nodes, not just those currently in the
/// child list. For example, if a scrollable has five children but the first
/// two are not visible (and thus not included in the list of children), then
/// the index of the last node will still be 4. ¿,Ü ¿,ã ¿,°¿.2#¿.7 ¿.P¿1:U¿1? ¿1b¿1o¿1p¿1§h¿2G/// Contains the children in inverse hit test order (i.e. paint order). ¿2Ä‡¿2€Ä™/// A snapshot of `newChildren` passed to [_replaceChildren] that we keep in
/// debug mode. It supports the assertion that user does not mutate the list
/// of children. ¿Bÿ¿B› ¿BÂ¿G·¿GÒ  ¿Iö¿I©  ¿JÛ¿J˜ ¿K ¿VÓ¿VÛ ¿V¸¿]5N¿]b ¿]m¿]z¿]{¿]áh¿]∞ ¿] ¿]◊¿]ÿ¿^l1¿^p ¿^Å¿^é¿^è¿^¢Ä¬¿_`Ä¢/// The [SemanticsTag]s this node is tagged with.
///
/// Tags are used during the construction of the semantics tree. They are not
/// transferred to the engine. ¿_‚!¿_Ê ¿_Ô¿_¸¿_˝¿`-¿`˜ ¿a¿a¿a¿b¸A¿c ¿c ¿c-¿c.¿eLA¿e] ¿ep¿e}¿e~¿iS¿i. ¿iJ¿iW¿iX¿m S¿m ¿m-¿m:¿m;¿oz?¿oã ¿où¿o™¿o´¿pT'¿p[ ¿pf¿ps¿pt¿r”+¿r⁄ ¿rÁ¿rÙ¿rı¿z˘+¿{  ¿{¿{¿{¿{¬&¿{⁄  ¿|ã;¿|ö ¿|´¿|∏¿|π¿~"¿~4  ¿~Ù¿  ¿¨¿≤  ¿Ä†¿Ä•  ¿Å)¿Å.  ¿É ¿É(  ¿ÑÄ¿Ñà  ¿Ö‡¿ÖË  ¿á€¿á‡  ¿â¿âÑ  ¿ã¿ã  ¿å3/¿å7 ¿åG¿åT¿åU¿åÆ&¿å≥ ¿åæ¿åÀ¿åÃ¿ç2L¿çV ¿çf¿ç|¿ç}¿¥©6¿¥¿ ¿¥”¿¥‹¿¥ﬁ¿¥›¿¥„G¿¥˙ ¿µ¿µ'¿µ)¿µ(¿µ.G¿µG ¿µ]¿µs¿µt/¿[Åﬁ¿/Åπ/// The unique identifier for this node.
///
/// The root node has an id of zero. Other nodes are given a unique id
/// when they are attached to a [SemanticsOwner]. If they are detached, their
/// ids are invalid and should not be used.
///
/// In rare circumstances, id may change if this node is detached and
/// re-attached to the [SemanticsOwner]. This should only happen when the
/// application has generated too many semantics nodes.   ¿}Å,¿ëÄ¸/// The transform from this node's coordinate system to its parent's coordinate system.
///
/// By default, the transform is null, which represents the identity
/// transformation (i.e., that this node has the same coordinate system as its
/// parent).   ¿√Ä«¿«  ¿—¿€   ¿éV¿÷</// The bounding box for this node in its coordinate system.   ¿Ä∂¿  ¿

¿   ¿)6Ç(¿++Å◊/// Whether the node is invisible.
///
/// A node whose [rect] is outside of the bounds of the screen and hence not
/// reachable for users is considered invisible if its semantic information
/// is not merged into a (partially) visible parent as indicated by
/// [isMergedIntoParent].
///
/// An invisible node can be safely dropped from the semantic tree without
/// losing semantic information that is relevant for describing the content
/// currently shown on screen.   ¿+pÅ¿,GÄ≈/// Whether this node merges its semantic information into an ancestor node.
///
/// This value indicates whether this node has any ancestors with
/// [mergeAllDescendantsIntoThisNode] set to true.   ¿,´ÅÑ¿-ˇÅ>/// Whether the user can interact with this node in assistive technologies.
///
/// This node can still receive accessibility focus even if this is true.
/// Setting this to true prevents the user from activating pointer related
/// [SemanticsAction]s, such as [SemanticsAction.tap] or
/// [SemanticsAction.longPress].   ¿.YÄ†¿.]  ¿.s
¿.y   ¿.˝Åç¿0=Å$/// Whether this node is taking part in a merge of semantic information.
///
/// This returns true if the node is either merged into an ancestor node or if
/// decedent nodes are merged into this node.
///
/// See also:
///
///  * [isMergedIntoParent]
///  * [mergeAllDescendantsIntoThisNode]   ¿0éÄ©¿0ÛY/// Whether this node and all of its descendants should be treated as one logical entity.   ¿Bcr¿Bß8/// Whether this node has a non-zero number of children.   ¿BÔi¿C#)/// The number of children this node has.   ¿G,Ä≤¿GŒÄá/// The owner for this node (null if unattached).
///
/// The entire semantics tree that this node belongs to will have the same owner.   ¿G¸ÄÙ¿H’Ä≈/// Whether the semantics tree this node belongs to is attached to a [SemanticsOwner].
///
/// This becomes true during the call to [attach].
///
/// This becomes false during the call to [detach].   ¿HÙÄ£¿IÖw/// The parent of this node in the semantics tree.
///
/// The [parent] of the root node in the semantics tree is null.   ¿IµÅ;¿J‡Å/// The depth of this node in the semantics tree.
///
/// The depth of nodes in a tree monotonically increases as you traverse down
/// the tree.  There's no guarantee regarding depth between siblings.
///
/// The depth is used to ensure that nodes are processed in depth order.   ¿]Ùu¿]¸    ¿`àe¿`”=/// {@macro flutter.semantics.SemanticsProperties.identifier}   ¿a"Ä’¿a÷Äû/// A textual description of this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedLabel].   ¿a˚Ä˛¿b’Ä∫/// A textual description of this node in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [label], which exposes just the raw text.   ¿cBÄÍ¿dÄ≥/// A textual description for the current value of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedValue].   ¿d0Å¿e%Ä”/// A textual description for the current value of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [value], which exposes just the raw text.   ¿eíÅ£¿gÅR/// The value that [value] will have after a [SemanticsAction.increase] action
/// has been performed.
///
/// This property is only valid if the [SemanticsAction.increase] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedIncreasedValue].   ¿g9Å·¿h‰ÅÉ/// The value in [AttributedString] format that [value] or [attributedValue]
/// will have after a [SemanticsAction.increase] action has been performed.
///
/// This property is only valid if the [SemanticsAction.increase] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// See also [increasedValue], which exposes just the raw text.   ¿iuÅ£¿jÂÅR/// The value that [value] will have after a [SemanticsAction.decrease] action
/// has been performed.
///
/// This property is only valid if the [SemanticsAction.decrease] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedDecreasedValue].   ¿kÅ·¿l«ÅÉ/// The value in [AttributedString] format that [value] or [attributedValue]
/// will have after a [SemanticsAction.decrease] action has been performed.
///
/// This property is only valid if the [SemanticsAction.decrease] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// See also [decreasedValue], which exposes just the raw text.   ¿mXÄˆ¿n/Ä¡/// A brief description of the result of performing an action on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedHint].   ¿nRÅ%¿oUÄ·/// A brief description of the result of performing an action on this node
/// in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [hint], which exposes just the raw text.   ¿oæÄì¿p=m/// A textual description of the widget's tooltip.
///
/// The reading direction is given by [textDirection].   ¿pÄÇP¿r∏Ç/// The elevation along the z-axis at which the [rect] of this [SemanticsNode]
/// is located above its parent.
///
/// The value is relative to the parent's [elevation]. The sum of the
/// [elevation]s of all ancestor node plus this value determines the absolute
/// elevation of this [SemanticsNode].
///
/// See also:
///
///  * [thickness], which describes how much space in z-direction this
///    [SemanticsNode] occupies starting at this [elevation].
///  * [elevationAdjustment], which has been used to calculate this value.   ¿sáÛ¿zﬁáq/// Describes how much space the [SemanticsNode] takes up along the z-axis.
///
/// A [SemanticsNode] represents multiple [RenderObject]s, which can be
/// located at various elevations in 3D. The [thickness] is the difference
/// between the absolute elevations of the lowest and highest [RenderObject]
/// represented by this [SemanticsNode]. In other words, the thickness
/// describes how high the box is that this [SemanticsNode] occupies in three
/// dimensional space. The two other dimensions are defined by [rect].
///
/// {@tool snippet}
/// The following code stacks three [PhysicalModel]s on top of each other
/// separated by non-zero elevations.
///
/// [PhysicalModel] C is elevated 10.0 above [PhysicalModel] B, which in turn
/// is elevated 5.0 above [PhysicalModel] A. The side view of this
/// constellation looks as follows:
///
/// ![A diagram illustrating the elevations of three PhysicalModels and their
/// corresponding SemanticsNodes.](https://flutter.github.io/assets-for-api-docs/assets/semantics/SemanticsNode.thickness.png)
///
/// In this example the [RenderObject]s for [PhysicalModel] C and B share one
/// [SemanticsNode] Y. Given the elevations of those [RenderObject]s, this
/// [SemanticsNode] has a [thickness] of 10.0 and an elevation of 5.0 over
/// its parent [SemanticsNode] X.
/// ```dart
/// PhysicalModel( // A
///   color: Colors.amber,
///   child: Semantics(
///     explicitChildNodes: true,
///     child: const PhysicalModel( // B
///       color: Colors.brown,
///       elevation: 5.0,
///       child: PhysicalModel( // C
///         color: Colors.cyan,
///         elevation: 10.0,
///         child: Placeholder(),
///       ),
///     ),
///   ),
/// )
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [elevation], which describes the elevation of the box defined by
///    [thickness] and [rect] relative to the parent of this [SemanticsNode].   ¿{)Äñ¿{üU/// Provides hint values which override the default hints on supported
/// platforms.   ¿{ÌÄõ¿|hc/// The reading direction for [label], [value], [hint], [increasedValue], and
/// [decreasedValue].   ¿|ÀÅT¿~Å/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android).   ¿~AÄ∞¿~—x/// The currently selected text (or the position of the cursor) within [value]
/// if this node represents a text field.   ¿Äì¿çh/// If this node represents a text field, this indicates whether or not it's
/// a multiline text field.   ¿√Ä⁄¿ÄwÄ¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null.   ¿Äªk¿Å
C/// The index of the first visible semantic child of a scroll node.   ¿Å?Åﬁ¿Ç˚Åõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken.   ¿É<ÅA¿ÑYÅ /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken.   ¿ÑùÅ@¿ÖπÄˇ/// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent] from where this value is usually taken.   ¿Ö˝Å€¿á∂Åô/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.
///
/// If this value is non-null, the SemanticsNode must not have any children
/// as those would be replaced by the semantics nodes of the referenced
/// platform view.
///
/// See also:
///
///  * [AndroidView], which is the platform view for Android.
///  * [UiKitView], which is the platform view for iOS.   ¿áÙÅà¿âZÅL/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Defaults
/// to null, which means no limit is imposed on the text field.   ¿âòÅx¿äÊÅ4/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Must be
/// set when [maxValueLength] is set.   ¿ã0Å ¿åÄ”/// The level of the widget as a heading within the structural hierarchy
/// of the screen. A value of 1 indicates the highest level of structural
/// hierarchy. A value of 2 indicates the next level, and so on.   ¿ågD¿åó$/// The URL that this node links to.   ¿˙Äë¿    ¿2ˆèi¿2˚  ¿3¿3!   ¿C\Åº¿DKÄﬂ/// Visits the immediate children of this node.
///
/// This function calls visitor for each immediate child until visitor returns
/// false. Returns true if all the visitor calls returned true, otherwise
/// returns false. ¿DY¿Do   ¿EÇ¿FÄÔ/// Visit all the descendants of this node.
///
/// This function calls visitor for each descendant in a pre-order traversal
/// until visitor returns false. Returns true if all the visitor calls
/// returned true, otherwise returns false. ¿F-¿FC   ¿KÄ∏¿K  ¿K¿K(   ¿K¬D¿K«    ¿L
Ç¿L  ¿L0¿L?   ¿N`¿N    ¿NuÅ∆¿Nz  ¿NÜ¿Nï   ¿P?Äø¿PD  ¿PO¿P^   ¿QÇâ¿QQ2/// Mark this node as attached to the given owner. ¿QX¿Qh  ¿Q7¿Q8¿SèÉD¿S⁄./// Mark this node as detached from its owner.  ¿S¿¿S¡¿WÄ√¿W
    ¿WÃÖI¿W—  ¿W˚¿X   ¿_iu¿_ú+/// Whether this node is tagged with `tag`. ¿_•¿_≥   ¿`|¿`L</// Whether this node currently has a given [SemanticsFlag]. ¿`T¿`c   ¿åŸU¿åﬁ  ¿å¿ç   ¿çÉå§¿èrÅ◊/// Reconfigures the properties of this object to describe the configuration
/// provided in the `config` argument and the children listed in the
/// `childrenInInversePaintOrder` argument.
///
/// The arguments may be null; this represents an empty configuration (all
/// values at their defaults, no children).
///
/// No reference is kept to the [SemanticsConfiguration] object, but the child
/// list is used as-is and should therefore not be changed after this call. ¿èÉ'¿è•  ¿è∞0¿è∆   ¿ö,ö¿õHÅ/// Returns a summary of the semantics for this node.
///
/// If this node has [mergeAllDescendantsIntoThisNode], then the returned data
/// includes the information from this node's descendants. Otherwise, the
/// returned data matches the data on this node.   ¿¥MX¿¥`    ¿µzå«¿µ  ¿µå¿µ§  ¿µ¨'¿µ∂   ¿¬Eâ¿¿¬©M/// Builds a new list made of [_children] sorted in semantic traversal order.   ¿Ã	Åx¿ÃÛÄ‹/// Sends a [SemanticsEvent] associated with this [SemanticsNode].
///
/// Semantics events should be sent to inform interested parties (like
/// the accessibility system of the operating system) about changes to the UI. ¿Ã˝¿Õ   ¿ÕÖÄŒ¿Õä  ¿Õ†¿Õ±   ¿ŒWX¿Œj   ¿ŒW¿ŒX¿Œ≥í¿Œƒ  ¿Œÿ&¿Œı  ¿Œ≥¿Œ¥¿‡æÇÖ¿·üÄ≈/// Returns a string representation of this node and its descendants.
///
/// The order in which the children of the [SemanticsNode] will be printed is
/// controlled by the [childOrder] parameter. ¿·≤¿·∫  ¿·—¿·⁄  ¿·Ô0¿‚   ¿‚%K¿‚>  ¿‚v¿‚{  
¿·å¿·ç¿·…¿‚
¿‚¿‚¿‚J¿‚a¿‚b¿‚Ü¿„GÅc¿„c  ¿„{¿„Ñ  ¿„ç9¿„§  ¿„ÃK¿„Â  ¿„G¿„H¿„´¿„ø¿„¿¿„Ò¿‰¿‰	¿‰ÆÅ3¿‰–  ¿‰ËK¿Â  ¿‰Æ¿‰Ø¿Â¿Â$¿Â%¿ÂÂÅ†¿ÊHL/// Returns the list of direct children of this node in the specified order. ¿Êa"¿Êz    ¿ÁâÖ∑¿È¨Ç/// An edge of a box, such as top, bottom, left or right, used to compute
/// [SemanticsNode]s that overlap vertically or horizontally.
///
/// For computing horizontal overlap in an LTR setting we create two [_BoxEdge]
/// objects for each [SemanticsNode]: one representing the left edge (marked
/// with [isLeadingEdge] equal to true) and one for the right edge (with [isLeadingEdge]
/// equal to false). Similarly, for vertical overlap we also create two objects
/// for each [SemanticsNode], one for the top and one for the bottom edge. ¿ÈŸ} ¿ÈŸ¿È· ¿ÈË¿È˜  ¿Í	¿Í  ¿Í#¿Í2  ¿Í>¿ÍD¿ÍT¿ÍE¿ÍK¿ÍL¿ÍZÅΩ¿Ï
Åí/// True if the edge comes before the seconds edge along the traversal
/// direction, and false otherwise.
///
/// This field is never null.
///
/// For example, in LTR traversal the left edge's [isLeadingEdge] is set to true,
/// the right edge's [isLeadingEdge] is set to false. When considering vertical
/// ordering of boxes, the top edge is the start edge, and the bottom edge is
/// the end edge. ¿Ï¿Ïïg/// The offset from the start edge of the parent [SemanticsNode] in the
/// direction of the traversal. ¿Ï†?¿Ï€$/// The node whom this edge belongs.  ¿Ï‰Z¿ÏÙ  ¿Ï˛¿Ì  ¿Ï‰¿ÏÂ ¿ÌBïÍ¿ÓÄ—/// A group of [nodes] that are disjoint vertically or horizontally from other
/// nodes that share the same [SemanticsNode] parent.
///
/// The [nodes] are sorted among each other separately from other nodes. ¿Ó][ ¿Ó]¿Óp ¿Ów¿ÓÜ  ¿Óñ¿Ó•   ¿ÓºÄ˚¿Ô¨Äÿ/// The offset from the start edge of the parent [SemanticsNode] in the
/// direction of the traversal.
///
/// This value is equal to the [_BoxEdge.offset] of the first node in the
/// [nodes] list being considered. ¿Ôº!¿Ô–  ¿Ô‚e¿.//// The nodes that are sorted among each other.¿E¿F¿6¿D¿7 ¿Lo¿\  ¿f¿{  ¿L¿M¿øÜR¿ÒßÄÀ/// Sorts this group assuming that [nodes] belong to the same vertical group.
///
/// This method breaks up this group into horizontal [_SemanticsSortGroup]s
/// then sorts them using [sortedWithinKnot].   ¿˜å¿˙mÉ%/// Sorts [nodes] where nodes intersect both vertically and horizontally.
///
/// In the special case when [nodes] contains one or less nodes, this method
/// returns [nodes] unchanged.
///
/// This method constructs a graph, where vertices are [SemanticsNode]s and
/// edges are "traversed before" relation between pairs of nodes. The sort
/// order is the topological sorting of the graph, with the original order of
/// [nodes] used as the tie breaker.
///
/// Whether a node is traversed before another node is determined by the
/// vector that connects the two nodes' centers. If the vector "points to the
/// right or down", defined as the [Offset.direction] being between `-pi/4`
/// and `3*pi/4`), then the semantics node whose center is at the end of the
/// vector is said to be traversed after.    ¿ìÑ]¿˛Åd/// The implementation of [Comparable] that implements the ordering of
/// [SemanticsNode]s in the accessibility traversal.
///
/// [SemanticsNode]s are sorted prior to sending them to the engine side.
///
/// This implementation considers a [node]'s [sortKey] and its position within
/// the list of its siblings. [sortKey] takes precedence over position. ¿?` ¿?¿Q ¿X¿g  ¿p¿v  ¿Ç¿ë   ¿£Q¿6/// The node whose position this sort node determines. ¿˘Äµ¿ßÄç/// Determines the position of this node among its siblings.
///
/// Sort keys take precedence over other attributes, such as
/// [position]. ¿≥l¿U/// Position within the list of siblings as determined by the default sort
/// order.  ¿$Ä ¿4  ¿>¿R  ¿$¿% ¿Ú®¶¿)Å0/// Owns [SemanticsNode] objects and notifies listeners of changes to the
/// render tree semantics.
///
/// To listen for semantic updates, call [SemanticsBinding.ensureSemantics] or
/// [PipelineOwner.ensureSemantics] to obtain a [SemanticsHandle]. This will
/// create a [SemanticsOwner] if necessary. ¿SÅÙ ¿ß¿µQ/// Creates a [SemanticsOwner] that manages zero or more [SemanticsNode] objects.¿º¿À   ¿KÅ∂¿Åx/// The [onSemanticsUpdate] callback is expected to dispatch [SemanticsUpdate]s
/// to the [FlutterView] that is associated with this [PipelineOwner] and/or
/// [SemanticsOwner].
///
/// A [SemanticsOwner] calls [onSemanticsUpdate] during [sendSemanticsUpdate]
/// after the [SemanticsUpdate] has been build, but before the [SemanticsOwner]'s
/// listeners have been notified. ¿8¿ ¿;¿<¿,¿:¿-¿A=¿_ ¿|¿}¿h¿{¿i¿n¿Ç;¿õ ¿ª¿º¿¨¿∫¿≠¿¬Äü¿Bf/// The root node of the semantics tree, if any.
///
/// If the semantics tree is empty, returns null.   ¿eÄ˛¿v   ¿e¿f¿gï¿¢3/// Update the semantics using [onSemanticsUpdate].   ¿,rÇO¿,ä  ¿,™¿,Ø  ¿,≤¿,√   ¿.≈Ç“¿/˛Å%/// Asks the [SemanticsNode] with the given id to perform the given action.
///
/// If the [SemanticsNode] has not indicated that it can perform the action,
/// this function does nothing.
///
/// If the given `action` requires arguments they need to be passed in via
/// the `args` parameter. ¿0¿0  ¿0¿0%  ¿0.¿07   ¿1õÑ.¿1≥  ¿1Ÿ¿1Ë  ¿1Ì¿1ı  ¿1˛¿2   ¿5ÕÇç¿7
Å)/// Asks the [SemanticsNode] at the given position to perform the given action.
///
/// If the [SemanticsNode] has not indicated that it can perform the action,
/// this function does nothing.
///
/// If the given `action` requires arguments they need to be passed in via
/// the `args` parameter. ¿7¿7"  ¿7+¿7<  ¿7E¿7N   ¿8^8¿8q   ¿8^¿8_ ¿8ö¿ Â/¿9XÄ∑/// Describes the semantic information associated with the owning
/// [RenderObject].
///
/// The information provided in the configuration is used to generate the
/// semantics tree.  :¿<[ ¿<` ¿<v¿=É¿?˘Ç‘/// Whether to block pointer related user actions for the rendering subtree.
///
/// Setting this to true will prevent users from interacting with the
/// rendering object produces this semantics configuration and its subtree
/// through pointer-related [SemanticsAction]s in assistive technologies.
///
/// The [SemanticsNode] created from this semantics configuration is still
/// focusable by assistive technologies. Only pointer-related
/// [SemanticsAction]s, such as [SemanticsAction.tap] or its friends, are
/// blocked.
///
/// If this semantics configuration is merged into a parent semantics node,
/// only the [SemanticsAction]s from this rendering object and the rendering
/// objects in the subtree are blocked.¿@¿@É6¿C7Ç¸/// Whether the configuration forces all children of the owning [RenderObject]
/// that want to contribute semantic information to the semantics tree to do
/// so in the form of explicit [SemanticsNode]s.
///
/// When set to false children of the owning [RenderObject] are allowed to
/// annotate [SemanticsNode]s of their parent with the semantic information
/// they want to contribute to the semantic tree.
/// When set to true the only way for children of the owning [RenderObject]
/// to contribute semantic information to the semantic tree is to introduce
/// new explicit [SemanticsNode]s to the tree.
///
/// This setting is often used in combination with [isSemanticBoundary] to
/// create semantic boundaries that are either writable or not for children.¿CL¿CVÉ|¿FüÉ%/// Whether the owning [RenderObject] makes other [RenderObject]s previously
/// painted within the same semantic boundary unreachable for accessibility
/// purposes.
///
/// If set to true, the semantic information for all siblings and cousins of
/// this node, that are earlier in a depth-first pre-order traversal, are
/// dropped from the semantics tree up until a semantic boundary (as defined
/// by [isSemanticBoundary]) is reached.
///
/// If [isSemanticBoundary] and [isBlockingSemanticsOfPreviouslyPaintedNodes]
/// is set on the same node, all previously painted siblings and cousins up
/// until the next ancestor that is a semantic boundary are dropped.
///
/// Paint order as established by [RenderObject.visitChildrenForSemantics] is
/// used to determine if a node is previous to this one.¿FÕ¿H.¿H3 ¿HG¿HQÅ/¿IJÄπ/// The actions (with associated action handlers) that this configuration
/// would like to contribute to the semantics tree.
///
/// See also:
///
///  * [_addAction] to add an action.¿I~¿I¿IU¿I}¿IV¿Ig¿I¸¿J  ¿J¿Q∑¿Q≈  ¿SÏ¿S˙  ¿W	¿W  ¿Y¿Y#  ¿\1¿\?  ¿_L¿_Z  ¿bf¿bt  ¿eX¿ef  ¿hF¿hT  ¿j¿j  ¿k…¿k◊  ¿my¿má  ¿o¸¿p
  ¿rD2¿rW  ¿uL3¿u_  ¿xA-¿xT  ¿{&.¿{9  ¿~.$¿~C  ¿Åß¿Å∑  ¿Üì*¿Ü°  ¿ã)*¿ã7  ¿åt¿åÇ  ¿èÛB¿ê  ¿îf¿îx  ¿ñò¿ñù  ¿óÌ¿óÚ  ¿ô*¿ô/  ¿öe¿öj  ¿úï¿úö  ¿ûµ¿û∫  ¿°~-¿°É ¿°¶¿§j¿§: ¿§y¿§z¿§T¿§x¿§U¿§l¿ß3¿ß: ¿ßH¿¨!8¿¨2 ¿¨E¿¨U¿¨X¿¨V¿≥¢8¿≥≥ ¿≥∆¿≥÷¿≥Ÿ¿≥◊¿πùA¿πÆ ¿π ¿π⁄¿π›¿π€¿øØA¿ø¿ ¿ø‹¿øÏ¿øÔ¿øÌ¿≈&7¿≈7 ¿≈I¿≈Y¿≈\¿≈Z¿∆x¿∆ ¿∆ä¿«Ñ&¿«ú  ¿»‰¿»Î ¿»¯¿ Ì¿ Ù ¿À¿”k¿”z  ¿ÍF¿ÍK  ¿Ïk¿Ïo ¿Ï¿˙Ä¿˙è  ¿˝¿˝  ¿˛Ë¿˛  ¿ À¿ ”  ¿S#¿f  ¿¶¿™ ¿≥Ä°¿9ïÇ√¿<.Çu/// Whether the [RenderObject] owner of this configuration wants to own its
/// own [SemanticsNode].
///
/// When set to true semantic information associated with the [RenderObject]
/// owner of this configuration or any of its descendants will not leak into
/// parents. The [SemanticsNode] generated out of this configuration will
/// act as a boundary.
///
/// Whether descendants of the owning [RenderObject] can add their semantic
/// information to the [SemanticsNode] introduced by this configuration
/// is controlled by [explicitChildNodes].
///
/// This has to be true if [isMergingSemanticsOfDescendants] is also true.   ¿<ÄÄ¿<É  ¿<ñ
¿<ú   ¿GLÄﬂ¿HÄß/// Whether this configuration is empty.
///
/// An empty configuration doesn't contain any semantic information that it
/// wants to contribute to the semantics tree.   ¿IÖt¿Iç    ¿L«ÑÌ¿Q§Ñ¢/// The handler for [SemanticsAction.tap].
///
/// This is the semantic equivalent of a user briefly tapping the screen with
/// the finger without moving it. For example, a button should implement this
/// action.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen while an element is focused.
///
/// On Android prior to Android Oreo a double-tap on the screen while an
/// element with an [onTap] handler is focused will not call the registered
/// handler. Instead, Android will simulate a pointer down and up event at the
/// center of the focused element. Those pointer events will get dispatched
/// just like a regular tap with TalkBack disabled would: The events will get
/// processed by any [GestureDetector] listening for gestures in the center of
/// the focused element. Therefore, to ensure that [onTap] handlers work
/// properly on Android versions prior to Oreo, a [GestureDetector] with an
/// onTap handler should always be wrapping an element that defines a
/// semantic [onTap] handler. By default a [GestureDetector] will register its
/// own semantic [onTap] handler that follows this principle.   ¿Qœq¿Q”  ¿QŸ¿QË   ¿RDÅ•¿SÕÅf/// The handler for [SemanticsAction.longPress].
///
/// This is the semantic equivalent of a user pressing and holding the screen
/// with the finger for a few seconds without moving it.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen without lifting the finger after the
/// second tap.   ¿T
ÄÉ¿T  ¿T¿T)   ¿TëÇu¿VËÇ./// The handler for [SemanticsAction.scrollLeft].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from right to left. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping left with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided.   ¿W(ÄÜ¿W,  ¿W9¿WH   ¿W≤Å`¿X˙Å'/// The handler for [SemanticsAction.dismiss].
///
/// This is a request to dismiss the currently focused node.
///
/// TalkBack users on Android can trigger this action in the local context
/// menu, and VoiceOver users on iOS can trigger this action with a standard
/// gesture or menu option.   ¿Y1}¿Y5  ¿Y?¿YN   ¿Y≤Ç|¿\Ç3/// The handler for [SemanticsAction.scrollRight].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from left to right. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping right with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided.   ¿\QÄâ¿\U  ¿\c¿\r   ¿\ﬁÇk¿_/Ç(/// The handler for [SemanticsAction.scrollUp].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from bottom to top. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping up with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided.   ¿_iÄÄ¿_m  ¿_x¿_á   ¿_ÌÇv¿bEÇ//// The handler for [SemanticsAction.scrollDown].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from top to bottom. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping down with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided.   ¿bÖÄÜ¿bâ  ¿bñ¿b•   ¿cÇF¿e;Ç/// The handler for [SemanticsAction.increase].
///
/// This is a request to increase the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If [value] is set, [increasedValue] must also be provided and
/// [onIncrease] must ensure that [value] will be set to [increasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping up with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume up button.   ¿euÄÄ¿ey  ¿eÑ¿eì   ¿e˘ÇJ¿h)Ç/// The handler for [SemanticsAction.decrease].
///
/// This is a request to decrease the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If [value] is set, [decreasedValue] must also be provided and
/// [onDecrease] must ensure that [value] will be set to [decreasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping down with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume down button.   ¿hcÄÄ¿hg  ¿hr¿hÅ   ¿hÁÅ¿iÛÄÌ/// The handler for [SemanticsAction.copy].
///
/// This is a request to copy the current selection to the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿j!t¿j%  ¿j,¿j;   ¿jôÅ-¿k∂Ä¸/// The handler for [SemanticsAction.cut].
///
/// This is a request to cut the current selection and place it in the
/// clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿k·q¿kÂ  ¿kÎ¿k˙   ¿lVÅ ¿mbÄÌ/// The handler for [SemanticsAction.paste].
///
/// This is a request to paste the current content of the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿mìw¿mó  ¿mü¿mÆ   ¿nÅÎ¿o◊Å§/// The handler for [SemanticsAction.showOnScreen].
///
/// A request to fully show the semantics node on screen. For example, this
/// action might be send to a node in a scrollable list that is partially off
/// screen to bring it on screen.
///
/// For elements in a scrollable list the framework provides a default
/// implementation for this action and it is not advised to provide a
/// custom one via this setter.   ¿pÄå¿p!  ¿p0¿p?   ¿p≠Åî¿qˇÅ,/// The handler for [SemanticsAction.moveCursorForwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field forward by one character.
///
/// TalkBack users can trigger this by pressing the volume up key while the
/// input focus is in a text field.   ¿rzÅ1¿r~  ¿rù¿r±   ¿sØÅö¿uÅ0/// The handler for [SemanticsAction.moveCursorBackwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one character.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿uÉÅ4¿uá  ¿uß¿uª   ¿vªÅÉ¿xÅ%/// The handler for [SemanticsAction.moveCursorForwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿xrÅ'¿xv  ¿xê¿x§   ¿yùÅÜ¿zÈÅ&/// The handler for [SemanticsAction.moveCursorBackwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿{XÅ*¿{\  ¿{w¿{ã   ¿|ÜÅ•¿~	Å[/// The handler for [SemanticsAction.setSelection].
///
/// This handler is invoked when the user either wants to change the currently
/// selected text in a text field or change the position of the cursor.
///
/// TalkBack users can trigger this handler by selecting "Move cursor to
/// beginning/end" or "Select all" from the local context menu.   ¿~VÅ˛¿~Z  ¿~i¿~   ¿ÄXÅL¿ÅåÅ/// The handler for [SemanticsAction.setText].
///
/// This handler is invoked when the user wants to replace the current text in
/// the text field with a new text.
///
/// Voice access users can trigger this handler by speaking `type <text>` to
/// their Android devices.   ¿Å≈Å¿Å…  ¿Å”¿Å‰   ¿Ç‘Éº¿ÜTÉK/// The handler for [SemanticsAction.didGainAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler gains
/// the accessibility focus. The accessibility focus is the
/// green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidLoseAccessibilityFocus], which is invoked when the accessibility
///    focus is removed from the node.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus.   ¿Ü¡Ä≥¿Ü≈  ¿Ü·¿Ü   ¿áxÉÆ¿äÍÉ=/// The handler for [SemanticsAction.didLoseAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler
/// loses the accessibility focus. The accessibility focus is
/// the green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidGainAccessibilityFocus], which is invoked when the node gains
///    accessibility focus.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus.   ¿ãWÄ≥¿ã[  ¿ãw¿ãÜ   ¿åc¿å]:/// {@macro flutter.semantics.SemanticsProperties.onFocus}   ¿åéw¿åí  ¿åö¿å©   ¿ç	ÇÁ¿è¥Çj/// A delegate that decides how to handle [SemanticsConfiguration]s produced
/// in the widget subtree.
///
/// The [SemanticsConfiguration]s are produced by rendering objects in the
/// subtree and want to merge up to their parent. This delegate can decide
/// which of these should be merged together to form sibling SemanticsNodes and
/// which of them should be merged upwards into the parent SemanticsNode.
///
/// The input list of [SemanticsConfiguration]s can be empty if the rendering
/// object of this semantics configuration is a leaf node or child rendering
/// objects do not contribute to the semantics.   ¿ê9Å¿ê=  ¿êY+¿êÄ   ¿íÇb¿îOÇ!/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android).
///
/// Whether this sort key has an effect on the [SemanticsNode] sort order is
/// subject to how this configuration is used. For example, the [absorb]
/// method may decide to not use this key when it combines multiple
/// [SemanticsConfiguration] objects.   ¿îÑy¿îà  ¿îê¿î£   ¿ïÅî¿ñuÅ^/// The index of this node within the parent's list of semantic children.
///
/// This includes all semantic nodes, not just those currently in the
/// child list. For example, if a scrollable has five children but the first
/// two are not visible (and thus not included in the list of children), then
/// the index of the last node will still be 4.   ¿ñØ]¿ñ≥  ¿ñ¡
¿ñ«   ¿óÄ⁄¿óƒÄ¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null.   ¿òÄú¿ò  ¿ò
¿ò"   ¿òßÄÄ¿ôV/// The index of the first visible scrollable child that contributes to
/// semantics.   ¿ô?Äç¿ôC  ¿ôO
¿ôU   ¿ô–Äí¿ö@b/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.   ¿ö}Äñ¿öÅ  ¿öê
¿öñ   ¿õÅ{¿úpÅ?/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [isTextField] is true. Defaults to null,
/// which means no limit is imposed on the text field.   ¿ú≠Äñ¿ú±  ¿ú¿
¿ú∆   ¿ùGÅk¿ûàÅ'/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [isTextField] is true. Must be set when
/// [maxValueLength] is set.   ¿û—Ä¢¿û’  ¿ûË
¿ûÓ   ¿üwÇ¿°7Å¶/// Whether the semantic information provided by the owning [RenderObject] and
/// all of its descendants should be treated as one logical entity.
///
/// If set to true, the descendants of the owning [RenderObject]'s
/// [SemanticsNode] will merge their semantic information into the
/// [SemanticsNode] representing the owning [RenderObject].
///
/// Setting this to true requires that [isSemanticBoundary] is also true.   ¿°ØÄ°¿°≥  ¿°”
¿°Ÿ   ¿¢TÅ∫¿£‹ÅN/// The handlers for each supported [CustomSemanticsAction].
///
/// Whenever a custom accessibility action is added to a node, the action
/// [SemanticsAction.customAction] is automatically added. A handler is
/// created which uses the passed argument to lookup the custom action
/// handler from this map and invoke it, if present.   ¿§Å¿§É  ¿§ö.¿§ƒ   ¿¶Àe¿ß=/// {@macro flutter.semantics.SemanticsProperties.identifier}   ¿ßNc¿ßR  ¿ß]¿ße   ¿ßµÅW¿®ÎÅ/// A textual description of the owning [RenderObject].
///
/// Setting this attribute will override the [attributedLabel].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedLabel], which is the [AttributedString] of this property.   ¿©k¿©  ¿©¿©!   ¿©~Ç†¿´˙ÇJ/// A textual description of the owning [RenderObject] in [AttributedString]
/// format.
///
/// On iOS this is used for the `accessibilityAttributedLabel` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedValue] and [attributedHint] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [label], which is the raw text of this property.   ¿¨]ÄÅ¿¨a  ¿¨q ¿¨É   ¿¨‚Çï¿ØVÇN/// A textual description for the current value of the owning [RenderObject].
///
/// Setting this attribute will override the [attributedValue].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedValue], which is the [AttributedString] of this property.
///  * [increasedValue] and [attributedIncreasedValue], which describe what
///    [value] will be after performing [SemanticsAction.increase].
///  * [decreasedValue] and [attributedDecreasedValue], which describe what
///    [value] will be after performing [SemanticsAction.decrease].   ¿Øzk¿Ø~  ¿ØÑ¿Øå   ¿ØÈÉ∂¿≥{ÉX/// A textual description for the current value of the owning [RenderObject]
/// in [AttributedString] format.
///
/// On iOS this is used for the `accessibilityAttributedValue` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedLabel] and [attributedHint] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [value], which is the raw text of this property.
///  * [attributedIncreasedValue], which describes what [value] will be after
///    performing [SemanticsAction.increase].
///  * [attributedDecreasedValue], which describes what [value] will be after
///    performing [SemanticsAction.decrease].   ¿≥ﬁÄÅ¿≥‚  ¿≥Ú ¿¥   ¿¥cÇn¿∂ûÇ/// The value that [value] will have after performing a
/// [SemanticsAction.increase] action.
///
/// Setting this attribute will override the [attributedIncreasedValue].
///
/// One of the [attributedIncreasedValue] or [increasedValue] must be set if
/// a handler for [SemanticsAction.increase] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedIncreasedValue], which is the [AttributedString] of this property.   ¿∂‘Äè¿∂ÿ  ¿∂Á¿∂Ô   ¿∑gÇ3¿πdÅœ/// The value that [value] will have after performing a
/// [SemanticsAction.increase] action in [AttributedString] format.
///
/// One of the [attributedIncreasedValue] or [increasedValue] must be set if
/// a handler for [SemanticsAction.increase] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [increasedValue], which is the raw text of this property.   ¿π‚Ä•¿πÊ  ¿πˇ)¿∫   ¿∫ãÇX¿º∞Ç/// The value that [value] will have after performing a
/// [SemanticsAction.decrease] action.
///
/// Setting this attribute will override the [attributedDecreasedValue].
///
/// One of the [attributedDecreasedValue] or [decreasedValue] must be set if
/// a handler for [SemanticsAction.decrease] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
///  * [attributedDecreasedValue], which is the [AttributedString] of this property.   ¿ºÊÄè¿ºÍ  ¿º˘¿Ω   ¿ΩyÇ3¿øvÅœ/// The value that [value] will have after performing a
/// [SemanticsAction.decrease] action in [AttributedString] format.
///
/// One of the [attributedDecreasedValue] or [decreasedValue] must be set if
/// a handler for [SemanticsAction.decrease] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [decreasedValue], which is the raw text of this property.   ¿øÙÄ•¿ø¯  ¿¿)¿¿#   ¿¿ùÅg¿¡ÂÅ*/// A brief description of the result of performing an action on this node.
///
/// Setting this attribute will override the [attributedHint].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedHint], which is the [AttributedString] of this property.   ¿¬g¿¬  ¿¬¿¬   ¿¬rÇ±¿≈Ç]/// A brief description of the result of performing an action on this node in
/// [AttributedString] format.
///
/// On iOS this is used for the `accessibilityAttributedHint` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedLabel] and [attributedValue] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [hint], which is the raw text of this property.   ¿≈a}¿≈e  ¿≈t¿≈Ü   ¿≈‚Äì¿∆am/// A textual description of the widget's tooltip.
///
/// The reading direction is given by [textDirection].   ¿∆êW¿∆î  ¿∆ú¿∆§   ¿∆ÎÄñ¿«aU/// Provides hint values which override the default hints on supported
/// platforms.   ¿«ÆÄù¿«≤  ¿«¿¿«Ÿ   ¿»OÄí¿»…j/// The elevation in z-direction at which the owning [RenderObject] is
/// located relative to its parent.   ¿»ˇÄ§¿…  ¿…¿…   ¿…ßÅC¿ “Å/// The extend that the owning [RenderObject] occupies in z-direction starting
/// at [elevation].
///
/// It's extremely rare to set this value directly. Instead, it is calculated
/// implicitly when other [SemanticsConfiguration]s are merged into this one
/// via [absorb].   ¿ÀÄ§¿À  ¿À¿À   ¿À∞Å¿ÃäÄƒ/// Whether the semantics node is the root of a subtree for which values
/// should be announced.
///
/// See also:
///
///  * [SemanticsFlag.scopesRoute], for a full description of route scoping.   ¿Ã¿Q¿Ãƒ  ¿Ã–
¿Ã÷   ¿ÕÄ„¿Õ«Äû/// Whether the semantics node contains the label of a route.
///
/// See also:
///
///  * [SemanticsFlag.namesRoute], for a full description of route naming.   ¿Õ˚O¿Õˇ  ¿Œ

¿Œ   ¿ŒNj¿Œç3/// Whether the semantics node represents an image.   ¿ŒªI¿Œø  ¿Œ«
¿ŒÕ   ¿œÉa¿“6É/// Whether the semantics node is a live region.
///
/// A live region indicates that updates to semantics node are important.
/// Platforms may use this information to make polite announcements to the
/// user to inform them of updates to this node.
///
/// An example of a live region is a [SnackBar] widget. On Android and iOS,
/// live region causes a polite announcement to be generated automatically,
/// even if the widget does not have accessibility focus. This announcement
/// may not be spoken if the OS accessibility services are already
/// announcing something else, such as reading the label of a focused widget
/// or providing a system announcement.
///
/// See also:
///
///  * [SemanticsFlag.isLiveRegion], the semantics flag that this setting controls.   ¿“lQ¿“p  ¿“{
¿“Å   ¿“¡Äß¿”Ho/// The reading direction for the text in [label], [value], [hint],
/// [increasedValue], and [decreasedValue].   ¿”åw¿”ê  ¿”û¿”Æ   ¿‘Åµ¿’ãÅn/// Whether the owning [RenderObject] is selected (true) or not (false).
///
/// This is different from having accessibility focus. The element that is
/// accessibility focused may or may not be selected; e.g. a [ListTile] can have
/// accessibility focus but have its [ListTile.selected] property set to false,
/// in which case it will not be flagged as selected.   ¿’øO¿’√  ¿’Œ
¿’‘   ¿÷Ç&¿◊’Å®/// If this node has Boolean state that can be controlled by the user, whether
/// that state is expanded or collapsed, corresponding to true and false, respectively.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have expanded/collapsed state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// expanded/collapsed state.   ¿ÿ;ÄÖ¿ÿ?  ¿ÿJ¿ÿQ   ¿ÿƒÉ<¿€†Ç≥/// Whether the owning [RenderObject] is currently enabled.
///
/// A disabled object does not respond to user interactions. Only objects that
/// usually respond to user interactions, but which currently do not (like a
/// disabled button) should be marked as disabled.
///
/// The setter should not be called for objects (like static text) that never
/// respond to user interactions.
///
/// The getter will return null if the owning [RenderObject] doesn't support
/// the concept of being enabled/disabled.
///
/// This property does not control whether semantics are enabled. If you wish to
/// disable semantics for a particular widget, you should use an [ExcludeSemantics]
/// widget.   ¿‹ÄÇ¿‹  ¿‹¿‹   ¿‹âÇ&¿ﬁOÅ©/// If this node has Boolean state that can be controlled by the user, whether
/// that state is checked or unchecked, corresponding to true and false,
/// respectively.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have checked/unchecked state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// checked/unchecked state.   ¿ﬁ≤Ä∫¿ﬁ∂  ¿ﬁ¿¿ﬁ«   ¿ﬂpÅˆ¿‡ˆÅk/// If this node has tristate that can be controlled by the user, whether
/// that state is in its mixed state.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have checked/unchecked state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// mixed checked state.   ¿·iÄ¬¿·m  ¿·¿·Ü   ¿‚/Åˇ¿„ŒÅÑ/// If this node has Boolean state that can be controlled by the user, whether
/// that state is on or off, corresponding to true and false, respectively.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have on/off state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// on/off state.   ¿‰1ÄÇ¿‰5  ¿‰?¿‰F   ¿‰∑Å{¿Â·Å/// Whether the owning RenderObject corresponds to UI that allows the user to
/// pick one of several mutually exclusive options.
///
/// For example, a [Radio] button is in a mutually exclusive group because
/// only one radio button in that group can be marked as [isChecked].   ¿Ê5o¿Ê9  ¿ÊT
¿ÊZ   ¿Ê®~¿ÊÛ?/// Whether the owning [RenderObject] can hold the input focus.   ¿Á)Q¿Á-  ¿Á9
¿Á?   ¿Á~ÄÅ¿Á–F/// Whether the owning [RenderObject] currently holds the input focus.   ¿ËM¿Ë  ¿Ë
¿Ë   ¿ËSÄÅ¿ËßH/// Whether the owning [RenderObject] is a button (true) or not (false).   ¿Ë◊K¿Ë€  ¿Ë‰
¿ËÍ   ¿È&{¿ÈxF/// Whether the owning [RenderObject] is a link (true) or not (false).   ¿È§G¿È®  ¿ÈØ
¿Èµ   ¿ÈÔT¿Í/4/// The URL that the owning [RenderObject] links to.   ¿ÍXÄÇ¿Í\  ¿Íd
¿Íj   ¿ÍﬁÄÅ¿Î2H/// Whether the owning [RenderObject] is a header (true) or not (false).   ¿ÎbK¿Îf  ¿Îo
¿Îu   ¿Î±Ä∑¿ÏJÄä/// Indicates the heading level in the document structure.
///
/// This is only used for web semantics, and is ignored on other platforms.   ¿ÏÖÄµ¿Ïâ  ¿Ïñ	¿Ïõ   ¿Ì>ÄÅ¿ÌíH/// Whether the owning [RenderObject] is a slider (true) or not (false).   ¿Ì¬K¿Ì∆  ¿Ìœ
¿Ì’   ¿ÓÄï¿ÓoE/// Whether the owning [RenderObject] is a keyboard key (true) or not   ¿Ó©U¿Ó≠  ¿Óª
¿Ó¡   ¿ÔÉn¿ÚCÉ/// Whether the owning [RenderObject] is considered hidden.
///
/// Hidden elements are currently not visible on screen. They may be covered
/// by other elements or positioned outside of the visible area of a viewport.
///
/// Hidden elements cannot gain accessibility focus though regular touch. The
/// only way they can be focused is by moving the focus to them via linear
/// navigation.
///
/// Platforms are free to completely ignore hidden elements and new platforms
/// are encouraged to do so.
///
/// Instead of marking an element as hidden it should usually be excluded from
/// the semantics tree altogether. Hidden elements are only included in the
/// semantics tree to work around platform limitations and they are mainly
/// used to implement accessibility scrolling on iOS.   ¿ÚsK¿Úw  ¿ÚÄ
¿ÚÜ   ¿Ú¬u¿Û6/// Whether the owning [RenderObject] is a text field.   ¿Û:Q¿Û>  ¿ÛJ
¿ÛP   ¿ÛèÄ®¿Ùg/// Whether the owning [RenderObject] is read only.
///
/// Only applicable when [isTextField] is true.   ¿Ù:O¿Ù>  ¿ÙI
¿ÙO   ¿ÙçÅJ¿ı¶Å/// Whether [value] should be obscured.
///
/// This option is usually set in combination with [isTextField] to indicate
/// that the text field contains a password (or other sensitive information).
/// Doing so instructs screen readers to not read out [value].   ¿ı⁄O¿ıﬁ  ¿ıÈ
¿ıÔ   ¿ˆ-Äı¿ˆÔÄ∞/// Whether the text field is multiline.
///
/// This option is usually set in combination with [isTextField] to indicate
/// that the text field is configured to be multiline.   ¿˜%Q¿˜)  ¿˜5
¿˜;   ¿˜zÅÈ¿˘Åå/// Whether the platform can scroll the semantics node when the user attempts
/// to move focus to an offscreen child.
///
/// For example, a [ListView] widget has implicit scrolling so that users can
/// easily move to the next visible set of children. A [TabBar] widget does
/// not have implicit scrolling, so that users can navigate into the tab
/// body when reaching the end of the tab bar.   ¿˘fc¿˘j  ¿˘
¿˘Ö   ¿˘ÕÄ∞¿˙]x/// The currently selected text (or the position of the cursor) within
/// [value] if this node represents a text field.   ¿˙°ÄÇ¿˙•  ¿˙≥¿˙√   ¿˚'Åﬁ¿¸„Åõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken.   ¿˝#}¿˝'  ¿˝6¿˝?   ¿˝§ÅA¿˛¡Å /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken.   ¿ˇ¿ˇ  ¿ˇ¿ˇ!   ¿ˇáÅA¿ §Å /// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent], from where this value is usually taken.   ¿ Á¿ Î  ¿ ˚¿   ¿uÅ¿lÄÃ/// The set of tags that this configuration wants to add to all child
/// [SemanticsNode]s.
///
/// See also:
///
///  * [addTagForChildren] to add a tag and for more information about their
///    usage.   ¿JÅ;¿J®ÄÉ/// Adds an `action` to the semantics tree.
///
/// The provided `handler` is called to respond to the user triggered
/// `action`. ¿J≥¿Jƒ  ¿JÀ¿J„   ¿KVÅm¿LÄ∂/// Adds an `action` to the semantics tree, whose `handler` does not expect
/// any arguments.
///
/// The provided `handler` is called to respond to the user triggered
/// `action`. ¿L3¿LD  ¿LK¿LY   ¿ëIÄ¥¿ë¿Z/// Returns the action handler registered for [action] or null if none was
/// registered. ¿ë—¿ë‚   ¿•óÅ0¿•ú  ¿•µ¿•æ   ¿îÄª¿ b/// Whether this configuration will tag the child semantics nodes with a
/// given [SemanticsTag]. ¿¿   ¿{É¿Çp/// Specifies a [SemanticsTag] that this configuration wants to apply to all
/// child [SemanticsNode]s.
///
/// The tag is added to all [SemanticsNode] that pass through the
/// [RenderObject] owning this configuration while looking to be attached to a
/// parent [SemanticsNode].
///
/// Tags are used to communicate to a parent [SemanticsNode] that a child
/// [SemanticsNode] was passed through a particular [RenderObject]. The parent
/// can use this information to determine the shape of the semantics tree.
///
/// See also:
///
///  * [RenderViewport.excludeFromScrolling] for an example of
///    how tags are used. ¿!¿/   ¿∏ÄÆ¿Ω  ¿∆¿’  ¿⁄
¿‡   ¿j@¿o  ¿x¿á   ¿‘ÉÕ¿—ÄÌ/// Whether this configuration is compatible with the provided `other`
/// configuration.
///
/// Two configurations are said to be compatible if they can be added to the
/// same [SemanticsNode] without losing any semantics information. ¿‚¿˚   ¿•ãé¿ŸÇ/// Absorb the semantic information from `child` into this configuration.
///
/// This adds the semantic information of both configurations and saves the
/// result in this configuration.
///
/// The [RenderObject] owning the `child` configuration must be a descendant
/// of the [RenderObject] that owns this configuration.
///
/// Only configurations that have [explicitChildNodes] set to false can
/// absorb other configurations and it is recommended to only absorb compatible
/// configurations as determined by [isCompatibleWith]. ¿‡¿¯   ¿7Üê¿Å0/// Returns an exact copy of this configuration.    ¿#Öä^¿&5Ç†/// Base class for all sort keys for [SemanticsProperties.sortKey] accessibility
/// traversal order sorting.
///
/// Sort keys are sorted by [name], then by the comparison that the subclass
/// implements. If [SemanticsProperties.sortKey] is specified, sort keys within
/// the same semantic group must all be of the same type.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].
///
/// If no sort key is applied to a semantics node, then it will be ordered using
/// a platform dependent default algorithm.
///
/// See also:
///
///  * [OrdinalSortKey] for a sort key that sorts using an ordinal. ¿&ÜÄΩ ¿'%¿'5Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿'7	¿'=   ¿'GÅ?¿(ÇÅ/// An optional name that will group this sort key with other sort keys of the
/// same [name].
///
/// Sort keys must have the same `runtimeType` when compared.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].  ¿(ãÇ∂¿(õ  ¿(•¿(∑  ¿(ã¿(å¿+EÅ’¿,ÓÅÖ/// The implementation of [compareTo].
///
/// The argument is guaranteed to be of the same type as this object and have
/// the same [name].
///
/// The method should return a negative number if this object comes earlier in
/// the sort order than the argument; and a positive number if it comes later
/// in the sort order. Returning zero causes the system to use default sort
/// order. ¿,¯ ¿-  ¿,›¿,ﬁ¿-Ä√¿-/  ¿-C&¿-`  ¿-¿- ¿-Âá[¿1;ÉO/// A [SemanticsSortKey] that sorts based on the `double` value it is
/// given.
///
/// The [OrdinalSortKey] compares itself with other [OrdinalSortKey]s
/// to sort based on the order it is given.
///
/// [OrdinalSortKey]s are sorted by the optional [name], then by their [order].
/// If [SemanticsProperties.sortKey] is a [OrdinalSortKey], then all the other
/// specified sort keys in the same semantics group must also be
/// [OrdinalSortKey]s.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].
///
/// The ordinal value [order] is typically a whole number, though it can be
/// fractional, e.g. in order to fit between two other consecutive whole
/// numbers. The value must be finite (it cannot be [double.nan],
/// [double.infinity], or [double.negativeInfinity]). ¿1gÅ ¿1Ó¿1¸z/// Creates a const semantics sort key that uses a [double] as its key value.
///
/// The [order] must be a finite number.¿2
¿2  ¿2
¿2  ¿2'¿2-¿2M¿24¿2.¿26¿2<¿2=¿2W¿2]¿2u¿2d¿2^¿2f¿2l¿2m¿2{Åa¿3◊ÅB/// Determines the placement of this key in a sequence of keys that defines
/// the order in which this node is traversed by the platform's accessibility
/// services.
///
/// Lower values will be traversed first. Keys with the same [name] will be
/// grouped together and sorted by name first, and then sorted by [order].  ¿3·Äî¿3Ò  ¿3˚¿4  ¿3·¿3‚¿4yÄ≈¿4ä  ¿4û&¿4ª  ¿4y¿4z  ¿ÀÇJ¿0_/// Used by [debugDumpSemanticsTree] to specify the order in which child nodes
/// are printed.  ¿LÅ¿NÄ˜/// Print nodes in inverse hit test order.
///
/// In inverse hit test order, the last child of a [SemanticsNode] will be
/// asked first if it wants to respond to a user's interaction, followed by
/// the second last, etc. until a taker is found. ¿aÄ±¿ Äö/// Print nodes in semantic traversal order.
///
/// This is the order in which a user would navigate the UI using the "next"
/// and "previous" gestures.       ¿Ä©¿R\/// In tests use this function to reset the counter used to generate
/// [SemanticsNode.id].   ¿.ÅC¿v@/// Converts `point` to the `node`'s parent's coordinate system. ¿ê¿ü  ¿§¿¨   ¿sá¿áÅˇ/// Sorts `children` using the default sorting algorithm, and returns them as a
/// new list.
///
/// The algorithm first breaks up children into groups such that no two nodes
/// from different groups overlap vertically. These groups are sorted vertically
/// according to their [_SemanticsSortGroup.startOffset].
///
/// Within each group, the nodes are sorted using
/// [_SemanticsSortGroup.sortedWithinVerticalGroup].
///
/// For an illustration of the algorithm see http://bit.ly/flutter-default-traversal. ¿ü¿¥  ¿Ω¿Ã   ¿ Él¿ (  ¿ D.¿ _  ¿ v/¿ ë  ¿ ©)¿ ¬  ¿ ÷*¿ Ô   ¿5BÇI¿7Å¿/// Picks the most accurate heading level when two nodes, with potentially
/// different heading levels, are merged.
///
/// Argument [sourceLevel] is the heading level of the source node that is being
/// merged into a target node, which has heading level [targetLevel].
///
/// If the target node is not a heading, the the source heading level is used.
/// Otherwise, the target heading level is used irrespective of the source
/// heading level. ¿7¿7*  ¿76¿7D    Ñ‰Ä„ÖéÄ°/// Signature for a function that is called for each [SemanticsNode].
///
/// Return false to stop visiting nodes.
///
/// Used by [SemanticsNode.visitChildren].  Ö≥Ö¬   Ö…ÅÜ≠Ä€/// Signature for [SemanticsAction]s that move the cursor.
///
/// If `extendSelection` is set to true the cursor movement should extend the
/// current selection or (if nothing is currently selected) start a selection.  ÜœÜ’   ÜÁÄ–ázÄä/// Signature for the [SemanticsAction.setSelection] handlers to change the
/// text selection (or re-position the cursor) to `selection`.  áûá≠   áπÄ§à1o/// Signature for the [SemanticsAction.setText] handlers to replace the
/// current text with the input `text`.  àPàX   à_Ä∞à⁄r/// Signature for a handler of a [SemanticsAction].
///
/// Returned by [SemanticsConfiguration.getActionHandler].  ââ
   âÄ—â¢Äà/// Signature for a function that receives a semantics update and returns no result.
///
/// Used by [SemanticsOwner.onSemanticsUpdate].  â â€   â‰Çƒå7ÇJ/// Signature for the [SemanticsConfiguration.childConfigurationsDelegate].
///
/// The input list contains all [SemanticsConfiguration]s that rendering
/// children want to merge upward. One can tag a render child with a
/// [SemanticsTag] and look up its [SemanticsConfiguration]s through
/// [SemanticsConfiguration.tagsChildrenWith].
///
/// The return value is the arrangement of these configs, including which
/// configs continue to merge upward and which configs form sibling merge group.
///
/// Use [ChildSemanticsConfigurationsResultBuilder] to generate the return
/// value.  åä     å™ÄÜå¥ åˇåÕå‹å›åˆå˜çççç*ç+   ÄÆ  dart:ui  ÄÃ  package:flutter/material.dart  Ä¸  package:flutter/rendering.dart îﬂ <ÄÜÄ§Ä•ÄøÄ√ÄÛÅ$Å-Å.ÅJÅ◊ÅÿÇÇ/Ç{Ç£Ç’Ç÷ÉÉ"É#ÉïÉñÑ5ÑpÑØÑ∞Ñ„Ñ‰Ö*Ö.ÖWÖ[ÖÜÖ»Ö…ÜÜÜVÜ•ÜÊÜÁá3árá∏áπàà)à^à_àìàóà“âââfâjâöâ„â‰ä0ä4ä}ä¬ãã6ã:ãÑã’ãŸå$å/å©å™å˝ç2ç3çTçXçóç‰é0é4éÇéœé›é·è/è}èÀè⁄èÔêêêeêµëëë7ë8ëuë{ë¡ë÷ë◊ë„í/í1í2ímíåíêí›ììbìsìwì¿ìÎî:î;îãî¨î≤î˛ïHïäï∏ïπññ2ñ8ñÅñ∫óóOóUó£óˆòCòîò·ôôYô[ô\ô©ô∫ôæô˜ö4öÉöΩöÔõ,õ[õ\õ®úúú\úhúnú¶úÛù@ùAùÑùÆù¥ùˆûNû∏ûπüü6üEüó††$†G†î†·°°°°+°5°Ö°â°ã°å°º°¿¢¢J¢í¢⁄£)£x£Ü£ä£Ÿ§§§`§s§w§ø§Í§Ó§¸• •Q•\•z•ß•≠•“¶¶)¶<¶Q¶R¶¢¶∞¶∂¶⁄ßLßfßzß{ßπß–ß—®®#®$®^®®Ä®å®ƒ®≈®—®Ù© ©4©:©d©Ñ©¢©≈©…© ©÷©Ï™I™M™N™ó™∞™ ´$´z´{´™´Â¨¨¨9¨V¨w¨}¨ê¨î¨ï¨ƒ¨¯≠≠≠≠g≠|≠ú≠¨≠ƒ≠ÿ≠Î≠˛ÆÆÆÆÆGÆRÆkÆéÆîÆﬂÆÔÆıØ?ØNØbØuØ¶ØﬁØÒ∞/∞A∞w∞©∞Ò∞˛±±±)±*±b±y±z±§±™±Ï≤≤≤Z≤`≤±≤˙≥2≥L≥`≥f≥Ü≥ô≥ü≥†≥≈≥˘¥O¥v¥û¥‡µµ?µlµwµ µ¯∂ ∂∂I∂M∂N∂ö∂¶∂…∂ı∑∑<∑Ç∑Ü∑á∑ì∑ ∑À∑◊∑Ì∏N∏R∏T∏U∏ü∏›π,πrπxπµπ—πËπ˚∫∫/∫G∫X∫o∫u∫v∫√∫˛ªª)ªEªFªRª≈ª∆ª“ºº2ºGºMºnºïº…ΩΩ/Ω5ΩZΩrΩxΩÂΩÈΩÎΩÏæ$æ(ætæ≈øø'ø+øiøtøûø≈øÀ¿ @¿ @(¿ @A¿ @\¿ @z¿ @ù¿ @¿¿ @Ï¿ A¿ A:¿ AU¿ Av¿ Aé¿ A´¿ A»¿ AÈ¿ B¿ B,¿ BN¿ Bq¿ Bî¿ B∂¿ Bÿ¿ B˛¿ C¿ C9¿ CH¿ C\¿ C¿ D¿ D£¿ ED¿ F ¿ Fº¿ GZ¿ G∫¿ HV¿ HW¿ Hñ¿ H©¿ H™¿ HÎ¿ I ¿ I¿ IA¿ I\¿ I]¿ Iú¿ I¢¿ I€¿ I·¿ J¿ JI¿ JJ¿ Jã¿ J¨¿ J≤¿ JÎ¿ JÒ¿ K*¿ KT¿ KU¿ Kî¿ Kö¿ K”¿ KŸ¿ L¿ LA¿ LB¿ LÉ¿ L§¿ L™¿ L„¿ LÈ¿ M"¿ ML¿ MM¿ Mâ¿ M≤¿ M∏¿ MÒ¿ M˜¿ N:¿ Nz¿ N{¿ N∑¿ N˝¿ O¿ O<¿ OB¿ OÑ¿ O∑¿ O∏¿ OÙ¿ P¿ P#¿ P\¿ Pb¿ P•¿ PÂ¿ PÊ¿ Q"¿ Qh¿ Qn¿ Qß¿ Q≠¿ QÔ¿ R"¿ R#¿ Rq¿ Rw¿ R∞¿ R∂¿ RÔ¿ S¿ S¿ Si¿ Sç¿ Sì¿ SÃ¿ S“¿ T
¿ T3¿ T4¿ Ti¿ To¿ T®¿ T¿¿ T¡¿ T˘¿ Tˇ¿ UL¿ Uö¿ U¥¿ Uµ¿ UÛ¿ V)¿ VO¿ VP¿ V°¿ VÕ¿ VÛ¿ VÙ¿ W@¿ WF¿ Wì¿ Wü¿ Wæ¿ Wø¿ X¿ X¿ X ¿ Xp¿ XÇ¿ Xà¿ Xÿ¿ Y$¿ Yj¿ Yp¿ YÄ¿ YÜ¿ Y–¿ Y¿ YÒ¿ Z@¿ ZR¿ ZX¿ Zì¿ Zô¿ Z©¿ ZØ¿ [¿ [#¿ [$¿ [s¿ [Ö¿ [ã¿ [∆¿ [Ã¿ [‹¿ [‚¿ \5¿ \V¿ \W¿ \°¿ \æ¿ \ƒ¿ ]¿ ]\¿ ]q¿ ]w¿ ]á¿ ]ç¿ ]Õ¿ ^¿ ^$¿ ^%¿ ^q¿ ^É¿ ^â¿ ^÷¿ ^Í¿ ^¿ _@¿ _Ç¿ _ü¿ _†¿ _Ô¿ `¿ `¿ `T¿ `h¿ `n¿ `ø¿ `Í¿ a¿ a¿ a3¿ a9¿ aI¿ aO¿ aô¿ aØ¿ a∞¿ aÔ¿ b¿ b¿ b?¿ b`¿ ba¿ bª¿ b¡¿ c¿ cY¿ ch¿ cÑ¿ cÖ¿ cÕ¿ c”¿ c„¿ cÈ¿ d9¿ d[¿ du¿ dv¿ dº¿ d¬¿ d“¿ dÿ¿ e$¿ e>¿ e?¿ eä¿ e©¿ eØ¿ e‚¿ eË¿ e¯¿ e˛¿ fF¿ fs¿ ft¿ f£¿ f‰¿ fÂ¿ g¿ gc¿ gd¿ gp¿ g∂¿ g∑¿ g√¿ h¿ h3¿ hÅ¿ hÂ¿ i4¿ iÉ¿ i¥¿ i˜¿ j"¿ j9¿ j@¿ jë¿ jÈ¿ j˙¿ kQ¿ kæ¿ kø¿ kÓ¿ l+¿ lR¿ lg¿ ln¿ l¡¿ m¿ mY¿ m°¿ m˚¿ nU¿ nõ¿ nÂ¿ oJ¿ ou¿ o·¿ oÁ¿ p>¿ pï¿ pÙ¿ qM¿ qû¿ q˙¿ rT¿ r∞¿ s ¿ sV¿ sZ¿ s[¿ sg¿ sä¿ s¨¿ sÃ¿ s¿ t¿ tN¿ tÇ¿ t»¿ u¿ u@¿ ud¿ uî¿ u≤¿ uŸ¿ v¿ v;¿ vk¿ vù¿ v—¿ w¿ w7¿ wi¿ w£¿ wÀ¿ wÛ¿ x¿ xI¿ xm¿ x≈¿ x…¿ x ¿ x÷¿ x˘¿ y¿ y¿ y!¿ y6¿ yK¿ yi¿ yá¿ yõ¿ y®¿ yª¿ y≈¿ yœ¿ y‚¿ y¯¿ z	¿ z¿ z2¿ zG¿ z[¿ zl¿ zÇ¿ zú¿ z≠¿ zæ¿ zœ¿ z„¿ zÚ¿ {M¿ {T¿ {Y¿ {Z¿ {ü¿ {»¿ {€¿ {·¿ |
¿ |3¿ |I¿ |Q¿ |¿ |¢¿ |∫¿ |¬¿ |Ã¿ |ﬂ¿ |Â¿ |˜¿ |˚¿ |˝¿ |˛¿ }M¿ }n¿ }~¿ }ò¿ }≤¿ }–¿ }÷¿ }◊¿ ~¿ ~¿ ~¿ ~n¿ ~p¿ ~q¿ ~∏¿ ~«¿ ~À¿ ~¯¿ ¿ =¿ g¿ à¿ ú¿ ∂¿ ÷¿ ¸¿ ˝¿ Ä#¿ Ä)¿ Ä[¿ Äa¿ Ä®¿ Ä’¿ Ä€¿ Å¿ Å¿ Å9¿ Å:¿ Åg¿ Åm¿ Åü¿ Å•¿ ÅÔ¿ Ç)¿ Ç/¿ Ça¿ Ç}¿ Çû¿ Çü¿ Ç—¿ É¿ É¿ É%¿ Éd¿ Ée¿ Éq¿ Éî¿ É¿¿ É‘¿ É⁄¿ Ñ¿ Ñ-¿ Ñb¿ Ñf¿ Ñg¿ Ñs¿ Ñ∏¿ Ñ„¿ Ö3¿ Öè¿ Öì¿ Öï¿ Öñ¿ ÖÂ¿ Ö˙¿ Ö˛¿ ÜN¿ Üb¿ Üm¿ Ü§¿ Ü…¿ ÜÁ¿ Ü˘¿ á¿ á¿ á.¿ áA¿ áS¿ ád¿ ás¿ áÖ¿ áñ¿ á≠¿ á¡¿ á“¿ áË¿ á˚¿ à¿ à!¿ àD¿ àU¿ àh¿ à|¿ àí¿ àß¿ à∑¿ àÃ¿ àÂ¿ â¿ â¿ â'¿ âA¿ âQ¿ âk¿ âÑ¿ âß¿ â¿¿ â„¿ âÚ¿ ä¿ ä¿ ä5¿ äM¿ ä_¿ äx¿ äà¿ äû¿ äµ¿ äÕ¿ ä‚¿ ä˘¿ ã¿ ã#¿ ã4¿ ãD¿ ãV¿ ã¿ ã©¿ ãÕ¿ ãÚ¿ å¿ å¿ åE¿ åk¿ å}¿ åë¿ å≤¿ ç&¿ çö¿ é2¿ é ¿ è:¿ è≥¿ ê¿ ê¿ êc¿ êä¿ êê¿ êﬁ¿ ë)¿ ë[¿ ër¿ ës¿ ë∏¿ ë˝¿ í¿ í¿ íS¿ íó¿ íπ¿ íø¿ í¸¿ ì¿ ì¿ ìY¿ ìù¿ ì◊¿ ì›¿ î¿ îT¿ îê¿ î†¿ î¶¿ îÂ¿ î˙¿ î˚¿ ï?¿ ïx¿ ï~¿ ïø¿ ïˇ¿ ñ¿ ñ$¿ ñ%¿ ño¿ ñ∞¿ ñ¿¿ ñ∆¿ ó¿ ó¿ ó¿ ój¿ ó≤¿ ó∏¿ ò¿ ò-¿ òE¿ òF¿ òä¿ òê¿ ò›¿ òÔ¿ ô¿ ô¿ ôH¿ ôN¿ ôû¿ ôË¿ ôˆ¿ ö
¿ ö¿ öO¿ öU¿ ö§¿ öÚ¿ õ¿ õ-¿ õ.¿ õv¿ õ|¿ õ∆¿ õÿ¿ õÒ¿ õÚ¿ ú6¿ ú<¿ úÉ¿ úú¿ ú≤¿ ú≥¿ ú˝¿ ù¿ ù¿ ùV¿ ù\¿ ùå¿ ùí¿ ù’¿ ùÌ¿ ùÓ¿ û/¿ û5¿ û|¿ ûÇ¿ û‘¿ ü¿ üo¿ üÆ¿ ü«¿ ü»¿ †	¿ †¿ †`¿ ††¿ †¶¿ †¯¿ °B¿ °ì¿ °“¿ °È¿ °Í¿ ¢7¿ ¢=¿ ¢ç¿ ¢Œ¿ ¢ˆ¿ ¢˜¿ £1¿ £7¿ £Ü¿ £◊¿ £›¿ §-¿ §z¿ §å¿ §í¿ §‚¿ •¿ •¿ •X¿ •¶¿ •Û¿ ¶+¿ ¶A¿ ¶B¿ ¶y¿ ¶¿ ¶Ã¿ ß¿ ßa¿ ßy¿ ßz¿ ß»¿ ß◊¿ ß›¿ ®'¿ ®a¿ ®g¿ ®ú¿ ®µ¿ ®∂¿ ©¿ ©1¿ ©7¿ ©h¿ ©∂¿ ©Ï¿ ©Ú¿ ™¿ ™¿ ™T¿ ™p¿ ™ã¿ ™å¿ ™Ÿ¿ ™ﬂ¿ ™Ô¿ ™ı¿ ´D¿ ´^¿ ´_¿ ´ò¿ ´û¿ ´Æ¿ ´¥¿ ´˙¿ ¨¿ ¨¿ ¨X¿ ¨^¿ ¨™¿ ¨˜¿ ≠*¿ ≠0¿ ≠~¿ ≠Ã¿ Æ¿ Æ_¿ ÆÆ¿ Æÿ¿ Æﬁ¿ ÆÓ¿ ÆÙ¿ ØE¿ Øú¿ Ø∂¿ Ø∑¿ ∞¿ ∞¿ ∞¿ ∞h¿ ∞|¿ ∞Ç¿ ∞Ã¿ ±¿ ±"¿ ±#¿ ±r¿ ±Ñ¿ ±ä¿ ±◊¿ ±Î¿ ±Ò¿ ≤:¿ ≤Y¿ ≤z¿ ≤{¿ ≤æ¿ ≥¿ ≥¿ ≥T¿ ≥Z¿ ≥¶¿ ≥Û¿ ¥-¿ ¥3¿ ¥Ö¿ ¥»¿ ¥Œ¿ µ¿ µ"¿ µx¿ µ¶¿ µª¿ µ◊¿ µÿ¿ ∂¿ ∂¿ ∂a¿ ∂ö¿ ∂†¿ ∂Ô¿ ∑¿ ∑	¿ ∑¿ ∑¿ ∑p¿ ∑î¿ ∑„¿ ∑˙¿ ∑˚¿ ∏N¿ ∏T¿ ∏û¿ ∏Ë¿ ∏Ó¿ π=¿ πQ¿ πW¿ πg¿ πm¿ πΩ¿ πÏ¿ ∫*¿ ∫U¿ ∫V¿ ∫ó¿ ∫ù¿ ∫Ï¿ ª%¿ ª+¿ ªz¿ ªé¿ ªî¿ ª§¿ ª™¿ ª˚¿ º¿ ºn¿ ºÖ¿ ºÜ¿ º◊¿ ºÏ¿ ºÚ¿ Ω<¿ ΩÜ¿ Ωå¿ Ω€¿ ΩÔ¿ Ωı¿ æ¿ æ¿ æ[¿ æä¿ æ»¿ æÛ¿ æÙ¿ ø:¿ øÖ¿ øã¿ ø÷¿ ¿!¿ ¿9¿ ¿?¿ ¿x¿ ¿¥¿ ¿∫¿ ¿ ¿ ¿–¿ ¡¿ ¡N¿ ¡ú¿ ¡Ø¿ ¡œ¿ ¡–¿ ¬!¿ ¬n¿ ¬t¿ ¬≈¿ √¿ √7¿ √=¿ √v¿ √≤¿ √∏¿ √»¿ √Œ¿ ƒ¿ ƒV¿ ƒù¿ ƒ—¿ ƒ“¿ ≈¿ ≈c¿ ≈i¿ ≈¥¿ ≈ˇ¿ ∆¿ ∆¿ ∆V¿ ∆í¿ ∆ò¿ ∆®¿ ∆Æ¿ ∆˝¿ «,¿ «z¿ «ç¿ «≠¿ «Æ¿ «ˇ¿ »L¿ »R¿ »£¿ »Ì¿ …¿ …¿ …T¿ …ú¿ …¢¿ …≤¿ …∏¿  ¿  @¿  á¿  ª¿  º¿ À¿ À!¿ À'¿ Àu¿ ÀÆ¿ À¥¿ Ã¿ Ã¿ Ã¿ Ã+¿ Ã1¿ ÃÅ¿ Ã•¿ ÃÛ¿ Õ	¿ Õ
¿ Õ[¿ Õé¿ Õî¿ Õ›¿ Œ'¿ Œ-¿ Œz¿ Œé¿ Œî¿ Œ§¿ Œ™¿ Œ˘¿ œ(¿ œe¿ œè¿ œê¿ œŒ¿ œ‘¿ –%¿ –_¿ –í¿ –ò¿ –⁄¿ —$¿ —=¿ —>¿ —u¿ —{¿ — ¿ —–¿ “¿ “c¿ “¨¿ “˜¿ ”+¿ ”F¿ ”G¿ ”ê¿ ”°¿ ”ß¿ ”Û¿ ‘B¿ ‘y¿ ‘¿ ‘Œ¿ ‘˝¿ ‘˛¿ ’E¿ ’i¿ ’o¿ ’ü¿ ’≈¿ ’∆¿ ÷¿ ÷'¿ ÷-¿ ÷{¿ ÷…¿ ÷¿ ◊¿ ◊¿ ◊\¿ ◊b¿ ◊≠¿ ◊¸¿ ÿ¿ ÿ#¿ ÿm¿ ÿæ¿ Ÿ¿ Ÿ¿ Ÿ¿ Ÿ#¿ Ÿs¿ Ÿë¿ Ÿ∑¿ Ÿ∏¿ Ÿﬂ¿ ŸÂ¿ ⁄4¿ ⁄:¿ ⁄J¿ ⁄P¿ ⁄ô¿ ⁄Ø¿ ⁄∞¿ ⁄›¿ ⁄„¿ €3¿ €É¿ €ë¿ €ó¿ €Â¿ ‹,¿ ‹2¿ ‹¿ ‹œ¿ ›¿ ›Y¿ ›v¿ ›w¿ ›™¿ ›∞¿ ﬁ ¿ ﬁ;¿ ﬁA¿ ﬁè¿ ﬁﬁ¿ ﬁ¿ ﬁˆ¿ ﬂC¿ ﬂî¿ ﬂÂ¿ ‡2¿ ‡?¿ ‡b¿ ‡c¿ ‡ó¿ ‡ù¿ ‡Ï¿ ·:¿ ·Y¿ ·_¿ ·Ø¿ ·˚¿ ‚F¿ ‚ï¿ ‚®¿ ‚Ã¿ ‚Õ¿ „¿ „¿ „W¿ „•¿ „ƒ¿ „ ¿ ‰¿ ‰g¿ ‰¥¿ Â¿ Â¿ Â<¿ Â=¿ Âo¿ Âu¿ Âƒ¿ Ê¿ Ê/¿ Ê5¿ ÊÉ¿ Êœ¿ Á¿ Ái¿ Á|¿ Áû¿ Áü¿ Á”¿ ÁŸ¿ Ë(¿ Ëv¿ Ëì¿ Ëô¿ ËÈ¿ È5¿ ÈÇ¿ È“¿ ÈÂ¿ Í	¿ Í
¿ Í<¿ ÍB¿ Íè¿ Í”¿ ÍŸ¿ Î¿ Îl¿ Îr¿ Îæ¿ Ï¿ Ï&¿ ÏH¿ ÏI¿ Ï{¿ ÏÅ¿ ÏŒ¿ Ì¿ Ì¿ Ì^¿ Ì´¿ Ì±¿ Ìˇ¿ ÓO¿ Ói¿ Óã¿ Óå¿ Ó∫¿ Ó¿¿ Ô¿ Ô¿ Ô]¿ ÔÜ¿ Ô§¿ Ô•¿ Ô“¿ Ôÿ¿ !¿ 2¿ 8¿ á¿ ∞¿ Õ¿ Œ¿ ˝¿ Ò¿ ÒJ¿ ÒP¿ Òü¿ Ò»¿ ÒÁ¿ ÒË¿ Ú.¿ Ú4¿ Ú~¿ Ú©¿ ÚØ¿ Ú˝¿ Û#¿ Û^¿ Û_¿ Û¶¿ Û¨¿ Ûˆ¿ Ù"¿ Ù(¿ Ùx¿ Ùû¿ Ù⁄¿ Ù€¿ ı¿ ı"¿ ıl¿ ıì¿ ıô¿ ıÈ¿ ˆ¿ ˆE¿ ˆF¿ ˆà¿ ˆé¿ ˆÿ¿ ˆˇ¿ ˜¿ ˜U¿ ˜{¿ ˜≤¿ ˜≥¿ ˜È¿ ˜Ô¿ ¯@¿ ¯ä¿ ¯ê¿ ¯€¿ ˘¿ ˘J¿ ˘K¿ ˘|¿ ˘Ç¿ ˘”¿ ˘˘¿ ˘ˇ¿ ˙N¿ ˙k¿ ˙é¿ ˙è¿ ˙“¿ ˙ÿ¿ ˚&¿ ˚d¿ ˚¨¿ ˚ˆ¿ ¸ ¿ ¸&¿ ¸w¿ ¸»¿ ˝¿ ˝¿ ˝,¿ ˝2¿ ˝Ç¿ ˝´¿ ˝¸¿ ˛,¿ ˛~¿ ˛±¿ ˛≤¿ ˛ı¿ ˛˚¿ ˇC¿ ˇÉ¿ ˇœ¿ ¿ C¿ I¿ ö¿ Î¿9¿?¿O¿U¿¢¿¿¿¿E¿F¿Ü¿µ¿ª¿	¿W¿ß¿Ô¿ı¿G¿í¿≤¿˛¿¿ ¿q¿ø¿≈¿’¿€¿(¿F¿[¿z¿{¿¨¿≤¿Ò¿˜¿D¿ì¿±¿“¿”¿"¿(¿r¿¡¿	¿	`¿	f¿	v¿	|¿	ƒ¿
¿
¿
¿
`¿
ã¿
‚¿5¿é¿Á¿9¿Å¿Á¿/¿ï¿Ê¿^¿Ø¿'¿m¿—¿¿Ç¿Â¿Z¿^¿_¿k¿Ì¿Ô¿¿5¿M¿s¿ò¿ö¿õ¿ ¿Œ¿¿e¿≤¿œ¿¿!¿'¿w¿â¿õ¿©¿…¿Ë¿¿¿Y¿_¿ñ¿≠¿ª¿€¿˛¿¿4¿G¿K¿L¿M¿ì¿ò¿˚¿]¿é¿’¿÷¿¯¿¿l¿à¿å¿ç¿œ¿’¿%¿F¿X¿Y¿Ñ¿ä¿”¿#¿Q¿W¿ü¿Î¿%¿:¿E¿F¿k¿l¿z¿{¿’¿€¿"¿s¿Ç¿™¿¡¿„¿¿m¿Å¿á¿ã¿å¿À¿Â¿ˇ¿¿k¿Ö¿ö¿Æ¿¥¿∏¿π¿¿¿X¿l¿r¿¬¿ ¿ b¿ ∞¿ ﬂ¿ Â¿!,¿!h¿!n¿!™¿!˘¿"
¿"+¿",¿"q¿"w¿"»¿"‹¿"‚¿#2¿#Å¿#–¿$¿$¿$[¿$a¿$´¿$»¿$…¿%¿%¿%^¿%®¿%¿&:¿&ä¿&ó¿&ù¿&Í¿'2¿'8¿'H¿'N¿'í¿'±¿'≤¿'˛¿(¿(L¿(õ¿(Î¿)¿)3¿)4¿)Y¿)_¿)Æ¿)¸¿*B¿*^¿*d¿*±¿*ˇ¿+ ¿+_¿+`¿+m¿+n¿+Ω¿+√¿,¿,<¿,Ñ¿,®¿,©¿,˜¿,˝¿-I¿-ñ¿-—¿-Ù¿.0¿.W¿.Å¿.¨¿.∫¿.¿¿.‰¿.ˆ¿.˙¿.˚¿/F¿/L¿/ù¿/Õ¿/”¿/„¿/È¿0¿02¿0ã¿0å¿0Ë¿18¿1ë¿1í¿1ì¿1°¿1¢¿1Ï¿2¿2¿2^¿2≠¿2¿¿2Û¿2Ù¿3/¿3u¿3Ö¿3∆¿3˝¿4&¿4J¿4]¿4g¿4h¿4†¿4Ω¿4Û¿5¿5¿5¿5R¿5m¿5s¿5è¿5¨¿5‚¿5˝¿6#¿6h¿6†¿6ø¿6À¿6Á¿6Ò¿6˘¿6ˇ¿74¿7V¿7z¿7∆¿8¿8U¿8ù¿8’¿9 ¿9
¿9+¿9G¿9a¿9i¿9o¿9º¿9œ¿9ﬂ¿:¿:X¿:õ¿: ¿;¿;F¿;T¿;e¿;û¿;Á¿<¿<I¿<Y¿<∏¿=G¿=∆¿=‘¿=‡¿=Í¿>¿>M¿>ƒ¿?@¿?p¿?è¿?ù¿?ß¿?Ø¿?Û¿?Ù¿@¿@J¿@o¿@w¿@√¿@÷¿@‡¿@·¿A¿AC¿Ab¿Añ¿AÀ¿AÁ¿A¯¿B¿B
¿B¿B-¿BB¿BV¿B\¿B`¿Ba¿Bú¿B÷¿BÏ¿BÌ¿C¿CY¿CZ¿Cå¿Cí¿C„¿D/¿DD¿Dy¿Dñ¿DÃ¿DÎ¿D˝¿E¿E¿E¿E¿E¿EH¿EN¿Eù¿EÊ¿F¿FM¿Fj¿F†¿F‰¿F¸¿G¿G¿G¿G%¿G)¿G*¿G^¿Gd¿G∏¿Gﬂ¿G˘¿G˙¿HS¿HY¿Hé¿Hî¿H ¿HÒ¿HÚ¿I'¿I-¿Ip¿Iò¿I≤¿I≥¿IÁ¿IÌ¿J=¿JÖ¿Jã¿J÷¿JÒ¿K¿K¿K0¿KR¿Kt¿Kï¿Kµ¿Kª¿Kø¿K¿¿K‹¿L¿L¿L¿LG¿Li¿L®¿L©¿LÍ¿L¯¿L˛¿Lˇ¿M9¿MK¿ML¿M}¿MŒ¿M€¿N¿N
¿N¿N¿N4¿Nn¿Nr¿Ns¿Nù¿N¿¿N–¿NÒ¿O¿O2¿O:¿OÉ¿Oñ¿O†¿O∫¿OŒ¿OÎ¿OÒ¿P¿P8¿P<¿P=¿Pf¿Pâ¿P±¿PÀ¿Pﬂ¿Pı¿P˚¿Pˇ¿Q ¿Q5¿QJ¿Qp¿Qå¿Q†¿QÀ¿R¿R`¿R~¿RÑ¿R°¿R»¿R⁄¿R¿S¿S
¿S'¿S]¿Sz¿SÇ¿Sà¿Så¿Sç¿Sæ¿S”¿SÂ¿T¿T,¿T_¿T}¿T¢¿Tµ¿TÒ¿U¿UD¿Uë¿U¡¿UÂ¿Uˇ¿V	¿V¿V¿V[¿Vú¿Væ¿V–¿V‘¿V’¿VÎ¿VÏ¿W¿W¿W+¿W9¿W?¿WR¿Wf¿Wõ¿Wø¿W≈¿W…¿W ¿X¿XR¿XÜ¿X∞¿X⁄¿Y¿YX¿Y†¿Y∆¿YÈ¿Z¿ZB¿Zu¿Z™¿Z·¿[¿[K¿[|¿[Ø¿[‰¿\!¿\w¿\π¿\Í¿]¿]¿]¿]2¿]3¿]Ö¿]Ò¿]Ú¿^j¿^ü¿^†¿^‘¿^⁄¿_*¿_K¿_f¿_g¿_ï¿_ﬂ¿_‡¿`¿`¿`E¿`Ö¿`Ü¿`∆¿`Ó¿a¿a ¿aJ¿aP¿aâ¿aè¿a…¿a¯¿a˘¿b@¿bF¿b¿bÖ¿bæ¿b˙¿c?¿c@¿c¿cÖ¿cæ¿cƒ¿c˛¿d-¿d.¿do¿dê¿dñ¿dœ¿d’¿e¿eJ¿eè¿eê¿e·¿e˚¿f¿fO¿fm¿fs¿f¨¿f≤¿fı¿g6¿g7¿gÜ¿g‘¿g⁄¿h(¿hF¿hL¿hÖ¿hã¿hÕ¿i¿ir¿is¿iƒ¿iﬁ¿i‰¿j2¿jP¿jV¿jè¿jï¿jÿ¿k¿k¿ki¿k∑¿kΩ¿l¿l)¿l/¿lh¿ln¿l∞¿l˛¿mU¿mV¿m§¿m™¿m„¿mÈ¿n"¿nO¿nP¿nù¿n¡¿n«¿o ¿o¿o>¿ox¿oª¿oº¿oÒ¿o˜¿p0¿pR¿p}¿p~¿pœ¿pÚ¿p¯¿q@¿qê¿qπ¿qø¿qœ¿q’¿r¿r^¿r´¿r—¿s ¿s¿sO¿sU¿sü¿sÏ¿t;¿tÑ¿t‘¿u¿u#¿u9¿uÖ¿u≠¿u≥¿v¿vH¿vn¿vt¿vƒ¿wE¿wK¿wõ¿wË¿x5¿xY¿xg¿xÅ¿xû¿x∏¿x‹¿y¿y(¿yD¿yk¿yç¿y¨¿y–¿yﬂ¿yÏ¿y˜¿yˇ¿z	¿z¿z!¿z1¿z7¿zÅ¿z—¿z˜¿{&¿{'¿{p¿{Å¿{¿¿{Í¿{Î¿|;¿|S¿|â¿|»¿|…¿}¿}*¿}0¿}~¿}Ã¿}Û¿~ ¿~>¿~?¿~ê¿~º¿~Ú¿¿¿c¿Å¿™¿¿¿¡¿Ä¿Ä¿Ä`¿Äl¿Äû¿Ä∏¿Äπ¿Äˇ¿Å'¿Å<¿Å=¿Åç¿Åü¿Å•¿Åı¿ÇA¿Çá¿Çç¿Çù¿Ç£¿ÇÌ¿É¿É9¿É:¿Éâ¿Éõ¿É°¿É‹¿É‚¿ÉÚ¿É¯¿ÑK¿Ñ~¿Ñö¿Ñõ¿ÑÍ¿Ñ¸¿Ö¿Ö=¿ÖC¿ÖS¿ÖY¿Ö´¿Öﬁ¿Ö˙¿Ö˚¿ÜE¿Üb¿Üh¿Ü∂¿á ¿á¿á¿á+¿á1¿áq¿á´¿áŸ¿áÒ¿áÚ¿à>¿àP¿àV¿à£¿à∑¿àΩ¿â¿âO¿â}¿âï¿âñ¿âÂ¿â˜¿â˝¿äJ¿ä^¿äd¿ä≥¿ä€¿ã¿ã-¿ã.¿ãy¿ã≈¿å¿å1¿åd¿åe¿åå¿å¨¿å÷¿å◊¿ç¿ç/¿ç0¿çÄ¿çÅ¿ç–¿é¿éE¿éK¿éò¿é∆¿éÃ¿è¿èk¿è¿è¨¿è‚¿èÈ¿ê¿êD¿êX¿ê^¿ê_¿êk¿êﬁ¿ë'¿ë.¿ë/¿ë∏¿ëπ¿ëﬁ¿í¿í<¿í}¿íæ¿íÎ¿ì
¿ì5¿ìX¿ì{¿ìó¿ì¬¿ì·¿î2¿îù¿î…¿îı¿ï¿ïJ¿ïz¿ï™¿ï˘¿ñ*¿ñQ¿ñ{¿ñ©¿ñ◊¿ó¿óH¿ór¿óí¿ó‡¿ó·¿ò¿ò;¿òA¿òB¿òN¿ò≠¿ô,¿ô3¿ô?¿ôû¿ö¿ö$¿ö(¿ö)¿ö*¿öb¿öh¿öπ¿õ¿õ8¿õ]¿õu¿õ¡¿õ¸¿ú¿úC¿ú|¿úµ¿ù ¿ùK¿ùÇ¿ù°¿ù‘¿û+¿û^¿ûç¿û≤¿û‡¿ü¿ü@¿ük¿üñ¿ü…¿üÔ¿†¿†;¿†X¿†è¿†ﬁ¿°/¿°5¿°V¿°Ñ¿°Ÿ¿¢¿¢+¿¢6¿¢â¿¢ë¿¢≈¿£¿£K¿£x¿£É¿£÷¿£ﬁ¿£‰¿£Â¿§¿§?¿§h¿§Ü¿§∑¿§∏¿§Á¿•¿•K¿•v¿•ß¿•⁄¿¶¿¶>¿¶o¿¶®¿¶À¿¶˜¿ß"¿ßG¿ßR¿ßS¿ßs¿ßú¿ß¶¿ß“¿®¿®¿®D¿®â¿®ì¿®»¿©¿©¿©4¿©W¿©a¿©Ç¿©≠¿©◊¿©·¿™4¿™â¿™ì¿™Ω¿™Ù¿´M¿´Å¿´¨¿´ª¿¨¿¨¿¨[¿¨¥¿¨Ó¿≠¿≠.¿≠Ö¿≠ë¿≠õ¿≠Œ¿≠ˇ¿Æ+¿Æc¿Æñ¿Æ°¿Æ”¿Ø¿Ø/¿Øf¿Øô¿Ø§¿Ø•¿ØÒ¿ØÚ¿∞¿∞¿∞¿∞¿∞2¿∞F¿∞ö¿∞∏¿∞‡¿±¿±B¿±|¿±¢¿±∫¿±ﬁ¿±¿≤¿≤(¿≤D¿≤\¿≤Ä¿≤™¿≤ ¿≤¿≥¿≥@¿≥f¿≥å¿≥∫¿¥¿¥'¿¥?¿¥F¿¥J¿¥K¿¥{¿¥¢¿¥¶¿¥ß¿¥·¿µ,¿µw¿µx¿µ◊¿µÎ¿∂¿∂L¿∂x¿∂≥¿∂Ê¿∑¿∑$¿∑T¿∑¢¿∑⁄¿∏
¿∏F¿∏N¿∏ü¿∏Ø¿∏Â¿π¿πa¿πi¿πo¿πò¿π÷¿∫)¿∫q¿∫∫¿ª	¿ª¿ª¿ª/¿ª=¿ªV¿ªs¿ªä¿ª≠¿ª◊¿º¿º9¿ºq¿º≠¿º˜¿Ω3¿Ω}¿Ω•¿Ω€¿Ω¯¿æ!¿æ|¿æ€¿ø¿ø=¿øv¿ø®¿ø”¿¿¿¿G¿¿Ç¿¿√¿¿‰¿¡¿¡?¿¡u¿¡Õ¿¡Ù¿¬#¿¬*¿¬>¿¬B¿¬C¿¬ì¿¬«¿√¿√(¿√i¿√†¿√¬¿√»¿√…¿√˙¿ƒ$¿ƒÄ¿ƒç¿ƒœ¿ƒ˘¿ƒˇ¿≈ ¿≈O¿≈û¿≈Î¿∆2¿∆Ä¿∆«¿∆Í¿«A¿«Ö¿«º¿«›¿»¿»(¿»l¿»®¿»Í¿…0¿…Ä¿…†¿…√¿…ﬂ¿…È¿ ¿ 0¿ 8¿ 9¿ a¿ v¿ ê¿ ¨¿ ∂¿ º¿ Ω¿À	¿À%¿ÀD¿À\¿Àb¿Àä¿Àã¿Àß¿ÀÒ¿Ã¿Ã¿Ã¿ÃL¿ÃR¿Ãõ¿ÃÏ¿Õ¿Õ*¿Õ8¿Õ>¿Õ~¿ÕÇ¿ÕÉ¿Õ∫¿Õ”¿Õ‚¿Œ ¿Œ3¿Œ=¿ŒP¿ŒT¿ŒU¿Œa¿Œ∞¿Œ±¿ŒΩ¿œ¿œ-¿œH¿œZ¿œÆ¿–¿–:¿–@¿–À¿—6¿—¿¿“ ¿“:¿“ò¿“•¿” ¿”¿”6¿”|¿”…¿‘L¿‘Ñ¿‘å¿‘ˆ¿‘¸¿’q¿÷¿÷g¿÷´¿÷º¿◊¿◊t¿ÿ¿ÿS¿ÿ≠¿Ÿ¿Ÿf¿ŸØ¿Ÿ¯¿⁄S¿⁄Æ¿⁄ı¿€@¿€¶¿‹	¿‹5¿‹§¿‹™¿›¿›X¿›∑¿ﬁ¿ﬁa¿ﬁΩ¿ﬂ¿ﬂs¿ﬂ»¿‡¿‡f¿‡∑¿‡ª¿‡º¿·¿·
¿·Z¿·ä¿·ñ¿·Æ¿·Õ¿·Î¿‚!¿‚r¿‚ä¿‚ë¿„@¿„D¿„E¿„Q¿„w¿„â¿„»¿‰¿‰ ¿‰I¿‰[¿‰n¿‰Ç¿‰†¿‰ß¿‰´¿‰¨¿‰∏¿Â9¿Âi¿ÂÕ¿Âﬁ¿Â‚¿Â„¿Ê2¿Êá¿Ê§¿Ê ¿Ê–¿Ê—¿ÊÚ¿Á.¿Á{¿ÁÇ¿ÁÜ¿Áà¿Áâ¿Á”¿Ë¿Ë¿Ëe¿Ë≤¿È¿È[¿È¶¿È◊¿È‰¿Í¿Í¿Í7¿ÍW¿ÍX¿Í°¿Í«¿ÍÕ¿ÍÌ¿ÍÛ¿ÎG¿Îô¿ÎÈ¿Î˝¿Ï¿Ï¿Ïd¿ÏÜ¿Ïù¿Ïû¿Ï≈¿Ï·¿Ï‚¿ÏÓ¿Ì¿Ì;¿Ì?¿ÌA¿ÌB¿Ìë¿Ì«¿ÌÀ¿Ó¿Ó[¿Ós¿Óí¿Ó≥¿Óπ¿Ó∫¿Ô¿Ô&¿Ô,¿Ôx¿Ôù¿Ôπ¿Ô∫¿Ôﬂ¿Ô‡¿¿I¿J¿V¿É¿∏¿º¿Ω¿Ò¿Ò¿Òa¿Òë¿Ò≈¿ÒÙ¿Ú#¿Úq¿Úß¿Ú¡¿Úﬁ¿Û&¿Û;¿ÛE¿Û_¿Û}¿Û…¿Ûﬁ¿ÛË¿ÛÓ¿Ù ¿Ù¿ÙK¿Ùk¿Ù~¿Ùß¿Ù«¿Ù€¿ı¿ı&¿ıN¿ıY¿ı}¿ıå¿ı†¿ı®¿ı¿¿ıÊ¿ı¸¿ˆ¿ˆ
¿ˆ'¿ˆ(¿ˆV¿ˆì¿ˆô¿ˆö¿ˆ∂¿ˆ˝¿˜¿˜¿˜¿˜_¿˜e¿˜¥¿˜’¿˜€¿¯)¿¯v¿¯∆¿¯Ì¿¯Û¿˘>¿˘é¿˘‹¿˙+¿˙W¿˙Ç¿˙ü¿˙≈¿˙Ÿ¿˙ﬂ¿˚#¿˚Q¿˚¿˚û¿˚Ì¿¸!¿¸k¿¸∑¿¸‹¿¸¿¸˙¿¸˚¿˝X¿˝ê¿˝ƒ¿˝¸¿˛G¿˛å¿˛◊¿ˇ"¿ˇT¿ˇ|¿ˇÜ¿ˇé¿ˇî¿ˇï¿ˇæ¿ˇÁ¿ L¿ ò¿ ‰¿'¿F¿d¿l¿û¿¶¿ß¿¡¿Ê¿ˆ¿˛¿¿;¿W¿_¿x¿~¿¿…¿'¿+¿-¿.¿o¿¥¿‘¿Ê¿Í¿%¿K¿p¿r¿s¿√¿—¿’¿#¿t¿Æ¿≤¿‰¿¿¿s¿‹¿	¿9¿Z¿¶¿⁄¿Ú¿¿S¿f¿n¿Ü¿¢¿Ï¿ˇ¿	¿	¿	¿	¿	h¿	Ü¿	ó¿	æ¿	‹¿	Ó¿
¿
5¿
[¿
d¿
Ü¿
ì¿
•¿
´¿
¡¿
„¿
˜¿
˝¿¿¿¿3¿Å¿ê¿í¿ì¿⁄¿¿¿]¿a¿∞¿¯¿=¿T¿l¿~¿ö¿†¿°¿⁄¿ˆ¿˜¿6¿<¿{¿ç¿∞¿±¿˛¿¿!¿"¿.¿Z¿é¿∂¿º¿Î¿Ô¿Ò¿Ú¿<¿W¿[¿™¿˜¿#¿Q¿•¿∏¿›¿„¿#¿[¿á¿∆¿˘¿¿5¿>¿D¿H¿I¿õ¿Í¿¿¿X¿¨¿–¿¿?¿Ä¿ø¿¿¿Û¿˘¿-¿b¿c¿o¿Ç¿Æ¿¸¿¿¿/¿K¿`¿d¿e¿õ¿∫¿¿¿U¿¶¿Ô¿¿I¿j¿é¿ ¿¸¿¿¿#¿$¿k¿í¿ﬂ¿4¿e¿Æ¿Ì¿˜¿ˇ¿ ¿$¿9¿A¿B¿ã¿«¿Ë¿>¿ˆ¿¿	¿
¿@¿ì¿Ô¿ ¿3¿ù¿Î¿ˆ¿ 	¿ _¿ ≤¿ ﬁ¿ È¿ ¸¿!Y¿!µ¿"¿"¿"¿"$¿"%¿"D¿"R¿"X¿"è¿"œ¿"Ù¿#z¿#ï¿#≥¿$¿$4¿$n¿$ã¿$¿%¿%g¿%≈¿&¿&`¿&≈¿&—¿&€¿&„¿&È¿'9¿'û¿'”¿(0¿(r¿(∑¿(˝¿)>¿)b¿)£¿)Ê¿*,¿*p¿*Ö¿*Ø¿*Ì¿*ı¿*˚¿+¿+O¿+¶¿,&¿,,¿,T¿,k¿,o¿,p¿,Ã¿,Ù¿-Q¿-á¿-µ¿-Œ¿. ¿.
¿.0¿.:¿.@¿.Ä¿.ì¿.ô¿.æ¿.¬¿.√¿/¿/¿/f¿/à¿/é¿/€¿/˜¿0@¿0ô¿0¥¿0…¿0◊¿0›¿0ﬁ¿1¿1j¿1é¿1î¿1ò¿1ô¿2¿2:¿2l¿2•¿2∫¿2¬¿3¿3¿31¿3D¿3J¿3z¿3ó¿3Ã¿3˚¿4¿4-¿47¿4L¿4V¿4}¿4É¿4ü¿4„¿5S¿5r¿5å¿5ñ¿5û¿5§¿5∆¿5 ¿5À¿6¿6#¿6r¿6î¿6ö¿6Á¿7¿7W¿7ä¿7¢¿7∞¿7∂¿8!¿8<¿8Q¿8W¿8[¿8\¿8h¿8ó¿8ô¿8ö¿8‹¿8¿8Ù¿9>¿9R¿9q¿9r¿9í¿9ì¿9·¿9¸¿:¿:Q¿:†¿:Ï¿;¿;¿;Y¿;£¿;–¿;÷¿<#¿<Y¿<}¿<§¿<€¿<¸¿= ¿=¿=P¿=V¿=û¿=Î¿>7¿>=¿>ä¿> ¿?¿?%¿?+¿?y¿?»¿?Ú¿@¿@¿@j¿@π¿@Ï¿@Ú¿A?¿Aç¿A¡¿B¿B]¿Bé¿Bî¿B·¿C0¿CS¿CT¿C£¿CÒ¿D¿D¿DV¿D¢¿DÒ¿E¿E"¿Er¿E¿¿F¿F¿F]¿Fò¿F‘¿F’¿FÔ¿G)¿GI¿GJ¿Gu¿G{¿G…¿G˙¿H,¿HN¿HO¿Hõ¿H—¿H◊¿HÁ¿HÌ¿I¿IÇ¿IÉ¿I˙¿J¿J¿JC¿JI¿Jë¿J°¿JÌ¿K¿K1¿KO¿KS¿KT¿K¢¿K∑¿KΩ¿L¿L¿Lc¿Lã¿Lß¿L∏¿L¿¿Lƒ¿L≈¿LÚ¿L¯¿MH¿Mò¿M¶¿M¨¿M¯¿N?¿NE¿Nê¿Nﬁ¿O/¿O}¿OÕ¿P¿Pi¿P∑¿Pˇ¿QP¿Qê¿Qµ¿QÕ¿Q¿R)¿R=¿RA¿RB¿Ru¿R{¿RÀ¿S¿S¿SX¿Sß¿Sπ¿SÍ¿T¿T1¿Tp¿Tä¿Té¿Tè¿T√¿T…¿U¿Uf¿UÖ¿Uã¿U€¿V'¿Vr¿V¡¿V‘¿W¿W&¿WP¿Wê¿W´¿WØ¿W∞¿W·¿WÁ¿X&¿X,¿Xy¿X»¿XÊ¿Y¿Y/¿YV¿Yì¿Y´¿YØ¿Y∞¿YÂ¿YÎ¿Z:¿Zà¿Zß¿Z≠¿Z˛¿[J¿[ó¿[Á¿[˙¿\/¿\O¿\z¿\ª¿\◊¿\€¿\‹¿]¿]¿]c¿]±¿]Œ¿]‘¿^"¿^n¿^π¿_¿_¿_J¿_g¿_è¿_Õ¿_Ê¿_Í¿_Î¿`¿`%¿`t¿`¬¿`ﬂ¿`Â¿a5¿aÅ¿aŒ¿b¿b1¿bd¿bÉ¿b≠¿bÌ¿c¿c¿c¿c?¿cE¿cí¿c÷¿c‹¿d ¿dm¿ds¿dø¿e¿e'¿eV¿es¿eõ¿eŸ¿eÚ¿eˆ¿e˜¿f)¿f/¿f|¿f¿¿f∆¿g
¿gW¿g]¿g´¿g˚¿h¿hD¿ha¿hâ¿h«¿h‡¿h‰¿hÂ¿i¿i¿ia¿ig¿i∂¿iﬂ¿j¿j¿jC¿j}¿jí¿jñ¿jó¿jƒ¿j ¿k¿k$¿k*¿ky¿k¢¿k«¿kﬂ¿l¿l;¿lO¿lS¿lT¿lÉ¿lâ¿l–¿l÷¿m%¿mN¿mw¿më¿m∂¿mÒ¿n¿n¿n¿nB¿nH¿nñ¿nÊ¿o
¿o¿oY¿o°¿o√¿o˙¿p¿pG¿pâ¿p¶¿p™¿p´¿pÒ¿p˜¿qA¿ql¿qr¿q¿¿qÊ¿rB¿rx¿rπ¿r‘¿s"¿sT¿ss¿s{¿s®¿s¨¿s≠¿sÙ¿s˙¿tD¿tp¿tv¿t∆¿tÏ¿uJ¿uÅ¿u√¿uﬁ¿v-¿v_¿v~¿vÜ¿v¥¿v∏¿vπ¿v˙¿w ¿wJ¿wq¿ww¿w«¿wÌ¿x?¿xp¿x¨¿x«¿y¿yB¿ya¿yi¿yñ¿yö¿yõ¿y›¿y„¿z-¿zT¿zZ¿z™¿z–¿{$¿{V¿{ì¿{Æ¿{¯¿|*¿|I¿|Q¿|¿|É¿|Ñ¿|∫¿|¿¿}¿}[¿}a¿}¨¿}Ó¿~,¿~T¿~á¿~¢¿~‡¿¿j¿≤¿Œ¿ˆ¿Ä"¿Ä,¿Ä4¿ÄQ¿ÄU¿ÄV¿Äá¿Äç¿Äﬁ¿Å¿Å
¿ÅY¿Åv¿Å•¿Å√¿ÅÏ¿Ç¿Ç@¿Çn¿Çô¿Ç≠¿Çµ¿ÇÕ¿Ç—¿Ç“¿É¿É¿Éi¿Éß¿ÉÔ¿Ñ9¿Ñc¿Ñi¿Ñ∫¿Ö¿ÖY¿Ö_¿Öo¿Öu¿Ö≈¿ÖÓ¿Ü@¿Üë¿Üø¿Ü¯¿áG¿áq¿áu¿áv¿áπ¿áø¿à¿àG¿àì¿à›¿â¿â¿â^¿âØ¿â˝¿ä¿ä¿ä¿äf¿äÑ¿ä÷¿ã'¿ãU¿ãé¿ã›¿å¿å¿å¿åI¿år¿åå¿å±¿åÏ¿ç¿ç¿ç¿çV¿çs¿çy¿ç∆¿é¿ée¿é±¿é∑¿è¿èV¿èà¿èÒ¿ê7¿êà¿ê£¿êÕ¿ë¿ëB¿ëF¿ëG¿ëî¿ë¶¿ë˛¿ëˇ¿íN¿í`¿íf¿í¥¿ì¿ì)¿ì/¿ì~¿ì…¿î¿î7¿îd¿îÇ¿î´¿î∆¿î‹¿î˙¿î˛¿îˇ¿ïK¿ïQ¿ïô¿ïË¿ñ8¿ñj¿ññ¿ñ≠¿ñœ¿ñÎ¿ó	¿ó¿ó¿óZ¿ó`¿ó≠¿óπ¿óÎ¿ò¿ò*¿òO¿ò]¿òc¿òÇ¿ò†¿ò§¿ò•¿òÔ¿ô ¿ô(¿ô=¿ô]¿ô}¿ôã¿ôë¿ô´¿ô…¿ôÕ¿ôŒ¿ö¿ö5¿öc¿ö{¿öû¿ö¡¿öœ¿ö’¿öÚ¿õ¿õ¿õ¿õa¿õs¿õy¿õ∆¿õ⁄¿õ‡¿ú,¿úe¿úì¿ú´¿úŒ¿úÒ¿úˇ¿ù¿ù"¿ù@¿ùD¿ùE¿ùî¿ù¶¿ù¨¿ù˘¿û¿û¿û^¿û}¿û≥¿ûœ¿ûˆ¿ü¿ü+¿ü1¿üR¿üp¿üt¿üu¿ü∆¿†¿†¿†W¿†ú¿†⁄¿†‡¿°,¿°|¿°≠¿°·¿¢¿¢/¿¢M¿¢Q¿¢R¿¢ë¿¢ó¿¢„¿£-¿£v¿£≠¿§¿§}¿§Ã¿§Í¿•$¿•I¿•ê¿•î¿•ï¿•≈¿¶¿¶8¿¶F¿¶L¿¶ê¿¶¨¿¶æ¿¶ƒ¿¶»¿¶…¿ß	¿ß1¿ßL¿ßr¿ßê¿ßÆ¿ß≤¿ß≥¿ßÌ¿ßÛ¿®5¿®;¿®t¿®z¿®ä¿®ê¿®ﬁ¿©¿©)¿©Y¿©w¿©{¿©|¿©À¿©Ÿ¿©ﬂ¿™)¿™x¿™ƒ¿´¿´N¿´T¿´ç¿´ì¿´£¿´©¿´„¿¨¿¨[¿¨ï¿¨Ω¿¨€¿¨ﬂ¿¨‡¿≠0¿≠6¿≠x¿≠~¿≠∑¿≠Ω¿≠Õ¿≠”¿Æ!¿Æo¿Æµ¿Ø¿ØI¿Øx¿Øî¿Øƒ¿Ø‚¿ØÊ¿ØÁ¿∞6¿∞Z¿∞`¿∞™¿∞˘¿±E¿±é¿±œ¿±’¿≤¿≤¿≤$¿≤*¿≤d¿≤¥¿≤‰¿≥4¿≥d¿≥†¿≥‹¿¥¿¥>¿¥\¿¥`¿¥a¿¥õ¿¥ƒ¿¥ ¿µ¿µ¿µj¿µ¥¿µﬂ¿µÂ¿∂¿∂$¿∂4¿∂:¿∂ë¿∂“¿∑ ¿∑B¿∑`¿∑d¿∑e¿∑ü¿∑Â¿∑Î¿∏:¿∏Ñ¿∏Ø¿∏µ¿∏Ó¿∏Ù¿π¿π
¿πM¿πõ¿π‡¿∫,¿∫f¿∫Ñ¿∫à¿∫â¿∫√¿∫Ï¿∫Ú¿ª=¿ªC¿ªí¿ª‹¿º¿º¿ºF¿ºL¿º£¿º‰¿Ω¿ΩT¿Ωr¿Ωv¿Ωw¿Ω±¿Ω˜¿Ω˝¿æL¿æñ¿æ¡¿æ«¿ø ¿ø¿ø¿ø¿ø_¿ø≠¿øÚ¿¿>¿¿x¿¿ñ¿¿ö¿¿õ¿¿È¿¿Ô¿¡0¿¡6¿¡o¿¡u¿¡Ö¿¡ã¿¡ÿ¿¬¿¬¿¬M¿¬k¿¬o¿¬p¿¬¿¿¬·¿¬Á¿√0¿√¿√Ã¿ƒ¿ƒV¿ƒ\¿ƒï¿ƒõ¿ƒ´¿ƒ±¿ƒÍ¿≈$¿≈_¿≈ó¿≈Ω¿≈€¿≈ﬂ¿≈‡¿∆¿∆¿∆T¿∆v¿∆é¿∆Æ¿∆∆¿∆‰¿∆Ë¿∆È¿«2¿«C¿«Ç¿«¨¿«·¿«˙¿»¿»¿»*¿»H¿»L¿»M¿»ñ¿»º¿»‚¿»˝¿…¿…7¿…V¿…d¿…j¿…Ç¿…†¿…§¿…•¿…ˆ¿ ¿ ¿ b¿ ±¿ ≈¿ Î¿À¿À&¿À@¿À_¿Àm¿Às¿Àã¿À©¿À≠¿ÀÆ¿À˘¿Ã¿Ã¿Ã*¿Ã0¿Ã¿Ãæ¿Ãﬁ¿Õ¿Õ¿Õ¿ÕS¿ÕY¿Õi¿Õo¿Õº¿Õ˘¿Œ¿ŒG¿ŒK¿ŒL¿ŒÇ¿Œπ¿Œ’¿œ¿œ¿œ¿œ9¿œ?¿œã¿œÿ¿–¿–¿–_¿–≠¿–˚¿—@¿—è¿—π¿—ø¿—œ¿—’¿“+¿“j¿“â¿“∫¿“æ¿“ø¿”¿”3¿”i¿”ä¿”æ¿”‚¿‘ ¿‘¿‘¿‘P¿‘V¿‘£¿‘ˆ¿’H¿’Ä¿’Ω¿’‹¿÷¿÷¿÷¿÷a¿÷ª¿÷¡¿◊¿◊Z¿◊`¿◊©¿◊…¿ÿ9¿ÿY¿ÿç¿ÿΩ¿ÿ¡¿ÿ¬¿Ÿ ¿Ÿ¿ŸW¿Ÿ¶¿Ÿ€¿Ÿ·¿⁄1¿⁄U¿⁄[¿⁄™¿⁄◊¿⁄›¿€0¿€Ü¿€î¿‹¿‹ ¿‹S¿‹Ç¿‹Ü¿‹á¿‹ÿ¿›#¿›7¿›=¿›é¿›’¿›€¿ﬁ$¿ﬁC¿ﬁ∞¿ﬁœ¿ﬂ¿ﬂ:¿ﬂi¿ﬂm¿ﬂn¿ﬂ∫¿ﬂ‚¿ﬂË¿‡9¿‡Ä¿‡Ü¿‡œ¿‡Í¿·g¿·é¿·æ¿·Ò¿‚(¿‚,¿‚-¿‚~¿‚Ã¿‚“¿„#¿„_¿„e¿„Æ¿„¬¿‰/¿‰N¿‰Å¿‰∞¿‰¥¿‰µ¿Â¿Â;¿ÂA¿Âé¿Â÷¿Ê3¿Êb¿Ê°¿Ê•¿Ê¶¿ÊË¿Á'¿ÁG¿Áw¿Á{¿Á|¿Á≈¿Ë ¿Ë¿ËL¿ËP¿ËQ¿Ëú¿Ë’¿ËÚ¿È¿È#¿È$¿Èm¿È¢¿ÈΩ¿ÈË¿ÈÏ¿ÈÌ¿Í$¿ÍD¿ÍU¿ÍV¿Ír¿Íè¿Íù¿Í£¿Íπ¿Í◊¿Í€¿Í‹¿Î'¿Î`¿Î}¿Î™¿ÎÆ¿ÎØ¿ÎÏ¿ÎÚ¿Ï@¿Ïi¿ÏÇ¿ÏÉ¿Ï£¿Ï…¿ÏÍ¿Ï¯¿Ï˛¿Ì¿Ì7¿Ì;¿Ì<¿Ìá¿Ì¿¿Ì›¿Ó
¿Ó¿Ó¿ÓW¿Ód¿Óß¿Ó…¿Ó˚¿Óˇ¿Ô ¿Ô>¿ÔD¿Ôì¿Ô‰¿ÔÍ¿:¿á¿ô¿ü¿Ô¿Ò¿Ò¿Òe¿Ò≥¿Ú ¿Ú8¿Úq¿Úé¿Úª¿Úø¿Ú¿¿Ú˘¿Û8¿ÛX¿Ûà¿Ûå¿Ûç¿Û√¿Û…¿Û˚¿Ù8¿ÙW¿ÙÜ¿Ùä¿Ùã¿Ùµ¿Ùª¿ı
¿ıZ¿ıõ¿ıÿ¿ı˜¿ˆ&¿ˆ*¿ˆ+¿ˆV¿ˆ\¿ˆ´¿ˆ‰¿˜#¿˜C¿˜s¿˜w¿˜x¿˜»¿˜Û¿˜˘¿¯I¿¯ó¿¯‚¿˘¿˘d¿˘ç¿˘∆¿˘ ¿˘À¿˙¿˙H¿˙~¿˙ü¿˙À¿˙Ê¿˚¿˚ ¿˚$¿˚%¿˚u¿˚á¿˚ç¿˚›¿¸)¿¸o¿¸u¿¸Ö¿¸ã¿¸’¿˝¿˝!¿˝G¿˝b¿˝¿˝ù¿˝°¿˝¢¿˝Ò¿˛¿˛	¿˛D¿˛J¿˛Z¿˛`¿˛≥¿˛Ê¿ˇ¿ˇ)¿ˇD¿ˇb¿ˇÄ¿ˇÑ¿ˇÖ¿ˇ‘¿ˇÊ¿ˇÏ¿ '¿ -¿ =¿ C¿ ñ¿ …¿ Â¿¿'¿E¿c¿g¿h¿r¿s¿ª¿”¿Ÿ¿È¿Ô¿>¿N¿ë¿í¿›¿˘¿P¿Q¿x¿y¿»¿Ê¿Ï¿0¿Å¿ü¿•¿Ò¿B¿è¿ï¿•¿´¿Ï¿¿5¿`¿Ä¿Ñ¿Ö¿£¿§¿∂¿Ë¿˘¿¿"¿?¿E¿c¿g¿h¿´¿¨¿—¿“¿¿0¿6¿Ö¿ ¿	¿	L¿	_¿	e¿	õ¿	Ø¿	µ¿	›¿	Ò¿	˜¿
;¿
O¿
U¿
ô¿
≠¿
≥¿
ˇ¿¿¿s¿á¿ç¿û¿¢¿£¿Ô¿ı¿C¿g¿m¿º¿ˆ¿¸¿F¿ò¿“¿ ¿!¿"¿E¿S¿Y¿Ä¿”¿	¿*¿4¿>¿K¿r¿x¿≠¿¿¿9¿h¿ô¿ ¿˜¿#¿L¿¿Æ¿›¿¿¿>¿f¿à¿è¿ê¿ª¿‹¿˘¿ ¿&¿V¿Ñ¿¨¿·¿¿¿@¿q¿w¿©¿Ï¿Ú¿$¿g¿m¿ú¿…¿Ò¿%¿T¿[¿u¿ñ¿ú¿ù¿È¿Í¿0¿4¿5¿h¿ä¿Æ¿‡¿¿r¿†¿Ï¿¿0¿R¿~¿º¿Ë¿&¿P¿x¿î¿¥¿‘¿Ï¿¿@¿j¿ñ¿¬¿Í¿¿5¿c¿ç¿∑¿È¿¿K¿Å¿ß¿ƒ¿»¿ ¿À¿¿+¿J¿w¿}¿ ¿¿L¿^¿_¿é¿î¿„¿ ¿ ¿ ¿ ¿ B¿ t¿ ß¿ ‘¿!¿!¿!5¿!V¿!Z¿!©¿!˜¿"1¿"k¿"r¿"⁄¿"ﬁ¿#¿#-¿#1¿#2¿#Ç¿#Ñ¿#Ö¿#÷¿#Û¿#˜¿$D¿$î¿$Œ¿$“¿%¿%K¿%O¿%†¿%Ã¿%–¿%ﬁ¿%‚¿&&¿&Ñ¿&’¿'¿'D¿'E¿'ñ¿'©¿'Ø¿'Ô¿'ı¿(C¿(r¿(à¿(â¿(ï¿(ø¿(ı¿)t¿)u¿)ƒ¿)Â¿*¿*"¿*(¿*)¿*{¿*ä¿*∏¿*…¿*˛¿+¿+¿+¿+>¿+B¿+C¿+l¿+r¿+¬¿+Ÿ¿+ﬂ¿,0¿,Ä¿,Œ¿,€¿,Ë¿-¿-¿-(¿-m¿-ò¿-ﬁ¿-‚¿-‰¿-Â¿.+¿.6¿.:¿.Ä¿.¨¿.∞¿/ ¿/O¿/ê¿/ß¿/´¿/˜¿0$¿0(¿0t¿0Ω¿0ˇ¿15¿1e¿1µ¿1ª¿1Ê¿1˛¿2¿2 ¿2P¿2x¿2y¿2«¿3¿3'¿3-¿3{¿3»¿3ﬁ¿3ﬂ¿3Î¿4¿43¿4C¿4I¿4r¿4v¿4w¿4É¿4»¿4Û¿5;¿5?¿5A¿5B¿5ç¿5∑¿5ª¿6¿6R¿6V¿6•¿6¿7¿7S¿7ä¿7å    _kUnblockedUserActionsSemanticsTag"ChildSemanticsConfigurationsResult)ChildSemanticsConfigurationsResultBuilderCustomSemanticsActionAttributedStringAttributedStringPropertySemanticsData_SemanticsDiagnosticableNodeSemanticsHintOverridesSemanticsPropertiesdebugResetSemanticsIdCounterSemanticsNode_BoxEdge_SemanticsSortGroup_pointInParentCoordinates_childrenInDefaultOrder_TraversalSortNodeSemanticsOwnerSemanticsConfigurationDebugSemanticsDumpOrder_concatAttributedStringSemanticsSortKeyOrdinalSortKey_mergeHeadingLevels Ã˜