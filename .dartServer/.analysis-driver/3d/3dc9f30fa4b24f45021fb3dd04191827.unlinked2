ÄÛpoint	direction==toStringhashCode_currentOffset_currentLine_currentTextPosition_lineMetrics	_editable_isValidisValid_positionCache_getTextPositionForLinecurrentmoveNextmovePreviousmoveByOffset_foregroundRenderObject_backgroundRenderObjectdispose_updateForegroundPainterforegroundPainter_foregroundPainter_updatePainterpainter_painter_caretPainter_selectionPainter_autocorrectHighlightPainter_builtInForegroundPainters _cachedBuiltInForegroundPainters _createBuiltInForegroundPainters_builtInPainters_cachedBuiltInPainters_createBuiltInPaintersignorePointertextHeightBehaviortextWidthBasisdevicePixelRatio_devicePixelRatioobscuringCharacter_obscuringCharacterobscureText_obscureTextselectionHeightStyleselectionWidthStyletextSelectionDelegateselectionStartInViewport_selectionStartInViewportselectionEndInViewport_selectionEndInViewport_getTextPositionVerticalgetLineAtOffsetgetWordBoundarygetTextPositionAbovegetTextPositionBelow!_updateSelectionExtentsVisibility_setTextEditingValue_setSelectionmarkNeedsPaintsystemFontsDidChange	plainTexttext_textPainter_cachedAttributedValue_cachedCombinedSemanticsInfos_textIntrinsicsCache_textIntrinsics	textAligntextDirectionlocale
strutStylecursorColorbackgroundCursorColor_disposeShowCursor
showCursor_showCursor_showHideCursorhasFocus	_hasFocus	forceLine
_forceLinereadOnly	_readOnlymaxLines	_maxLinesminLines	_minLinesexpands_expandsselectionColortextScaleFactor
textScaler	selection
_selectionoffset_offsetcursorWidth_cursorWidthcursorHeight_cursorHeightpaintCursorAboveText_paintCursorOnTopcursorOffsetcursorRadiusstartHandleLayerLink_startHandleLayerLinkendHandleLayerLink_endHandleLayerLinkfloatingCursorAddedMarginfloatingCursorOn_floatingCursorOn_floatingCursorTextPositionenableInteractiveSelection_enableInteractiveSelectionselectionEnabledpromptRectColorsetPromptRectRangemaxScrollExtent_maxScrollExtent_caretMarginclipBehavior_clipBehavior_semanticsInfo_cachedChildNodesgetBoxesForSelectiondescribeSemanticsConfiguration_handleSetTextassembleSemanticsNode_createShowOnScreenFor_handleSetSelection#_handleMoveCursorForwardByCharacter$_handleMoveCursorBackwardByCharacter_handleMoveCursorForwardByWord_handleMoveCursorBackwardByWord_getNextWord_getPreviousWord_onlyWhitespaceattachdetachredepthChildrenvisitChildren_isMultiline_viewportAxis_paintOffset_viewportExtent_getMaxScrollExtent_hasVisualOverflowgetEndpointsForSelectiongetRectForComposingRangegetPositionForPointgetLocalRectForCaretcomputeMinIntrinsicWidthcomputeMaxIntrinsicWidthpreferredLineHeight_cachedLineBreakCount_countHardLineBreaks_preferredHeightcomputeMinIntrinsicHeightcomputeMaxIntrinsicHeightcomputeDistanceToActualBaselinehitTestSelfhitTestChildren_tap
_longPresshandleEvent_lastTapDownPosition_lastSecondaryTapDownPositionlastSecondaryTapDownPositionhandleSecondaryTapDownhandleTapDown_handleTapDown	handleTap
_handleTaphandleDoubleTaphandleLongPress_handleLongPressselectPositionselectPositionAtwordBoundaries
selectWordselectWordsInRangeselectWordEdgegetWordAtOffset_placeholderDimensions_adjustConstraints_computeTextMetricsIfNeeded_caretPrototype_computeCaretPrototype_snapToPhysicalPixelcomputeDryLayoutcomputeDryBaselineperformLayout_relativeOrigin_previousOffset_shouldResetOrigin_resetOriginOnLeft_resetOriginOnRight_resetOriginOnTop_resetOriginOnBottom"_resetFloatingCursorAnimationValue_calculateAdjustedCursorOffset$calculateBoundedFloatingCursorOffsetsetFloatingCursor_lineNumberForstartVerticalCaretMovement_paintContents_leaderLayerHandler_paintHandleLayersapplyPaintTransformpaint_clipRectLayerdescribeApproximatePaintClipdebugFillPropertiesdebugDescribeChildrenparentisRepaintBoundarysizedByParentshouldRepainthighlightPainthighlightColor_highlightColorhighlightedRange_highlightedRange_selectionHeightStyle_selectionWidthStyleshouldPaint_shouldPaintshowRegularCaret
caretPaintfloatingCursorPaint
caretColor_caretColor_cursorRadius_cursorOffset_backgroundCursorColorfloatingCursorRect_floatingCursorRectpaintRegularCursorpaintersaddListenerremoveListener
_kCaretGap_kCaretHeightOffset_kFloatingCursorSizeIncrease_kFloatingCursorRadius6_kShortestDistanceSquaredWithFloatingAndRegularCursorsTextSelectionPointVerticalCaretMovementRunRenderEditable_RenderEditableCustomPaintRenderEditablePainter_TextHighlightPainter_CaretPainter_CompositeRenderEditablePainterÅöBoxHeightStyleBoxWidthStyleLineMetricsTextBoxdouble
EdgeInsets	symmetric
horizontalverticalRadiuscircular	immutableOffsetTextDirectionoverrideboolObject	identicalruntimeTypepoint	directionStringltrrtlinthashTextPositioncurrentIteratorList_textPaintercomputeLineMetricsMapMapEntrydxbaselinegetPositionForOffsetlengthkeyvaluedy	RenderBox"RelayoutWhenSystemFontsChangeMixinContainerRenderObjectMixinTextParentData%RenderInlineChildrenContainerDefaultsTextLayoutMetrics	TextAlignstartViewportOffsetzero
InlineSpanColorValueNotifier	LayerLink
StrutStyle
Deprecated
TextScaler	noScalingTextSelectionTextHeightBehaviorTextWidthBasisparentLocaletightfromLTRB	TextRangeCliphardEdge
charactersTextPaintertext	textAligntextDirection
textScalerlinearlocalemaxLines
strutStyletextHeightBehaviortextWidthBasishighlightColorhighlightedRangeselectionHeightStyleselectionWidthStylepromptRectRange
caretColorcursorRadiuscursorOffsetbackgroundCursorColoraddAllchildrenvoidlayerdisposepainterspainter
adoptChildmarkNeedsLayoutmarkNeedsSemanticsUpdateTextSelectionDelegateValueListenablegetOffsetForCaret	translategetLineBoundary
baseOffsetextentOffsetendgetWordBoundarypreferredLineHeightisValidRectsizeoffsetaffinityinflatecontainsTextEditingValueSelectionChangedCauseuserUpdateTextEditingValuetextEditingValuecopyWithmin	selectionmarkNeedsPaintsystemFontsDidChange	plainTextAttributedStringInlineSpanSemanticsInformationellipsisjustifyCupertinoColorsinactiveGrayFloatingCursorDragStateattachedremoveListeneraddListenershouldPainttextScaleFactorCompositedTransformTargetLinkedHashMapKeySemanticsNodegetBoxesForSelectionmap	fromLTRBDtextBoxlefttoprightbottomtoListSemanticsConfigurationdescribeSemanticsConfigurationgetSemanticsInformationanyinfo
recognizerdefaultTargetPlatformTargetPlatformmacOSisSemanticBoundaryexplicitChildNodesStringBufferStringAttributesemanticsLabelstringAttributesinfoAttributerangeaddcopywritetoString
attributesattributedValue
isObscuredisMultiline	isFocusedisTextField
isReadOnlyonSetSelection	onSetTexttextSelectiongetOffsetBeforeonMoveCursorBackwardByWordonMoveCursorBackwardByCharactergetOffsetAfteronMoveCursorForwardByWordonMoveCursorForwardByCharacter	collapsedkeyboardIterable
isNotEmpty
firstChildcombineSemanticsInfoisPlaceholder	elementAtisTagged PlaceholderSpanIndexSemanticsTag
parentData
childAfterisEmptyfirsttoRectskipexpandToIncludefromLTWHmaxwidthconstraintsmaxWidthheight	maxHeightfloorToDoubleceilToDoublesortKeyOrdinalSortKeyattributedLabelTapGestureRecognizerVoidCallbackDoubleTapGestureRecognizerhandleronTapisLinkLongPressGestureRecognizerGestureLongPressCallbackonLongPressparentPaintClipRect	intersectisHiddenremovekeys	UniqueKeyshowOnScreen
updateWithconfigrectchildrenInInversePaintOrder
descendantextentisCollapsedi
codeUnitAtisWhitespacePipelineOwnerattach
debugOwner	onTapDowndetachRenderObjectredepthChildredepthChildrenRenderObjectVisitorvisitChildrenAxispixelshasSizeSizeboxHeightStyleboxWidthStyleclampDoublelastfoldaccumincomingshiftglobalToLocalgetFullHeightForCaretiOS
heightDiffandroidfuchsialinuxwindowscaretHeighttopLeftPlaceholderDimensionslayoutInlineChildreninfinityBoxConstraintschildgetMinIntrinsicWidthChildLayoutHelpergetDryBaselinesetPlaceholderDimensionslayoutminWidthminIntrinsicWidthgetMaxIntrinsicWidthmaxIntrinsicWidthindexminLinesgetMaxIntrinsicHeightdryLayoutChildTextBaselinecomputeDistanceToActualBaseline	protectedBoxHitTestResultposition	GlyphInfogetClosestGlyphForOffsetgraphemeClusterLayoutBoundsgetSpanForPositiongraphemeClusterCodeUnitRangeHitTestTargetHitTestEntryspanhitTestInlineChildrenPointerEventBoxHitTestEntrydebugHandleEventPointerDownEventdebugNeedsLayout
addPointerTapDownDetailsglobalPositioncausetaponDoubleTap	doubleTap	longPressEditableTextTextEditingControllerfromtoWordBoundarywordBoundariesbaseTextAffinityupstreamvisibleForTestingfromPosition
downstreamlocalToGlobalisFiniteroundconstrainWidthconstrainHeightlayoutChildgetBaselinepositionInlineChildreninlinePlaceholderBoxesapplyViewportDimensionapplyContentDimensionsshouldResetOriginEndresetLerpValuelerpfloatingCursorRectinflateRectshowRegularCaretlineMetrics
lineNumberdescent_PaintingContext
paintChildpaintcanvaspaintInlineChildrenLayerHandleLeaderLayerlink	pushLayerMatrix4defaultApplyPaintTransformnonepushClipRectneedsCompositingclipBehavioroldLayerClipRectLayer	antiAliasantiAliasWithSaveLayerDiagnosticPropertiesBuilderdebugFillPropertiesColorPropertyDiagnosticsPropertyIntPropertydefaultValueDiagnosticsNodetoDiagnosticsNodenamestyleDiagnosticsTreeStyle
transitionshouldRepaint_computeTextMetricsIfNeededbiggestnotifyListenersforegroundPainterCustomPainterRenderCustomPaintChangeNotifierCanvasPaintcolordrawRectbox_paintOffsetgetLocalRectForCaretcenterdistanceSquaredRRectfromRectAndRadius	drawRRect_floatingCursorTextPositionwithOpacityiteratormoveNextIterator	RenderBox"RelayoutWhenSystemFontsChangeMixinContainerRenderObjectMixin%RenderInlineChildrenContainerDefaultsTextLayoutMetricsChangeNotifierRenderEditablePainterã k©1¥⁄i∞œ@Ìkµ    Ä·   dart:collection  Ä˚   ÅmathÅ	dart:mathÅ-ÅeBoxHeightStyleBoxWidthStyleLineMetricsTextBox Å   Å'uiÅ*dart:ui  Åi   "package:characters/characters.dart  Åñ   package:flutter/foundation.dart  Å¿   package:flutter/gestures.dart  ÅË   package:flutter/semantics.dart  Ç   package:flutter/services.dart  Ç:   box.dart  ÇM   custom_paint.dart  Çi   
layer.dart  Ç~   layout_helper.dart  Çõ   object.dart  Ç±   paragraph.dart  Ç    viewport_offset.dart¿ ∞ ¿æƒã‹ <ÄÜÄ§Ä•Ä÷ÄﬂÄ‡Ä˙ÅÅgÅhÅïÅøÅÁÇÇ8Ç9ÇLÇhÇ}ÇöÇ∞Ç…ÇËÇÈÉÉDÉEÉìÉ∆Ñ,Ñ-ÑdÑ†Ñ°Ö ÖCÖèÖœÜÜkÜlÜµááá(áCáá∑á∏ààCàYàZàïà∑à∏àƒàÁâ	ââ"âNâbâhâèâØâÿâ‹â›âÈâˇääHäqäâäêäîäïä°ä÷ä◊äŸä⁄ã(ãtãåãêã⁄å'åtå√ççaçççëçﬂé.é~éÕèè9è=èdènèvèÄè–êêlêºë	ëWëhëlë∫í	íVí|íèíìí‘ììnìøì˚ìˇîTînîrî¿ïï^ïzïΩï€ïÔññ%ñ<ñUñZñ[ñtñàñ≠ñÆñŸñ˚ñ¸óóVó\ó™ó¿ó∆òòRògò|òêòñòÛôCôô≥ôÀô—ôÊôÍôÎöVöWö¢ö∑ö‘õ+õMõjõpõòõôõÙúUú≈úùù	ù
ùù3ùHùiùmùnùzùéù£ù÷ùÍùûOûfûâû¥û≈û…û ûÛû˘ü1üIü^ü{üèüïüÙ††.†Y†j†n†o†±† †–°°°T°y°™°√¢¢¢-¢7¢?¢L¢ä¢©¢∫¢ƒ¢Ã¢“¢˛££££R£{££…§§B§F§ï§‰•4•Ç•—•Ë•Ï¶<¶ç¶—ßùßÔßı®3®9®à®é®‹©*©m©s©º©Õ©‡©ˆ™ ™K™c™Ö™™™æ™Î´´-´@´Z´v´ë´¢´√¨2¨n¨t¨ñ¨»¨Ê≠
≠*≠E≠`≠å≠«≠ÏÆ
ÆÆ<ÆVÆpÆóÆæÆ·Ø'ØjØêØ‹Ø¸∞∞?∞h∞å∞∫∞Ÿ±
±;±J±ó±À±’±‰≤!≤f≤p≤≤œ≥/≥9≥s≥ñ≥“≥ı¥
¥)¥P¥ª¥‘µµ"µSµ|µÜµ≈µ‚µˇ∂∂9∂R∂u∂ö∂À∑∑9∑n∑ü∑–∑Û∏∏/∏T∏z∏´∏‚∏„ππNπëπ“π”∫∫[∫\∫à∫∑∫Êª'ª(ªYªvªåªêªëª¨ª„ººº'º:º`ºàº¨º‘º¯ΩΩJΩqΩöΩ¡ΩÌææ+æGælæäæßæ…æœæ‰æËæÈø.ø~ø°øÏ¿ @¿ @&¿ @0¿ @1¿ @\¿ @”¿ @˝¿ A5¿ AB¿ A}¿ AÉ¿ A®¿ A¨¿ A≠¿ AÓ¿ B¿ B¿ Bg¿ B≠¿ Bÿ¿ C¿ CK¿ Cà¿ C¥¿ C¬¿ C»¿ CÚ¿ Cˆ¿ C˜¿ D2¿ DÇ¿ Dõ¿ E¿ E¿ E1¿ E®¿ E“¿ F
¿ F¿ FR¿ FX¿ Fs¿ Fw¿ Fx¿ F¿¿ FÁ¿ FÌ¿ G9¿ GÑ¿ Gü¿ G—¿ GÙ¿ H'¿ HI¿ HW¿ H]¿ H}¿ HÅ¿ HÇ¿ Hó¿ H·¿ I¿ I¿ I<¿ Iá¿ I›¿ Iﬁ¿ Jk¿ J∞¿ J˜¿ K#¿ KL¿ K}¿ KÜ¿ Kç¿ Kë¿ Kí¿ L¿ L<¿ Ly¿ L•¿ LŒ¿ LÙ¿ M¿ MA¿ MJ¿ MQ¿ MU¿ MV¿ M°¿ M±¿ M∑¿ N¿ NO¿ N¿ NÖ¿ N‘¿ O¿ O¿ OM¿ Oc¿ Od¿ Oé¿ Oﬂ¿ P¿ PI¿ PW¿ P]¿ Pä¿ P°¿ P•¿ P¶¿ P·¿ Q%¿ QR¿ QÇ¿ Qê¿ Qñ¿ Qø¿ Q÷¿ Q⁄¿ Q€¿ R¿ R¿ RX¿ Rå¿ R®¿ Rœ¿ RÙ¿ S¿ S¿ S'¿ S>¿ SB¿ SC¿ SÖ¿ Sã¿ S¥¿ SÏ¿ T
¿ T3¿ T[¿ Ti¿ To¿ Tô¿ T∫¿ T—¿ T’¿ T÷¿ U¿ UA¿ UV¿ Uv¿ Uó¿ U•¿ U´¿ U≈¿ UË¿ V¿ V¿ V¿ VW¿ V]¿ Vú¿ VÙ¿ W*¿ W^¿ Wb¿ Wc¿ W≠¿ W≥¿ WÒ¿ XF¿ Xz¿ X≠¿ X±¿ X≤¿ Y ¿ Y@¿ YF¿ Yó¿ Y∫¿ YÈ¿ YÍ¿ ZA¿ ZG¿ Zì¿ Z„¿ [.¿ [A¿ [G¿ [î¿ [ﬂ¿ [¸¿ \O¿ \¢¿ \£¿ \¯¿ \˛¿ ]J¿ ]ì¿ ]‚¿ ]¸¿ ^¿ ^O¿ ^ö¿ ^∑¿ _¿ _W¿ _X¿ _ò¿ _¿ `J¿ `ü¿ `‰¿ `Ë¿ `È¿ a¿ a¿ aJ¿ aV¿ aè¿ a“¿ b¿ b6¿ bÅ¿ bá¿ b—¿ b’¿ b÷¿ c¿ c¿ cS¿ cÜ¿ cä¿ cã¿ c“¿ cﬁ¿ d¿ de¿ d∞¿ dÔ¿ e8¿ ev¿ eµ¿ eπ¿ e∫¿ f¿ f¿ fJ¿ fî¿ fﬂ¿ g¿ gg¿ g§¿ g„¿ gÁ¿ gË¿ h¿ h¿ hH¿ hg¿ hÜ¿ hµ¿ h‚¿ h¿ hˆ¿ i)¿ i*¿ ii¿ i∂¿ iÕ¿ i‘¿ j¿ jk¿ jπ¿ jÛ¿ kD¿ kë¿ kª¿ kÔ¿ l¿ lA¿ lB¿ lÄ¿ lÀ¿ l‚¿ lÈ¿ m¿ m=¿ mk¿ mo¿ mp¿ m∆¿ n¿ n¿ n¿ nc¿ nÑ¿ n“¿ o!¿ on¿ o∫¿ p¿ pC¿ pL¿ pù¿ pÓ¿ q¿ q`¿ q®¿ q±¿ q∑¿ q—¿ r"¿ r/¿ r6¿ r:¿ r;¿ rG¿ ra¿ r}¿ r≈¿ rÙ¿ s#¿ s'¿ s(¿ s4¿ sT¿ sv¿ sö¿ sû¿ sü¿ s‡¿ sÊ¿ t%¿ tS¿ tû¿ t–¿ t—¿ u¿ u¿ u]¿ uä¿ u¨¿ uÿ¿ v¿ v?¿ ve¿ vs¿ vy¿ võ¿ v∫¿ v›¿ w¿ w¿ w>¿ wB¿ wC¿ wh¿ wå¿ w¿¿ w·¿ x¿ x?¿ xl¿ xï¿ xæ¿ x„¿ y¿ yE¿ yÉ¿ yá¿ yà¿ yª¿ y¿ z¿ z>¿ zL¿ zR¿ zv¿ zç¿ zë¿ zí¿ z∏¿ zæ¿ {¿ {B¿ {H¿ {ñ¿ {Â¿ |3¿ ||¿ |Ã¿ |‹¿ }¿ }b¿ }™¿ }Ï¿ ~¿ ~F¿ ~T¿ ~Z¿ ~Ç¿ ~ô¿ ~π¿ ~Ω¿ ~æ¿ ¿ ¿ !¿ v¿ ƒ¿ Ä¿ Ä<¿ ÄB¿ Äé¿ Äû¿ ÄÀ¿ ÄÈ¿ Å¿ Å¿ Å%¿ ÅF¿ Å]¿ Åa¿ Åb¿ Å™¿ ÅÃ¿ Ç¿ Ç+¿ ÇW¿ Çe¿ Çk¿ Çê¿ Çß¿ Ç´¿ Ç¨¿ Ç›¿ É¿ É5¿ É[¿ É_¿ É`¿ É™¿ Éœ¿ É’¿ Ñ¿ Ñ ¿ Ñ]¿ Ñc¿ Ñs¿ Ñy¿ Ñ»¿ Ñ‹¿ Ö'¿ ÖS¿ ÖÑ¿ Öà¿ Öâ¿ Ö§¿ Ö•¿ Ö»¿ Ö˝¿ Ü ¿ ÜN¿ Ün¿ Ü|¿ ÜÇ¿ Üñ¿ Ü…¿ Üœ¿ ÜÌ¿ á
¿ á,¿ á2¿ áK¿ á_¿ áx¿ á®¿ áÆ¿ á≤¿ á≥¿ áŒ¿ à ¿ à¿ à¿ à6¿ àX¿ àr¿ àè¿ à≠¿ àª¿ à¡¿ àÿ¿ à¯¿ à¸¿ à˝¿ âR¿ âv¿ âë¿ âØ¿ âŒ¿ â‹¿ â‚¿ â˙¿ ä¿ ä¿ ä¿ äH¿ äj¿ äÑ¿ ä°¿ äø¿ äÕ¿ ä”¿ äÍ¿ ã
¿ ã¿ ã¿ ã^¿ ãd¿ ãÆ¿ ã ¿ ã–¿ å¿ å¿ åe¿ åµ¿ åÚ¿ ç¿ ç&¿ çy¿ çñ¿ çæ¿ ç€¿ çÈ¿ çÔ¿ é¿ é¿ éW¿ éß¿ é—¿ è¿ è¿ è¿ è ¿ èU¿ èw¿ èâ¿ è‹¿ è˘¿ ê!¿ ê>¿ êL¿ êR¿ êi¿ êÄ¿ êÑ¿ êÖ¿ êπ¿ êŸ¿ êÍ¿ ë¿ ë"¿ ë0¿ ë6¿ ëL¿ ëc¿ ëg¿ ëh¿ ëú¿ ë›¿ í¿ í0¿ í4¿ í5¿ í{¿ íó¿ íù¿ í’¿ í€¿ ì,¿ ìK¿ ìZ¿ ìy¿ ìÊ¿ î ¿ î$¿ îb¿ îq¿ îê¿ î˝¿ ï7¿ ï;¿ ïa¿ ïå¿ ïê¿ ïë¿ ï»¿ ñ ¿ ñ%¿ ñQ¿ ñ_¿ ñe¿ ñä¿ ñ°¿ ñ•¿ ñ¶¿ ñŸ¿ ñﬂ¿ ó!¿ ó'¿ ók¿ óñ¿ óƒ¿ ó·¿ ò	¿ ò(¿ ò6¿ ò<¿ òT¿ òÑ¿ òö¿ ò∫¿ òæ¿ òø¿ òı¿ ò˚¿ ôK¿ ôó¿ ôﬂ¿ ö¿ ö!¿ öF¿ öb¿ öp¿ öv¿ öä¿ ö∏¿ öæ¿ ö”¿ öÁ¿ õ¿ õ¿ õ/¿ õ3¿ õ4¿ õX¿ õÇ¿ õü¿ õ¡¿ õ‚¿ õ¿ õˆ¿ ú¿ ú'¿ ú+¿ ú,¿ úO¿ úU¿ ú≤¿ ú∏¿ ù¿ ùb¿ ùŒ¿ û¿ û*¿ ûN¿ ûp¿ û~¿ ûÑ¿ ûü¿ û∂¿ û∫¿ ûª¿ ü¿ üN¿ üT¿ ü†¿ ü»¿ ü›¿ †¿ †-¿ †V¿ †|¿ †ä¿ †ê¿ †Ø¿ †Ô¿ °¿ °?¿ °Ö¿ °∑¿ °’¿ °Ÿ¿ °⁄¿ ¢¿ ¢h¿ ¢n¿ ¢≤¿ ¢˚¿ £L¿ £î¿ £©¿ £‚¿ §¿ §-¿ §1¿ §2¿ §i¿ §o¿ §†¿ §⁄¿ §˛¿ •&¿ •*¿ •+¿ •\¿ •b¿ •≠¿ ¶¿ ¶B¿ ¶e¿ ¶ì¿ ¶Ω¿ ¶À¿ ¶—¿ ¶Ù¿ ß
¿ ß¿ ß¿ ß>¿ ßD¿ ßè¿ ß„¿ ®¿ ®?¿ ®k¿ ®ì¿ ®°¿ ®ß¿ ®»¿ ®ﬁ¿ ®‚¿ ®„¿ ©.¿ ©P¿ ©V¿ ©¢¿ ©®¿ ©∏¿ ©æ¿ ™¿ ™!¿ ™I¿ ™J¿ ™ë¿ ™√¿ ™Â¿ ´¿ ´¿ ´P¿ ´V¿ ´ö¿ ´›¿ ¨¿ ¨C¿ ¨Ü¿ ¨ª¿ ¨¡¿ ≠¿ ≠@¿ ≠v¿ ≠ò¿ ≠ﬂ¿ Æ¿ Æ4¿ Æd¿ Ær¿ Æx¿ Æ°¿ Æ∏¿ Æÿ¿ Æ‹¿ Æ›¿ Ø$¿ ØZ¿ Ø`¿ Ø§¿ ØÁ¿ ∞¿ ∞M¿ ∞ê¿ ∞≈¿ ∞À¿ ±¿ ±?¿ ±E¿ ±ò¿ ±·¿ ±Á¿ ≤+¿ ≤p¿ ≤∑¿ ≤ı¿ ≥¿ ≥J¿ ≥N¿ ≥O¿ ≥É¿ ≥â¿ ≥ÿ¿ ¥2¿ ¥Ç¿ ¥≈¿ µ¿ µ;¿ µw¿ µ{¿ µ|¿ µŸ¿ ∂¿ ∂¿ ∂j¿ ∂p¿ ∂Õ¿ ∑¿ ∑O¿ ∑ç¿ ∑ë¿ ∑í¿ ∑ ¿ ∑–¿ ∏¿ ∏a¿ ∏Å¿ ∏≥¿ ∏“¿ ∏”¿ π
¿ π¿ πA¿ πG¿ πj¿ πî¿ π∫¿ π€¿ π˝¿ ∫¿ ∫2¿ ∫T¿ ∫Z¿ ∫^¿ ∫_¿ ∫†¿ ∫ø¿ ∫˜¿ ∫¯¿ ªD¿ ªì¿ ª“¿ ª¸¿ º4¿ º5¿ ºÄ¿ º«¿ ºÙ¿ º˙¿ Ω9¿ Ωy¿ Ωú¿ Ω‘¿ æ¿ æR¿ æã¿ æ∆¿ ø¿ ø.¿ øS¿ øW¿ øX¿ ød¿ ø´¿ ø›¿ ¿ ¿ ¿o¿ ¿Ω¿ ¿‹¿ ¡¿ ¡t¿ ¡≠¿ ¡’¿ ¬&¿ ¬L¿ ¬Y¿ ¬}¿ ¬¢¿ ¬∞¿ ¬∂¿ ¬‡¿ ¬˘¿ √S¿ √b¿ √ñ¿ √Æ¿ √Ù¿ ƒA¿ ƒÇ¿ ƒ—¿ ≈¿ ≈.¿ ≈P¿ ≈∏¿ ≈…¿ ≈ÿ¿ ≈‰¿ ∆¿ ∆%¿ ∆/¿ ∆ç¿ ∆ï¿ ∆õ¿ ∆¶¿ ∆ÿ¿ ∆˘¿ «¿ «B¿ «_¿ «z¿ «ô¿ «ö¿ «¬¿ «ı¿ «˚¿ «¸¿ »¿ »F¿ »L¿ »M¿ »ä¿ »≤¿ »˝¿ …¿ …U¿ …©¿ …±¿ …˚¿  
¿  Q¿  £¿  ´¿  ±¿  µ¿  ∂¿  €¿ À¿ À)¿ À=¿ À~¿ Àá¿ À≠¿ À¥¿ À∏¿ Àπ¿ À≈¿ Ã9¿ Ã{¿ Ã∫¿ ÃÓ¿ Õ¿ Õ¿ Õ1¿ ÕO¿ Õg¿ Õä¿ ÕÎ¿ Œ8¿ Œê¿ Œ≈¿ Œ‡¿ œ¿ œ¿ œ:¿ œ;¿ œ[¿ œ©¿ œ¿ –¿ –ç¿ –◊¿ —)¿ —V¿ —|¿ —ó¿ —°¿ —≈¿ —‰¿ —Û¿ “4¿ “â¿ “¶¿ “∫¿ “ƒ¿ “Ó¿ ” ¿ ”Z¿ ”ì¿ ”√¿ ”Õ¿ ‘¿ ‘T¿ ‘r¿ ‘ñ¿ ‘π¿ ‘Ô¿ ’'¿ ’2¿ ’Ä¿ ’—¿ ’ˆ¿ ÷!¿ ÷K¿ ÷v¿ ÷¢¿ ÷≠¿ ÷˚¿ ◊+¿ ◊X¿ ◊Õ¿ ◊¿ ÿ9¿ ÿé¿ ÿ±¿ ÿﬁ¿ Ÿ	¿ Ÿ¿ Ÿ|¿ Ÿ£¿ Ÿ⁄¿ ŸË¿ Ÿ˝¿ ⁄¿ ⁄#¿ ⁄r¿ ⁄|¿ ⁄¨¿ ⁄ˇ¿ €M¿ €W¿ €Ç¿ €∏¿ ‹¿ ‹¿ ‹F¿ ‹j¿ ‹Ä¿ ‹∑¿ ‹ƒ¿ ‹Œ¿ ‹ﬂ¿ ›¿ ›-¿ ›^¿ ›Å¿ ›â¿ ›è¿ ›∂¿ ﬁ¿ ﬁ	¿ ﬁ
¿ ﬁ<¿ ﬁL¿ ﬁá¿ ﬁæ¿ ﬁ≈¿ ﬁ…¿ ﬁ ¿ ﬂ¿ ﬂQ¿ ﬂó¿ ﬂò¿ ﬂŒ¿ ‡¿ ‡¿ ‡¿ ‡T¿ ‡s¿ ‡«¿ ‡Á¿ ‡ı¿ ‡˚¿ ·O¿ ·b¿ ·´¿ ·—¿ ·ÿ¿ ·‹¿ ·›¿ ‚!¿ ‚@¿ ‚ï¿ ‚µ¿ ‚√¿ ‚…¿ „¿ „0¿ „y¿ „ü¿ „¶¿ „™¿ „´¿ „È¿ ‰¿ ‰[¿ ‰ö¿ ‰∂¿ ‰ƒ¿ ‰ ¿ Â¿ Â2¿ ÂG¿ Âg¿ Âç¿ Âñ¿ Âº¿ Â√¿ Â«¿ Â»¿ Ê¿ Ê&¿ Êy¿ Ê∆¿ ÊÊ¿ ÊÙ¿ Ê˙¿ ÁT¿ Ág¿ Á|¿ Áú¿ Á∆¿ Áœ¿ Áı¿ Á¸¿ Ë ¿ Ë¿ Ë)¿ Ë<¿ Ëñ¿ Ë«¿ Ë‹¿ Ë‰¿ È	¿ È¿ È'¿ ÈA¿ ÈG¿ ÈK¿ ÈL¿ Èx¿ Èí¿ ÈÏ¿ Í¿ Í2¿ Í:¿ Í_¿ Íu¿ Í}¿ Íù¿ Í£¿ Í¥¿ Í∏¿ Íπ¿ Î¿ Î¿ Î¿ Î]¿ ÎØ¿ ÎÒ¿ Ï¿ ÏO¿ ÏÄ¿ Ï∑¿ ÏÕ¿ Ï’¿ Ï€¿ ÏÏ¿ Ï¿ ÏÒ¿ Ï˝¿ Ì"¿ Ì;¿ Ìg¿ Ìì¿ Ìî¿ Ì∆¿ ÌÈ¿ Ó¿ Ód¿ Óç¿ Ó§¿ Ó“¿ Ó÷¿ Ó◊¿ Ó„¿ Óı¿ Ô	¿ Ô#¿ ÔO¿ ÔÄ¿ Ôî¿ Ôª¿ Ô‚¿ ÔÊ¿ ÔÁ¿ ÔÛ¿ ¿ Q¿ î¿ ∑¿ ‹¿ ‚¿ Ò¿ Ò*¿ Ò0¿ ÒM¿ ÒQ¿ ÒR¿ Ò^¿ Òí¿ Ò’¿ Ú¿ Ú;¿ Ú[¿ Úa¿ ÚÑ¿ Ú§¿ Ú™¿ ÚÃ¿ Ú–¿ Ú—¿ Ú˚¿ Ú¸¿ ÛH¿ ÛI¿ Ûe¿ Ûâ¿ Ûø¿ Ûı¿ Û¸¿ Ù ¿ Ù¿ Ù ¿ Ù5¿ ÙY¿ Ù~¿ Ù§¿ Ù´¿ ÙØ¿ Ù∞¿ Ù·¿ Ùˆ¿ ı¿ ıb¿ ı¨¿ ı≥¿ ı∑¿ ı∏¿ ˆ¿ ˆZ¿ ˆ∞¿ ˆ±¿ ˆ˛¿ ˜¿ ˜U¿ ˜•¿ ˜Ú¿ ¯>¿ ¯ä¿ ¯ê¿ ¯†¿ ¯¶¿ ¯Á¿ ˘ ¿ ˘o¿ ˘í¿ ˘ì¿ ˘¿¿ ˘¡¿ ˘¸¿ ˙ç¿ ˙¶¿ ˙¿ ˚T¿ ˚≠¿ ˚Ò¿ ˚˛¿ ¸¿ ¸˙¿ ˝¿ ˝W¿ ˝é¿ ˝ó¿ ˝ù¿ ˝°¿ ˝¢¿ ˝Ò¿ ˛"¿ ˛(¿ ˛w¿ ˛Ö¿ ˛ã¿ ˛‹¿ ˛˛¿ ˇ2¿ ˇa¿ ˇt¿ ˇz¿ ˇù¿ ˇû¿ ˇ‰¿ +¿ W¿ Å¿ à¿ â¿ †¿ ¨¿¿1¿5¿6¿~¿Ñ¿î¿ö¿‚¿¿`¿Ö¿¡¿‰¿@¿D¿E¿ì¿£¿©¿π¿ø¿¿Q¿ñ¿”¿¿8¿r¿ï¿∆¿$¿k¿«¿»¿/¿o¿p¿—¿ˆ¿¿6¿m¿Æ¿—¿Î¿	¿	0¿	L¿	W¿	z¿	ù¿	æ¿	·¿
9¿
ã¿
Ÿ¿
¿A¿}¿†¿∫¿˙¿¿,¿7¿=¿>¿m¿≤¿∂¿∑¿√¿ˆ¿J¿a¿–¿¯¿ˇ¿D¿`¿ò¿–¿Í¿Ó¿Ô¿˚¿.¿Ç¿ô¿›¿,¿õ¿√¿ ¿¿+¿c¿õ¿ƒ¿»¿…¿'¿]¿£¿§¿¬¿Ï¿ ¿?¿Y¿_¿r¿≠¿’¿¿¿'¿k¿Ü¿°¿∑¿ø¿≈¿Ô¿Û¿Ù¿¿G¿|¿¿¿¸¿˝¿¿=¿c¿∫¿…¿!¿Ö¿ç¿¿¿∆¿«¿¿a¿q¿ä¿Ÿ¿'¿g¿Ω¿¿¿:¿R¿X¿ï¿È¿¿Q¿b¿s¿z¿~¿¿ã¿›¿ﬁ¿Í¿¿K¿≤¿π¿›¿·¿‚¿Ó¿0¿S¿ñ¿ö¿õ¿ß¿‘¿’¿·¿Ó¿>¿|¿”¿¿p¿ø¿ ¿ -¿ ú¿!
¿!¿!/¿!T¿!|¿!ë¿!ü¿!‡¿!Ê¿!Í¿!Î¿"¿";¿"<¿"H¿"à¿"¥¿"Ÿ¿"˙¿"˚¿#¿#V¿#v¿#ú¿#§¿#™¿#Æ¿#Ø¿#œ¿#¯¿#˘¿$I¿$ï¿$¢¿$∑¿%¿%¿%9¿%?¿%ç¿%∞¿%Ë¿&¿&W¿&[¿&\¿&™¿&Û¿'¿'	¿'T¿'~¿'≠¿'‡¿'‰¿(¿(0¿(L¿(P¿(Q¿(ü¿(‰¿(Ù¿(˙¿)E¿)j¿)¿)µ¿)π¿)œ¿)Î¿)¸¿* ¿*¿*O¿*†¿*∞¿*∂¿+¿+-¿+H¿+Ä¿+Ñ¿+Ö¿+”¿,$¿,4¿,:¿,Ü¿,±¿,Ã¿-¿-¿-$¿-@¿-W¿-[¿-\¿-ó¿-ù¿-ﬂ¿.-¿.{¿. ¿.–¿/¿/]¿/r¿/¥¿/ı¿/˘¿/˙¿0:¿0@¿0ë¿0º¿1"¿1E¿1≤¿1‚¿1Ô¿2<¿2=¿2m¿2µ¿2∂¿2Ï¿3
¿3,¿3S¿3Z¿3[¿3É¿3á¿3à¿3√¿4¿4¿4D¿4J¿4â¿4«¿5
¿5¿5¿5l¿5r¿5Õ¿5”¿6¿6M¿6S¿6í¿6˙¿7¿7ä¿7Ã¿8Q¿8∑¿8¸¿8˝¿9¿9%¿9Å¿9€¿: ¿:	¿:¿:¿:!¿:"¿:^¿:d¿:£¿:Â¿;¿;2¿;¨¿;Ô¿<¿<=¿<¿<å¿<Ì¿<Û¿=¿=¿= ¿=g¿=}¿=í¿=À¿>¿>J¿>s¿>√¿>Ã¿>“¿?!¿?8¿?É¿?â¿?Ã¿?Î¿@¿@.¿@o¿@û¿@¬¿@Ì¿@Û¿A¿A¿Ae¿A≥¿AÏ¿AÛ¿BB¿Bì¿B®¿Bƒ¿C¿C\¿CÉ¿C§¿C ¿D¿D0¿Dw¿DÖ¿Dß¿D“¿D¸¿E¿E¿E7¿Ec¿Eé¿Eõ¿E¿¿E⁄¿F¿F&¿FS¿FÜ¿Fó¿F•¿F«¿Fı¿G"¿G1¿G=¿Gb¿GÖ¿G®¿GÕ¿Gﬁ¿GÊ¿GÏ¿GÌ¿H7¿H;¿H<¿Hà¿Hç¿H‹¿I,¿Is¿I™¿I´¿J#¿Jp¿Jº¿J…¿K¿K<¿KC¿KG¿KH¿Kô¿K®¿K≠¿K˛¿LG¿Lë¿L·¿LÒ¿Lˆ¿MG¿Më¿Mﬂ¿N¿NM¿NR¿Nû¿NÓ¿O7¿OR¿Oy¿O¸¿P=¿PA¿PB¿P_¿P`¿P≠¿P≤¿P¸¿QG¿QY¿Q{¿Q†¿Qø¿Q‡¿R2¿RU¿Rx¿Rô¿Rº¿S6¿S<¿S@¿SA¿Sè¿SÆ¿S„¿T ¿TZ¿Tm¿Tå¿T‚¿TÔ¿U¿Ud¿Uq¿Uz¿U~¿U¿Uã¿Uò¿Uÿ¿V[¿Vo¿W ¿W8¿W[¿Wx¿W«¿X$¿X(¿X)¿X5¿Xê¿Y¿Y'¿Y∏¿Y¿Z6¿Z:¿Z;¿ZG¿Z`¿Zô¿[ ¿[£¿[¥¿[Ì¿\%¿\g¿\Ö¿\Ü¿\©¿\∆¿]¿]F¿]}¿]—¿]Ù¿^¿^:¿^p¿^ò¿^°¿^®¿^©¿^Ô¿_J¿_K¿_ú¿_ù¿_÷¿`¿`¿`I¿`}¿`∑¿`ª¿`º¿a¿a^¿a¢¿a ¿aÂ¿b¿b*¿bN¿bp¿bï¿b√¿bƒ¿c¿cv¿c‘¿c˝¿d¿d¿dU¿d[¿dk¿dq¿d¿¿d‘¿e7¿e_¿eõ¿f¿f]¿f«¿g#¿g$¿gI¿gw¿g}¿g~¿gù¿gÍ¿g¿gÒ¿h¿hN¿hT¿hU¿h©¿h¿i&¿iÉ¿i•¿i„¿jA¿jd¿jj¿jü¿j˚¿k¿k[¿k∫¿kﬁ¿k‰¿kÂ¿l*¿lo¿l‹¿l›¿m¿m?¿mà¿m™¿m∞¿m¿n¿nZ¿n}¿nÉ¿nÑ¿n´¿n¨¿n«¿nÀ¿nÃ¿o¿o5¿o;¿oK¿oQ¿o†¿o¥¿p?¿po¿pî¿p≤¿p”¿p˜¿q¿q;¿q_¿qe¿q£¿q‹¿q˘¿r/¿rx¿r∑¿s¿s9¿s§¿s±¿s‡¿sÊ¿t7¿t;¿t<¿tü¿t‰¿u¿ul¿u§¿u“¿v9¿vA¿vG¿vú¿væ¿vÂ¿wG¿wN¿wR¿wS¿w§¿wŸ¿wﬂ¿x0¿xI¿xO¿xò¿xû¿xÔ¿y3¿y9¿yÖ¿yÕ¿z¿ze¿z±¿{¿{.¿{:¿{I¿{^¿{u¿{é¿{ï¿{ô¿{ö¿{⁄¿|¿|¿|H¿|Ç¿|à¿|â¿|…¿}	¿}
¿}R¿}ú¿}ø¿}Ú¿}¯¿}˘¿~2¿~e¿~f¿~â¿~º¿~¬¿~∆¿~«¿¿¿É¿Ø¿»¿˚¿Ä/¿Ä6¿Äú¿Ä≥¿Ä’¿ÄË¿Ä˚¿Å¿Å#¿ÅO¿Åh¿Åõ¿Åœ¿Åÿ¿ÅÒ¿Ç;¿ÇP¿Çe¿Çn¿Çt¿Çx¿Çy¿ÇÖ¿Ç∆¿É¿É$¿É*¿É\¿É`¿Éa¿Ém¿É§¿É«¿Ñ¿Ñ5¿ÑO¿Ñ_¿Ñ{¿Ñì¿Ñ∑¿Ñﬂ¿ÑË¿Ñı¿Ö¿Ö?¿ÖE¿Öz¿Ö¨¿Ö¸¿Ü¿Ü¿Ü¿ÜY¿ÜZ¿Üf¿Ü°¿ÜΩ¿Ü”¿ÜË¿á¿á¿áE¿áÑ¿áä¿áé¿áè¿áõ¿á‡¿à¿àJ¿à¢¿àŸ¿â¿âh¿â≠¿ä ¿äw¿ä«¿ã¿ã¿ã¿ã#¿ãU¿ãs¿ãã¿ã¨¿ãƒ¿ãˆ¿å¿å¿å¿å¿å¿åD¿åc¿åá¿å¢¿å≤¿å≥¿åø¿ç ¿ç¿ç¿ç3¿ç4¿ç@¿çb¿çc¿çï¿ç∏¿çÈ¿é¿é¿é¿é¿éT¿ém¿én¿é•¿éΩ¿é√¿éƒ¿éÿ¿è
¿è7¿è=¿èA¿èB¿èN¿èÖ¿èµ¿è—¿ê
¿ê7¿êc¿êñ¿êú¿ê†¿ê°¿ê≠¿ê“¿êÎ¿ë¿ë¿ë¿ë'¿ë9¿ëg¿ë{¿ë¿ëÄ¿ëå¿ëô¿ëÔ¿ëÒ¿ëÚ¿í<¿íZ¿í^¿í≠¿í˛¿ìM¿ìû¿ìÔ¿î¿î¿î\¿î©¿îÈ¿ï9¿ï]¿ïa¿ïo¿ïs¿ïƒ¿ñ
¿ñQ¿ñó¿ñÍ¿ó(¿óv¿óü¿ó•¿óÌ¿ò<¿òã¿òÀ¿ò—¿ô¿ôb¿ô≤¿ôø¿ô˘¿ô˙¿ö0¿ö6¿öÜ¿ö‘¿õ¿õ%¿õv¿õ≈¿õ˝¿úD¿úF¿úG¿úÉ¿úù¿ú¿¿ú›¿ù
¿ù3¿ù4¿ù\¿ù]¿ùç¿ùß¿ùœ¿ùˆ¿û¿û
¿û*¿ûA¿ûE¿ûF¿û~¿ûû¿ûÃ¿ûı¿ü¿ü	¿ü+¿üB¿üF¿üG¿üë¿üó¿ü÷¿†¿†b¿†ò¿†¬¿†–¿†÷¿†˘¿°¿°¿°¿°_¿°e¿°£¿°Á¿¢)¿¢]¿¢Ü¿¢î¿¢ö¿¢º¿¢”¿¢◊¿¢ÿ¿¢‰¿£,¿£[¿£Ñ¿£√¿£—¿£◊¿£ÿ¿£˙¿§;¿§}¿§ƒ¿§¿•¿•!¿•"¿•I¿•`¿•ò¿•Í¿¶¿¶¿¶¿¶¿¶¿¶"¿¶]¿¶Ö¿¶ô¿¶ü¿¶æ¿¶ˇ¿ß¿ß6¿ßn¿ß™¿ßÓ¿®1¿®5¿®7¿®8¿®l¿®¿®Ä¿®®¿®ƒ¿®‰¿©¿©¿©¿©2¿©I¿©M¿©N¿©ç¿©•¿©™¿©ı¿™¿™3¿™4¿™X¿™ä¿™ã¿™≥¿™…¿™Í¿´¿´%¿´+¿´,¿´E¿´\¿´`¿´a¿´é¿´ß¿´À¿´Ì¿´˚¿¨¿¨¿¨3¿¨7¿¨8¿¨d¿¨ä¿¨≠¿¨œ¿¨›¿¨„¿¨˛¿≠¿≠¿≠¿≠X¿≠y¿≠•¿≠›¿≠Î¿≠Ò¿≠Ú¿Æ¿Æ2¿ÆK¿ÆQ¿ÆU¿ÆV¿Æç¿Æ™¿Æ“¿Æ˙¿Ø¿Ø¿Ø/¿ØF¿ØJ¿ØK¿Ø¬¿∞¿∞*¿∞R¿∞Ω¿±¿±'¿±1¿±9¿±d¿±â¿±•¿±ÿ¿±Á¿≤7¿≤i¿≤q¿≤w¿≤{¿≤|¿≤à¿≤–¿≥¿≥¿≥T¿≥U¿≥¢¿≥∞¿≥∂¿≥∑¿≥ı¿≥ˆ¿¥/¿¥G¿¥Ä¿¥∆¿¥ﬂ¿µ¿µ¿µ2¿µÉ¿µâ¿µä¿µ’¿µÌ¿∂B¿∂P¿∂V¿∂W¿∂m¿∂∏¿∂¿∂˜¿∂˚¿∂¸¿∑¿∑C¿∑k¿∑¿∑Ö¿∑Ü¿∑•¿∑ø¿∑≈¿∑Ó¿∏ ¿∏\¿∏å¿∏¿¿∏Ù¿π:¿π{¿π¿πÅ¿πÇ¿π»¿∫¿∫¿∫6¿∫7¿∫C¿∫o¿∫´¿∫–¿∫÷¿∫⁄¿∫€¿∫Á¿ª¿ªR¿ªz¿ªÄ¿ªÑ¿ªÖ¿ªë¿ªŸ¿º¿ºH¿ºN¿ºR¿ºS¿º_¿ºö¿º¬¿º÷¿º‹¿ΩI¿Ω\¿Ωb¿Ωc¿Ω∫¿æ¿æD¿æà¿æù¿æ•¿æ´¿æ¨¿ææ¿æ¬¿æƒ   0/// @docImport 'package:flutter/cupertino.dart';Ä‡  Ä˙Å ÅÅ+Å-ÅeÅh  Åï  Åø  ÅÁ  Ç  Ç9  ÇL  Çh  Ç}  Çö  Ç∞  Ç…    ÜlÑlá.Ä∞/// Represents the coordinates of the point in a selection, and the text
/// direction at that point, relative to top left of the [RenderEditable] that
/// holds the selection. áEq áááô9/// Creates a description of a point in a text selection.áö
á†  á¶á¨   á∫ÄùàRÄÜ/// Coordinates of the lower left or lower right corner of the selection,
/// relative to the top left of the [RenderEditable] object. à\Yà¨8/// Direction of the text at this edge of the selection. äó>ä´   äóäòà∫Å!à‘  à◊àﬂ  à∫àªâﬂÄ¥âÚ   âﬂâ‡ááä⁄ò)ïÄäü/// The consecutive sequence of [TextPosition]s that the caret should move to
/// when the user navigates the paragraph using the upward arrow key or the
/// downward arrow key.
///
/// {@template flutter.rendering.RenderEditable.verticalArrowKeyMovement}
/// When the user presses the upward arrow key or the downward arrow key, on
/// many platforms (macOS for instance), the caret will move to the previous
/// line or the next line, while maintaining its original horizontal location.
/// When it encounters a shorter line, the caret moves to the closest horizontal
/// location within that line, and restores the original horizontal location
/// when a long enough line is encountered.
///
/// Additionally, the caret will move to the beginning of the document if the
/// upward arrow key is pressed and the caret is already on the first line. If
/// the downward arrow key is pressed next, the caret will restore its original
/// horizontal location and move to the second line. Similarly the caret moves
/// to the end of the document if the downward arrow key is pressed when it's
/// already on the last line.
///
/// Consider a left-aligned paragraph:
///   aa|
///   a
///   aaa
/// where the caret was initially placed at the end of the first line. Pressing
/// the downward arrow key once will move the caret to the end of the second
/// line, and twice the arrow key moves to the third line after the second "a"
/// on that line. Pressing the downward arrow key again, the caret will move to
/// the end of the third line (the end of the document). Pressing the upward
/// arrow key in this state will result in the caret moving to the end of the
/// second line.
///
/// Vertical caret runs are typically interrupted when the layout of the text
/// changes (including when the text itself changes), or when the selection is
/// changed by other input events or programmatically (for example, when the
/// user pressed the left arrow key).
/// {@endtemplate}
///
/// The [movePrevious] method moves the caret location (which is
/// [VerticalCaretMovementRun.current]) to the previous line, and in case
/// the caret is already on the first line, the method does nothing and returns
/// false. Similarly the [moveNext] method moves the caret to the next line, and
/// returns false if the caret is already on the last line.
///
/// The [moveByOffset] method takes a pixel offset from the current position to move
/// the caret up or down.
///
/// If the underlying paragraph's layout changes, [isValid] becomes false and
/// the [VerticalCaretMovementRun] must not be used. The [isValid] property must
/// be checked before calling [movePrevious], [moveNext] and [moveByOffset],
/// or accessing [current]. ïøÄöï◊ïÿïŸ ïﬂïÂ  ïÛï˘  ñ
ñ  ñ)ñ/  ñ@ñF   ñ]ñd  ñvñz  ñä!ñó  ñ∞'ñÀ  ñ€ñ  ñ˛ó óôÌgö 
öRöSö-öQö.ö3ö;öPö<öDóÇ”ò]Å//// Whether this [VerticalCaretMovementRun] can still continue.
///
/// A [VerticalCaretMovementRun] run is valid if the underlying text layout
/// hasn't changed.
///
/// The [current] value and the [movePrevious], [moveNext] and [moveByOffset]
/// methods must not be accessed when [isValid] is false.   ù`ù)   ùùöYÇØöx  öêöï   ùpÅXùÅ   ùpùqûÃÅ°ü8`/// Move back to the previous element.
///
/// Returns true and updates [current] if successful.   †qÇê°[Äÿ/// Move forward or backward by a number of elements determined
/// by pixel [offset].
///
/// If [offset] is negative, move backward; otherwise move forward.
///
/// Returns true and updates [current] if successful. °h°p    £¿i¶◊ÉÀ/// Displays some text in a scrollable container with a potentially blinking
/// cursor and with gesture recognizers.
///
/// This is the renderer for an editable text field. It does not directly
/// provide affordances for editing the text, but it does handle text selection
/// and manipulation of the text cursor.
///
/// The [text] is displayed, scrolled by the given [offset], aligned according
/// to [textAlign]. The [maxLines] property controls whether the text displays
/// on one line or many. The [selection], if it is not collapsed, is painted in
/// the [selectionColor]. If it _is_ collapsed, then it represents the cursor
/// position. The cursor is shown while [showCursor] is true. It is painted in
/// the [cursorColor].
///
/// Keyboard handling, IME handling, scrolling, toggling the [showCursor] value
/// to actually blink the cursor, and other features not mentioned above are the
/// responsibility of higher layers and not handled by this object. ßüì ©œ©›Ç/// Creates a render object that implements the visual aspects of a text field.
///
/// The [textAlign] argument defaults to [TextAlign.start].
///
/// If [showCursor] is not specified, then it defaults to hiding the cursor.
///
/// The [maxLines] property can be set to null to remove the restriction on
/// the number of lines. By default, it is 1, meaning this is a single-line
/// text field. If it is not null, it must be greater than zero.
///
/// Use [ViewportOffset.zero] for the [offset] if there is no need for
/// scrolling.+©‰©Ò  ©˙$™  ™$%™/  ™O™W  ™g™o  ™â™ü  ™Æ™µ  ™¬'™÷  ™Ô%´  ´´   ´1´7  ´D´J  ´^´k  ´z´Ç  ´ïÄˇ¨Ä  ¨ö,¨¶  ¨Ã¨‹  ¨Í≠  ≠≠  ≠.≠4  ≠I≠O  ≠d&≠y  ≠ê5≠†  ≠À≠”  ≠≠ˆ  ÆÆ  Æ"Æ*  Æ@ÆI  ÆZÆc  Æt!Æz  Æõ!Æ£  Æ¬Æ   ÆÂ@Æ¯  Ø+=Ø=  Øn Øu  ØîFØö  Ø‡ØÏ  ∞ ∞  ∞!∞"  ∞C#∞R  ∞l∞Ñ  ∞ê(∞®  ∞æ∞–  Å™:™C™D´*´S´ï´ñ´†¨r´®´…¨8¨ë¨≤¨º¨Ω≠#≠>≠Z≠∞≠æ≠ø≠ÁÆÆ7ÆêÆ±Æ∑Æ∏Æ‹ØØØØØ ØRØTØUØbØcØµØªØ≈Ø∆ØŒØŸØœØ“Ø’Øÿ∞0∞4∞5∞‡∞Ê±∞¯∞∞Á∞Û±∞˚±±±±8±)±!±±$±5±,±7±B±H±ï±“±|±f±S±d±]±T±`±i±z±s±j±v±±î±â±Ä±å±†±‹±‚≤≤m±ˆ±Ì±Ó±˘≤≤≤±˙≤≤≤≤≤*≤w≤}≤Õ≥6≤¥≤à≤ë≤≤≤í≤û≤®≤©≤«≤∑≤ ≤ÿ≥@≥F≥p≥l≥G≥Y≥Z≥d≥e≥o≥z≥Ä≥ì≥ç≥Å≥ê≥ù≥£≥œ≥π≥±≥§≥¥≥…≥º≥Ã≥Ê≥Ÿ≥Ë≥ÛµÉ¥≥˛¥¥¥¥¥?¥2¥A¥c¥Y¥à¥≠¥p¥e¥s¥}¥~¥ä¥î¥ï¥õ¥´¥ú¥Ø¥ ¥ƒ¥Ã¥Â¥›¥ı¥˘¥¥Á¥Û¥˜¥˚µµ
µµ=µ+µ?µjµ\µlµôµçµ¶µõµ©µ∂µªµ∑µºµ¬µΩµ÷µÃµÿµÛµÈµı∂∂∂∂,∂!∂.∂H∂@∂J∂f∂Y∂h∂ä∂|∂å∂≥∂°∂µ∂Ó∂“∂∑%∑∑'∑V∑@∑X∑â∑u∑ã∑∫∑¶∑º∑‰∑◊∑Ê∏∑˙∏∏"∏∏$∏D∏6∏F∏e∏[∏p∏g∏s∏î∏Å∏°∏ñ∏§<ªìNª /// Child render objects ªÂ3º  ¿ C )¿ C7  ¿ G”¿ GÍ  ¿ H„8¿ H¸ ¿ I¿ I¿ I¿ I>G¿ IZ ¿ In¿ IÉ¿ IÑ¿ IâR¿ I• ¿ Iƒ¿ IŸ¿ I⁄¿ JmA¿ Jé  ¿ L7¿ L$  ¿ MXÇ	¿ OTÅ‡/// Whether the [handleEvent] will propagate pointer events to selection
/// handlers.
///
/// If this property is true, the [handleEvent] assumes that this renderer
/// will be notified of input gestures via [handleTapDown], [handleTap],
/// [handleDoubleTap], and [handleLongPress].
///
/// If there are any gesture recognizers in the text span, the [handleEvent]
/// will still propagate pointer events to those recognizers.
///
/// The default value of this property is false. ¿ Ré¿ Rï  ¿ SÓ¿ Sı  ¿ UC¿ UH  ¿ X¥Å3¿ Y“Ä˝/// The object that controls the text selection, used by this render object
/// for implementing cut, copy, and paste keyboard shortcuts.
///
/// It will make cut, copy and paste functionality work with the most recently
/// set [TextSelectionDelegate]. ¿ \QO¿ \k ¿ \á¿ \î¿ \ô¿ \ï¿ \ö¿ \ü¿ \õ¿ _M¿ _" ¿ _<¿ _I¿ _N¿ _J¿ _O¿ _T¿ _P¿ uå¿ uû  ¿ uÆ(¿ u¿  ¿ u⁄C¿ v   ¿ wE!¿ wR  ¿ Öã¿ Öê  ¿ Öˇ¿ Ü  ¿ àZ¿ à_ ¿ àk¿ âx¿ â} ¿ âä¿ äl¿ äq ¿ ä}¿ ç¿ ç  ¿ èy¿ è~  ¿ ê€¿ ê‡  ¿ ó∆¿ ó’  ¿ ö	¿ ö  ¿ õÑ¿ õã ¿ õö¿ û¿ û  ¿ †¿ †  ¿ ¶D¿ ¶N  ¿ ® ¿ ®*  ¿ ®ÂÅb¿ ™.Å+/// The padding applied to text field. Used to determine the bounds when
/// moving the floating cursor.
///
/// Defaults to a padding with left, top and right set to 4, bottom to 5.
///
/// See also:
///
///  * [FloatingCursorDragState], which explains the floating cursor feature
///    in detail. ¿ ™≈¿ ™  ¿ ™ﬁ¿ ™Á-¿ ™˘  ¿ ≠·!¿ ≠Á  ¿ ∏µ¿ ∏º ¿ ∏œ¿ πñ"¿ πõ ¿ π´¿ πØ¿ π∞¿ ∫aÄî¿ ∫Á[/// Collected during [describeSemanticsConfiguration], used by
/// [assembleSemanticsNode]. ¿ ª˛4¿ º!  ¿¶¿´  ¿!Ì¿"  ¿"*¿"/  ¿#±¿#π  ¿#—%¿#Ÿ  ¿Iu3¿Ií  ¿PD¿PN  ¿a§$¿a´ ¿aΩ¿a√¿aƒ¿aÃ¿a‘  ¿aÁ¿aÏ ¿b¿b	¿b ¿b#¿b, ¿b1 ¿bG¿bP¿bU ¿bi¿br!¿bw ¿bé¿bó*¿bü  ¿~…O¿~Ë ¿~˛¿	¿¿
¿¿¿Ü	N¿Ü* ¿Ü;¿ÜF¿ÜT¿ÜG¿ÜU¿ÜV^¿ AØÅn¿ BıÅ/// The [RenderEditablePainter] to use for painting above this
/// [RenderEditable]'s text content.
///
/// The new [RenderEditablePainter] will replace the previously specified
/// foreground painter, and schedule a repaint if the new painter's
/// `shouldRepaint` method returns true.   ¿ CMÄ®¿ CQ  ¿ Cc!¿ C{   ¿ FzÅV¿ GºÅ/// Sets the [RenderEditablePainter] to use for painting beneath this
/// [RenderEditable]'s text content.
///
/// The new [RenderEditablePainter] will replace the previously specified
/// painter, and schedule a repaint if the new painter's `shouldRepaint`
/// method returns true.   ¿ GˆÄä¿ G˙  ¿ H!¿ H   ¿ I‡Ää¿ J    ¿ Kîl¿ K∏    ¿ Ofx¿ O®'/// {@macro dart.ui.textHeightBehavior}   ¿ O·Ä√¿ OÂ  ¿ O¯¿ P   ¿ P®|¿ Pˆ8/// {@macro flutter.painting.textPainter.textWidthBasis}   ¿ Q'Ä≤¿ Q+  ¿ Q:¿ QJ   ¿ Q›ÄÆ¿ Rev/// The pixel ratio of the current device.
///
/// Should be obtained by querying MediaQuery for the devicePixelRatio.   ¿ R™Äó¿ RÆ  ¿ Rø¿ R«   ¿ SEÄ¶¿ S¡j/// Character used for obscuring text if [obscureText] is true.
///
/// Must have a length of exactly one.   ¿ TÄ»¿ T  ¿ T#¿ T+   ¿ Tÿh¿ U$@/// Whether to hide the text being edited (e.g., for passwords).   ¿ UXÄ≥¿ U\  ¿ Uh
¿ Un   ¿ VÄ‰¿ V¥Äà/// Controls how tall the selection highlight boxes are computed to be.
///
/// See [ui.BoxHeightStyle] for details on available styles.   ¿ Vˆk¿ V˙  ¿ W¿ W"   ¿ WeÄ‡¿ XÄá/// Controls how wide the selection highlight boxes are computed to be.
///
/// See [ui.BoxWidthStyle] for details on available styles.   ¿ XHh¿ XL  ¿ X`¿ Xr   ¿ YÏÇb¿ \Å˝/// Track whether position of the start of the selected text is within the viewport.
///
/// For example, if the text contains "Hello World", and the user selects
/// "Hello", then scrolls so only "World" is visible, this will become false.
/// If the user scrolls back so that the "H" is visible again, this will
/// become true.
///
/// This bool indicates whether the text is scrolled so that the handle is
/// inside the text field viewport, as opposed to whether it is actually
/// visible on the screen.   ¿ \•Ç`¿ ^”Åˇ/// Track whether position of the end of the selected text is within the viewport.
///
/// For example, if the text contains "Hello World", and the user selects
/// "World", then scrolls so only "Hello" is visible, this will become
/// 'false'. If the user scrolls back so that the "d" is visible again, this
/// will become 'true'.
///
/// This bool indicates whether the text is scrolled so that the handle is
/// inside the text field viewport, as opposed to whether it is actually
/// visible on the screen.   ¿ s°Å.¿ t´ÄÙ/// Returns a plain text version of the text in [TextPainter].
///
/// If [obscureText] is true, returns the obscured text. See
/// [obscureText] and [obscuringCharacter].
/// In order to get the styled text as an [InlineSpan] tree, use [text].   ¿ t”Ä∂¿ uoÄÖ/// The text to paint in the form of a tree of [InlineSpan]s.
///
/// In order to get the plain text representation, use [plainText].   ¿ v!Å ¿ v%  ¿ v*¿ v7   ¿ wjÇ¿ wz    ¿ yäe¿ yÀ0/// How the text should be aligned horizontally.   ¿ yÚÄû¿ yˆ  ¿ z ¿ z   ¿ zîÉW¿ }æÇ3/// The directionality of the text.
///
/// This decides how the [TextAlign.start], [TextAlign.end], and
/// [TextAlign.justify] values of [textAlign] are interpreted.
///
/// This is also used to disambiguate how to render bidirectional text. For
/// example, if the [text] is an English phrase followed by a Hebrew phrase,
/// in a [TextDirection.ltr] context the English phrase will be on the left
/// and the Hebrew phrase to its right, while in a [TextDirection.rtl]
/// context, the English phrase will be on the right and the Hebrew phrase on
/// its left.   ¿ }ÓÄŒ¿ }Ú  ¿ ~ ¿ ~   ¿ ~¿Ç
¿ Ä¨ÅÕ/// Used by this renderer's internal [TextPainter] to select a locale-specific
/// font.
///
/// In some cases the same Unicode character may be rendered differently depending
/// on the locale. For example the 'È™®' character is rendered differently in
/// the Chinese and Japanese locales. In these cases the [locale] may be used
/// to select a locale-specific font.
///
/// If this value is null, a system-dependent algorithm is used to select
/// the font.   ¿ ÄÕÄì¿ Ä—  ¿ Äÿ¿ Ä·   ¿ ÅdÄ†¿ Åﬁe/// The [StrutStyle] used by the renderer's internal [TextPainter] to
/// determine the strut to use.   ¿ ÇÄ£¿ Ç  ¿ Ç¿ Ç#   ¿ ÇÆd¿ ÇÍ./// The color to use when painting the cursor.   ¿ ÉI¿ É  ¿ É%¿ É-   ¿ ÉbÅƒ¿ ÑÈÅe/// The color to use when painting the cursor aligned to the text while
/// rendering the floating cursor.
///
/// Typically this would be set to [CupertinoColors.inactiveGray].
///
/// If this is null, the background cursor is not painted.
///
/// See also:
///
///  * [FloatingCursorDragState], which explains the floating cursor feature
///    in detail.   ¿ Ö)^¿ Ö-  ¿ ÖC¿ ÖK   ¿ ÖßU¿ Ö‚ /// Whether to paint the cursor.   ¿ Ü"Åè¿ Ü&  ¿ Ü1¿ ÜF   ¿ àP¿ àA./// Whether the editable is currently focused.   ¿ àtÄá¿ àx  ¿ àÅ
¿ àá   ¿ àˇv¿ â]R/// Whether this rendering object will take a full line regardless the text width.   ¿ âìÄÅ¿ âó  ¿ â°
¿ âß   ¿ äQ¿ äS//// Whether this rendering object is read only.   ¿ äÜÄá¿ ää  ¿ äì
¿ äô   ¿ ãÇ¿ å˝ÅŒ/// The maximum number of lines for the text to span, wrapping if necessary.
///
/// If this is 1 (the default), the text will not wrap, but will extend
/// indefinitely instead.
///
/// If this is null, there is no limit to the number of lines.
///
/// When this is not null, the intrinsic height of the render object is the
/// height of one line of text multiplied by this value. In other words, this
/// also controls the height of the actual editing widget.   ¿ ç(Åˆ¿ çP/// The value may be null. If it is not null, then it must be greater than zero. ¿ çà
¿ çé   ¿ è"T¿ è`2/// {@macro flutter.widgets.editableText.minLines}   ¿ èãÄ¯¿ è‚P/// The value may be null. If it is not null, then it must be greater than zero. ¿ èÎ
¿ èÒ   ¿ êáQ¿ êƒ1/// {@macro flutter.widgets.editableText.expands}   ¿ êÏz¿ ê  ¿ ê¯
¿ ê˛   ¿ ëjr¿ ë©1/// The color to use when painting the selection.   ¿ ëﬂT¿ ë„  ¿ ëÚ¿ ë˙   ¿ í7Ç*¿ î1Å/// Deprecated. Will be removed in a future version of Flutter. Use
/// [textScaler] instead.
///
/// The number of font pixels for each logical pixel.
///
/// For example, if the text scale factor is 1.5, text will be 50% larger than
/// the specified font size.  ¿ ìM¿ ìN¿ ìX¿ î"¿ ì^¿ ì}¿ ìÍ¿ îdÅ+¿ ïA  ¿ ïQ¿ ïY  ¿ îd¿ îe¿ îo¿ ï9¿ îu¿ îî¿ ï¿ ïìl¿ ïŸ4/// {@macro flutter.painting.textPainter.textScaler}   ¿ ñÄ¢¿ ñ  ¿ ñ¿ ñ   ¿ ñ®Å¿ ó´Ä„/// The region of text that is selected, if any.
///
/// The caret position is represented by a collapsed selection.
///
/// If [selection] is null, there is no selection and attempts to
/// manipulate the selection will throw.   ¿ ó„Ä⁄¿ óÁ  ¿ óÒ¿ ò   ¿ ò¡ÅE¿ ôÙÅ/// The offset at which the text should be painted.
///
/// If the text content is larger than the editable line itself, the editable
/// line clips the text. This property controls which part of the text is
/// visible by shifting the text by the given offset before clipping.   ¿ ö#Å¿ ö'  ¿ ö.¿ ö>   ¿ õ6K¿ õe!/// How thick the cursor will be.   ¿ õ°Äâ¿ õ•  ¿ õ±¿ õπ   ¿ ú.Å‚¿ ù€Å)/// How tall the cursor will be.
///
/// This can be null, in which case the getter will actually return [preferredLineHeight].
///
/// Setting this to itself fixes the value to the current [preferredLineHeight]. Setting
/// this to null returns the behavior of deferring to [preferredLineHeight].   ¿ û,Äç¿ û0  ¿ û=¿ ûF   ¿ ûΩÅU¿ üËÅ/// {@template flutter.rendering.RenderEditable.paintCursorAboveText}
/// If the cursor should be painted on top of the text or underneath it.
///
/// By default, the cursor should be painted on top for iOS platforms and
/// underneath for Android platforms.
/// {@endtemplate}   ¿ †/Å©¿ †3  ¿ †H
¿ †N   ¿ °‹Ç¿ £∂Åæ/// {@template flutter.rendering.RenderEditable.cursorOffset}
/// The offset that is used, in pixels, when painting the cursor on screen.
///
/// By default, the cursor position should be set to an offset of
/// (-[cursorWidth] * 0.5, 0.0) on iOS platforms and (0, 0) on Android
/// platforms. The origin from where the offset is applied to is the arbitrary
/// location where the cursor ends up being rendered from by default.
/// {@endtemplate}   ¿ £‰L¿ £Ë  ¿ £ı¿ £˝   ¿ §4Ä•¿ §Æg/// How rounded the corners of the cursor should be.
///
/// A null value is the same as [Radius.zero].   ¿ §‹M¿ §‡  ¿ §Ì¿ §ˆ   ¿ •-Å¿ ¶Äœ/// The [LayerLink] of start selection handle.
///
/// [RenderEditable] is responsible for calculating the [Offset] of this
/// [LayerLink], which will be used as [CompositedTransformTarget] of start handle.   ¿ ¶gÄ¶¿ ¶k  ¿ ¶Ä¿ ¶ã   ¿ ßÅ¿ ßÛÄÀ/// The [LayerLink] of end selection handle.
///
/// [RenderEditable] is responsible for calculating the [Offset] of this
/// [LayerLink], which will be used as [CompositedTransformTarget] of end handle.   ¿ ®AÄ†¿ ®E  ¿ ®X¿ ®c   ¿ ™Lv¿ ™úD/// Returns true if the floating cursor is visible, false otherwise.   ¿ ´Ç≈¿ ≠§Çf/// Whether to allow the user to change the selection.
///
/// Since [RenderEditable] does not handle selection manipulation
/// itself, this actually only affects whether the accessibility
/// hints provided to the system (via
/// [describeSemanticsConfiguration]) will enable selection
/// manipulation. It's the responsibility of this object's owner
/// to provide selection manipulation affordances.
///
/// This field is used by [selectionEnabled] (which then controls
/// the accessibility hints mentioned above). When null,
/// [obscureText] is used to determine the value of
/// [selectionEnabled] instead.   ¿ ÆÄ’¿ Æ
  ¿ Æ%¿ Æ,   ¿ ÆﬂÑn¿ ≥ ÉÔ/// Whether interactive selection are enabled based on the values of
/// [enableInteractiveSelection] and [obscureText].
///
/// Since [RenderEditable] does not handle selection manipulation
/// itself, this actually only affects whether the accessibility
/// hints provided to the system (via
/// [describeSemanticsConfiguration]) will enable selection
/// manipulation. It's the responsibility of this object's owner
/// to provide selection manipulation affordances.
///
/// By default, [enableInteractiveSelection] is null, [obscureText] is false,
/// and this getter returns true.
///
/// If [enableInteractiveSelection] is null and [obscureText] is true, then this
/// getter returns false. This is the common case for password fields.
///
/// If [enableInteractiveSelection] is non-null then its value is
/// returned. An application might [enableInteractiveSelection] to
/// true to enable interactive selection for a password field, or to
/// false to unconditionally disable interactive selection.   ¿ ≥QÅ¿¿ ¥“ÄÇ/// The color used to paint the prompt rectangle.
///
/// The prompt rectangle will only be requested on non-web iOS applications.   ¿ µf¿ µ  ¿ µ(¿ µ0   ¿ ∑îÅ¿ ∏éÄ‰/// The maximum amount the text is allowed to scroll.
///
/// This value is only valid after layout and can change as additional
/// text is entered or removed in order to accommodate expanding when
/// [expands] is set to true.   ¿ ∏’4¿ ∏‡    ¿ πÄÜ¿ πuX/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.hardEdge].   ¿ πºÄ°¿ π¿  ¿ πÕ
¿ π”   ¿ Ú”'¿ Ú‹    ¿ Ú˛I¿ Û    ¿ ÛKÄ¥¿ ÛV    ¿ ÙÄ´¿ Ù    ¿ ˆ\S¿ ˆe    ¿ÀÄ◊¿jÄè/// An estimate of the height of a line in the text. See [TextPainter.preferredLineHeight].
/// This does not require the layout to be updated.   ¿#˚Å¿$≈Äµ/// {@template flutter.rendering.RenderEditable.lastSecondaryTapDownPosition}
/// The position of the most recent secondary tap down event on this text
/// input.
/// {@endtemplate}   ¿3äz¿3÷8/// {@macro flutter.painting.TextPainter.wordBoundaries}   RºÇ º.   ººæÎÇ¿æ  ø	!ø!   ¿ C˘Ç}¿ C˛  ¿ D!¿ D%   ¿ J≤Äﬁ¿ J“    ¿ L>Å¿ L^    ¿ _ZÅç¿ _ß=/// Returns the TextPosition above or below the given offset. ¿ _¿¿ _Œ  ¿ _◊¿ _ﬂ   ¿ a
Å ¿ af?/// {@macro flutter.services.TextLayoutMetrics.getLineAtOffset} ¿ av¿ aÑ  ¿ aL¿ aM¿ bÿÄ±¿ c*9/// {@macro flutter.painting.TextPainter.getWordBoundary} ¿ c:¿ cH  ¿ c¿ c¿ cçÇ+¿ cÌD/// {@macro flutter.services.TextLayoutMetrics.getTextPositionAbove} ¿ d¿ d  ¿ c‘¿ c’¿ eºÇ*¿ fD/// {@macro flutter.services.TextLayoutMetrics.getTextPositionBelow} ¿ f1¿ f?  ¿ f¿ f¿ hÖg¿ h  ¿ h.¿ h6   ¿ mrÄû¿ mw  ¿ må¿ mû  ¿ mß¿ mæ   ¿ nÑ%¿ n  ¿ n'¿ n6  ¿ nD¿ n[   ¿ r=ÄÈ¿ rN   ¿ r=¿ r>¿ s*s¿ s;   ¿ s*¿ s+¿ áµN¿ á∫    ¿ µ~Ç¿ ∑%ÅD/// Dismisses the currently displayed prompt rectangle and displays a new prompt rectangle
/// over [newRange] in the given color [promptRectColor].
///
/// The prompt rectangle will only be requested on non-web iOS applications.
///
/// When set to null, the currently displayed prompt rectangle (if any) will be dismissed. ¿ ∑8¿ ∑D   ¿ º7É¿ ΩIÄ˘/// Returns a list of rects that bound the given selection, and the text
/// direction. The text direction is used by the engine to calculate
/// the closest position to a given point.
///
/// See [TextPainter.getBoxesForSelection] for more details. ¿ Ω^¿ Ωm   ¿ øZãZ¿ øk  ¿ øä¿ ø¢  ¿ øZ¿ ø[¿  ∏Äˇ¿  Ω  ¿  Ã¿  ‘   ¿ ÀªíM¿ ÀÃ  ¿ À‚¿ ÀÒ  ¿ Àˆ¿ Ã  ¿ Ã ¿ Ã.  ¿ Àª¿ Àº¿ ﬁÄº¿ ﬁ  ¿ ﬁ1¿ ﬁ6   ¿ ﬂöu¿ ﬂü  ¿ ﬂ≥¿ ﬂ¬   ¿ ‡Å»¿ ‡  ¿ ‡<¿ ‡B   ¿ ·ﬂÅ ¿ ·‰  ¿ ‚	¿ ‚   ¿ „≠Ç¿ „≤  ¿ „—¿ „◊   ¿ Â Ç5¿ Âœ  ¿ ÂÔ¿ Âı   ¿ ËÅG¿ Ë  ¿ Ë
¿ Ë    ¿ ÈNÅi¿ ÈY  ¿ Èj
¿ Èo   ¿ ÎÛÄ¸¿ Î¯  ¿ Ï¿ Ï   ¿ ÏÛÅ‚¿ Ì  ¿ Ì¿ Ì  ¿ ÏÛ¿ ÏÙ¿ ÓŸÅ¿ ÓÍ   ¿ ÓŸ¿ Ó⁄¿ ÔÈÅg¿ Ô˙   ¿ ÔÈ¿ ÔÍ¿ ÒTÅ{¿ Òe  ¿ Òs¿ Òà  ¿ ÒT¿ ÒU¿ Ù≤Å¿ Ùπ  ¿ ÙÕ¿ Ù”   ¿ ˆ≥ÜÌ¿ ˘;ÇV/// Returns the local coordinates of the endpoints of the given selection.
///
/// If the selection is collapsed (and therefore occupies a single point), the
/// returned list is of length one. Otherwise, the selection is not collapsed
/// and the returned list is of length two. In this case, however, the two
/// points might actually be co-located (e.g., because of a bidirectional
/// selection that contains some text but whose ends meet in the middle).
///
/// See also:
///
///  * [getLocalRectForCaret], which is the equivalent but for
///    a [TextPosition] rather than a [TextSelection]. ¿ ˘T¿ ˘c   ¿ ˝§Éê¿ ˇÅK/// Returns the smallest [Rect], in the local coordinate system, that covers
/// the text within the [TextRange] specified.
///
/// This method is used to calculate the approximate position of the IME bar
/// on iOS.
///
/// Returns null if [TextRange.isValid] is false for the given `range`, or the
/// given `range` is collapsed. ¿ ˇ¿ ˇ*   ¿8Ç¿îÅ>/// Returns the position in the text for the given global coordinate.
///
/// See also:
///
///  * [getLocalRectForCaret], which is the reverse operation, taking
///    a [TextPosition] and returning a [Rect].
///  * [TextPainter.getPositionForOffset], which is the equivalent method
///    for a [TextPainter] object. ¿®¿∞   ¿Gân¿?Å‹/// Returns the [Rect] in local coordinates for the caret at the given text
/// position.
///
/// See also:
///
///  * [getPositionForPoint], which is the reverse operation, taking
///    an [Offset] in global coordinates and returning a [TextPosition].
///  * [getEndpointsForSelection], which is the equivalent but for
///    a selection rather than a particular text position.
///  * [TextPainter.getOffsetForCaret], the equivalent method for a
///    [TextPainter] object. ¿T¿b   ¿πÇ4¿Ã  ¿Â¿Ì  ¿π¿∫¿ÒÇ÷¿  ¿¿%  ¿Ò¿Ú¿ƒÇ.¿»  ¿›¿Â   ¿ˆÜá¿˝  ¿¿   ¿Å[¿î  ¿Æ¿∂  ¿Å¿Ç¿‡Å ¿Û  ¿¿  ¿‡¿·¿‰Äµ¿˜  ¿¿%  ¿‰¿Â¿ù6¿Æ  ¿∫¿¬  ¿ù¿û¿◊Ñ¿ı  ¿¿  ¿ ¿1  ¿◊¿ÿ¿„¿‰¿">Åo¿"O  ¿"[¿"i  ¿"o¿"Ä  ¿">¿"?¿%ÅS¿%∑Ä¢/// Tracks the position of a secondary tap event.
///
/// Should be called before attempting to change the selection based on the
/// position of a secondary tap. ¿%Œ¿%ﬁ   ¿&^ÅÖ¿'ÖÅ/// If [ignorePointer] is false (the default) then this method is called by
/// the internal gesture recognizer's [TapGestureRecognizer.onTapDown]
/// callback.
///
/// When [ignorePointer] is true, an ancestor widget must respond to tap
/// down events by calling this method. ¿'ì¿'£   ¿'Êi¿'Î  ¿'˙¿(
   ¿(SÅe¿)qÅ/// If [ignorePointer] is false (the default) then this method is called by
/// the internal gesture recognizer's [TapGestureRecognizer.onTap]
/// callback.
///
/// When [ignorePointer] is true, an ancestor widget must respond to tap
/// events by calling this method.   ¿)ªD¿)¿    ¿*ÅÄ¿+4Å/// If [ignorePointer] is false (the default) then this method is called by
/// the internal gesture recognizer's [DoubleTapGestureRecognizer.onDoubleTap]
/// callback.
///
/// When [ignorePointer] is true, an ancestor widget must respond to double
/// tap events by calling this method.   ¿+áÅÄ¿,∏Å/// If [ignorePointer] is false (the default) then this method is called by
/// the internal gesture recognizer's [LongPressGestureRecognizer.onLongPress]
/// callback.
///
/// When [ignorePointer] is true, an ancestor widget must respond to long
/// press events by calling this method.   ¿-
P¿-    ¿-^Çö¿/yÇ/// Move selection to the location of the last tap down.
///
/// {@template flutter.rendering.RenderEditable.selectPosition}
/// This method is mainly used to translate user inputs in global positions
/// into a [TextSelection]. When used in conjunction with a [EditableText],
/// the selection change is fed back into [TextEditingController.selection].
///
/// If you have a [TextEditingController], it's generally easier to
/// programmatically manipulate its `value` or `selection` directly.
/// {@endtemplate} ¿/ä$¿/™   ¿/¸Éä¿0√Äπ/// Select text between the global positions [from] and [to].
///
/// [from] corresponds to the [TextSelection.baseOffset], and [to] corresponds
/// to the [TextSelection.extentOffset]. ¿0÷¿0Á  ¿0Ï
¿0ı  ¿0¯$¿1   ¿4Å¿4ê|/// Select a word around the location of the last tap down.
///
/// {@macro flutter.rendering.RenderEditable.selectPosition} ¿4ù$¿4Ω   ¿5Ö¿6ôÅr/// Selects the set words of a paragraph that intersect a given range of global positions.
///
/// The set of words selected are not strictly bounded by the range of global positions.
///
/// The first and last endpoints of the selection will always be at the
/// beginning and end of a word respectively.
///
/// {@macro flutter.rendering.RenderEditable.selectPosition} ¿6Æ¿6ø  ¿6ƒ
¿6Õ  ¿6–$¿6   ¿:$Ç˙¿:™z/// Move the selection to the beginning or end of a word.
///
/// {@macro flutter.rendering.RenderEditable.selectPosition} ¿:ª$¿:€   ¿="ã¿=¢X/// Returns a [TextSelection] that encompasses the word at the given
/// [TextPosition]. ¿=≤¿=¿  ¿=¿=Ä¿I≠Åô¿I–  ¿IÂ¿IÌ  ¿I¸!¿J  ¿I˜¿J¿J¿J¿OTÄÏ¿OY    ¿P¥Çã¿Q`Ä†/// On iOS, the cursor is taller than the cursor on Android. The height
/// of the cursor for iOS is approximate and obtained through an eyeball
/// comparison.   ¿S∞ÅÕ¿S∑  ¿SÃ¿S‘   ¿UÅÇ¶¿Uü  ¿U∞$¿U   ¿UÅ¿UÇ¿Uç¿Ué¿X+Ç¿X>  ¿XQ$¿Xk  ¿Xw¿XÖ  ¿X+¿X,¿Z=Ü}¿ZN   ¿Z=¿Z>¿b∆Å:¿b‘  ¿bÛ¿b˚  ¿c¿c   ¿dä∆¿d›Ä≈/// Returns the position within the text field closest to the raw cursor offset.
///
/// See also:
///
///  * [FloatingCursorDragState], which explains the floating cursor feature
///    in detail. ¿e¿e
  ¿e¿e"   ¿nŒÖl¿oªÄŸ/// Sets the screen position of the floating cursor and the text position
/// closest to the cursor.
///
/// See also:
///
///  * [FloatingCursorDragState], which explains the floating cursor feature
///    in detail. ¿oÕ¿oÊ  ¿oÏ¿oÙ  ¿p¿p  ¿p#¿p,   ¿t>É¿tT  ¿tc¿tq  ¿t¿tï   ¿wUÑC¿z,Ç°/// Starts a [VerticalCaretMovementRun] at the given location in the text, for
/// handling consecutive vertical caret movements.
///
/// This can be used to handle consecutive upward/downward arrow key movements
/// in an input field.
///
/// {@macro flutter.rendering.RenderEditable.verticalArrowKeyMovement}
///
/// The [VerticalCaretMovementRun.isValid] property indicates whether the text
/// layout has changed and the vertical caret run is invalidated.
///
/// The caller should typically discard a [VerticalCaretMovementRun] when
/// its [VerticalCaretMovementRun.isValid] becomes false, or on other
/// occasions where the vertical caret run should be interrupted. ¿zG¿zU   ¿{úÉ)¿{°  ¿{∞¿{¡  ¿{…¿{—   ¿ÉZ¿"  ¿5¿F  ¿N"¿h  ¿r¿z   ¿Ç{Ä‰¿Çå  ¿Ç†¿Ç´  ¿Ç±¿Ç∫  ¿Ç{¿Ç|¿ÉcÇ¢¿Ét  ¿Éz¿Éã  ¿Éì¿Éõ  ¿Éc¿Éd¿Ü\Å1¿Ün  ¿Üã¿Üô  ¿Ü\¿Ü]¿áëÉÑ¿á¢  ¿á∂&¿á”  ¿áë¿áí¿ãÄÚ¿ã;   ¿ã¿ã ¿åÖ·¿å  ¿åFk ¿åF¿å` ¿åg¿å  ¿åó¿åé¿åô¿å©¿åÆ¿åØ¿çó¿çÆ  ¿åµJ¿å’   ¿åµ¿å∂¿ç/¿ç   ¿ç¿ç¿ç6+¿çK   ¿ç6¿ç7¿çe/¿çÄ    ¿ç∫ÅÜ¿çæ  ¿ç∆¿çﬁ   ¿èDÅ[¿èU  ¿è[¿èl  ¿èt¿è|  ¿èD¿èE¿ê£v¿ê¥  ¿êª¿ê   ¿ê£¿ê§¿ëa¿ë.   ¿ë¿ë¿ëÇl¿ë†  ¿ë±$¿ëÀ  ¿ëÇ¿ëÉ¿ëé¿ëè ¿ëÚäS¿ñ˘Ñ˜/// An interface that paints within a [RenderEditable]'s bounds, above or
/// beneath its text content.
///
/// This painter is typically used for painting auxiliary content that depends
/// on text layout metrics (for instance, for painting carets and text highlight
/// blocks). It can paint independently from its [RenderEditable], allowing it
/// to repaint without triggering a repaint on the entire [RenderEditable] stack
/// when only auxiliary content changes (e.g. a blinking cursor) are present. It
/// will be scheduled to repaint when:
///
///  * It's assigned to a new [RenderEditable] (replacing a prior
///    [RenderEditablePainter]) and the [shouldRepaint] method returns true.
///  * Any of the [RenderEditable]s it is attached to repaints.
///  * The [notifyListeners] method is called, which typically happens when the
///    painter's attributes change.
///
/// See also:
///
///  * [RenderEditable.foregroundPainter], which takes a [RenderEditablePainter]
///    and sets it as the foreground painter of the [RenderEditable].
///  * [RenderEditable.painter], which takes a [RenderEditablePainter]
///    and sets it as the background painter of the [RenderEditable].
///  * [CustomPainter], a similar class which paints within a [RenderCustomPaint].    ¿ó*ÇŒ¿ô∆Ç~/// Determines whether repaint is needed when a new [RenderEditablePainter]
/// is provided to a [RenderEditable].
///
/// If the new instance represents different information than the old
/// instance, then the method should return true, otherwise it should return
/// false. When [oldDelegate] is null, this method should always return true
/// unless the new painter initially does not paint anything.
///
/// If the method returns false, then the [paint] call might be optimized
/// away. However, the [paint] method will get called whenever the
/// [RenderEditable]s it attaches to repaint, even if [shouldRepaint] returns
/// false. ¿ô‘"¿ôÏ   ¿ô¸ÇG¿úÅ/// Paints within the bounds of a [RenderEditable].
///
/// The given [Canvas] has the same coordinate space as the [RenderEditable],
/// which may be different from the coordinate space the [RenderEditable]'s
/// [TextPainter] uses, when the text moves inside the [RenderEditable].
///
/// Paint operations performed outside of the region defined by the [canvas]'s
/// origin and the [size] parameter may get clipped, when [RenderEditable]'s
/// [RenderEditable.clipBehavior] is not [Clip.none]. ¿ú
¿ú  ¿ú	¿ú  ¿ú$¿ú4    ¿úGãÔ¿úM  ¿úÖÄ≠ ¿úÖ¿úö ¿ú£¿úØ  ¿ú∆¿úŒ  ¿úˆ¿ú‰¿ú¯¿ù!¿ù¿ù#¿ù6$¿ùB ¿ùS¿ùX¿ùY¿ùè¿ùñ  ¿ûÄ¿ûã  ¿†A¿†1 ¿†I¿†K¿†L¿†Z¿†[¿°È>¿°˙ ¿¢¿¢¿¢¿¢!¿¢"¿ù_-¿ùj    ¿ù©Äõ¿ù≠  ¿ùº¿ùƒ   ¿ûH5¿ûW    ¿û†Ä•¿û§  ¿ûµ¿û¡   ¿üIÄ”¿üÓÄà/// Controls how tall the selection highlight boxes are computed to be.
///
/// See [ui.BoxHeightStyle] for details on available styles.   ¿†dÄØ¿†h  ¿†}¿†ê   ¿°Äœ¿°∫Äá/// Controls how wide the selection highlight boxes are computed to be.
///
/// See [ui.BoxWidthStyle] for details on available styles.   ¿¢+Ä´¿¢/  ¿¢C¿¢U   ¿¢⁄É:¿¢Î  ¿¢Ò¿¢˘  ¿£ 	¿£  ¿£¿£  ¿¢⁄¿¢€¿¶Ç¿¶)  ¿¶7"¿¶O  ¿¶¿¶ ¿®8ëH¿®>  ¿®n ¿®n¿®{   	¿®™¿®Ø ¿®æ¿™¿™ ¿™,¿™6 ¿™B ¿™O¿™T¿™U¿™Z.¿™k ¿™Å¿™Ü¿™á¿™µ¿™º  ¿´ê¿´ò  ¿¨f"¿¨m ¿¨}¿¨É¿¨Ñ¿≠Z¿≠a  ¿Æè¿Æï  ¿®Ç%¿®ã    ¿®∆ÄÜ¿®   ¿®÷
¿®‹   ¿™ç%¿™ò    ¿™ÀÄî¿™œ  ¿™⁄¿™‚   ¿´c*¿´o    ¿´©Äç¿´≠  ¿´∫¿´√   ¿¨:)¿¨E    ¿¨åÄå¿¨ê  ¿¨ù¿¨•   ¿≠;¿≠'    ¿≠{ÄŸ¿≠  ¿≠ï¿≠ù   ¿ÆX4¿Æb    ¿Æ¨Äù¿Æ∞  ¿Æ√¿Æ    ¿ØMÉ-¿ØR  ¿Øe¿Øm  ¿Øt¿ØÑ  ¿Øì¿Øö  ¿Ø•¿Ø≥   ¿≤~Ñ|¿≤è  ¿≤ï¿≤ù  ¿≤§	¿≤™  ¿≤Ø¿≤ø  ¿≤~¿≤¿∂˛ÇÄ¿∑  ¿∑"¿∑5  ¿∂˛¿∂ˇ ¿πÇÖA¿πà  ¿π < ¿π ¿πÈ ¿πÏ¿π˚   ¿∫
*¿∫,   ¿∫9Ä†¿∫J  ¿∫V¿∫d  ¿∫9¿∫:¿∫›Ä¶¿∫Ó  ¿∫˝¿ª  ¿∫›¿∫ﬁ¿ªáÄ ¿ªò  ¿ªû¿ª¶  ¿ª≠	¿ª≥  ¿ª∏¿ª»  ¿ªá¿ªà¿ºUÇl¿ºf  ¿ºt"¿ºå  ¿ºU¿ºV          ÇÈÇˆ ÉÉ&É É5É∆dÉ◊ ÉˆÑ ÑÑ
Ñ)ÑÑÑÑ$ÑÑ&Ñd:Ñq ÑäÑêÑëÑôÑùÑöÜQÜ% ÜcÜ^Üe   ÄÆ  package:flutter/cupertino.dart ã‹ <ÄÜÄ§Ä•Ä÷ÄﬂÄ‡Ä˙ÅÅgÅhÅïÅøÅÁÇÇ8Ç9ÇLÇhÇ}ÇöÇ∞Ç…ÇËÇÈÉÉDÉEÉìÉ∆Ñ,Ñ-ÑdÑ†Ñ°Ö ÖCÖèÖœÜÜkÜlÜµááá(áCáá∑á∏ààCàYàZàïà∑à∏àƒàÁâ	ââ"âNâbâhâèâØâÿâ‹â›âÈâˇääHäqäâäêäîäïä°ä÷ä◊äŸä⁄ã(ãtãåãêã⁄å'åtå√ççaçççëçﬂé.é~éÕèè9è=èdènèvèÄè–êêlêºë	ëWëhëlë∫í	íVí|íèíìí‘ììnìøì˚ìˇîTînîrî¿ïï^ïzïΩï€ïÔññ%ñ<ñUñZñ[ñtñàñ≠ñÆñŸñ˚ñ¸óóVó\ó™ó¿ó∆òòRògò|òêòñòÛôCôô≥ôÀô—ôÊôÍôÎöVöWö¢ö∑ö‘õ+õMõjõpõòõôõÙúUú≈úùù	ù
ùù3ùHùiùmùnùzùéù£ù÷ùÍùûOûfûâû¥û≈û…û ûÛû˘ü1üIü^ü{üèüïüÙ††.†Y†j†n†o†±† †–°°°T°y°™°√¢¢¢-¢7¢?¢L¢ä¢©¢∫¢ƒ¢Ã¢“¢˛££££R£{££…§§B§F§ï§‰•4•Ç•—•Ë•Ï¶<¶ç¶—ßùßÔßı®3®9®à®é®‹©*©m©s©º©Õ©‡©ˆ™ ™K™c™Ö™™™æ™Î´´-´@´Z´v´ë´¢´√¨2¨n¨t¨ñ¨»¨Ê≠
≠*≠E≠`≠å≠«≠ÏÆ
ÆÆ<ÆVÆpÆóÆæÆ·Ø'ØjØêØ‹Ø¸∞∞?∞h∞å∞∫∞Ÿ±
±;±J±ó±À±’±‰≤!≤f≤p≤≤œ≥/≥9≥s≥ñ≥“≥ı¥
¥)¥P¥ª¥‘µµ"µSµ|µÜµ≈µ‚µˇ∂∂9∂R∂u∂ö∂À∑∑9∑n∑ü∑–∑Û∏∏/∏T∏z∏´∏‚∏„ππNπëπ“π”∫∫[∫\∫à∫∑∫Êª'ª(ªYªvªåªêªëª¨ª„ººº'º:º`ºàº¨º‘º¯ΩΩJΩqΩöΩ¡ΩÌææ+æGælæäæßæ…æœæ‰æËæÈø.ø~ø°øÏ¿ @¿ @&¿ @0¿ @1¿ @\¿ @”¿ @˝¿ A5¿ AB¿ A}¿ AÉ¿ A®¿ A¨¿ A≠¿ AÓ¿ B¿ B¿ Bg¿ B≠¿ Bÿ¿ C¿ CK¿ Cà¿ C¥¿ C¬¿ C»¿ CÚ¿ Cˆ¿ C˜¿ D2¿ DÇ¿ Dõ¿ E¿ E¿ E1¿ E®¿ E“¿ F
¿ F¿ FR¿ FX¿ Fs¿ Fw¿ Fx¿ F¿¿ FÁ¿ FÌ¿ G9¿ GÑ¿ Gü¿ G—¿ GÙ¿ H'¿ HI¿ HW¿ H]¿ H}¿ HÅ¿ HÇ¿ Hó¿ H·¿ I¿ I¿ I<¿ Iá¿ I›¿ Iﬁ¿ Jk¿ J∞¿ J˜¿ K#¿ KL¿ K}¿ KÜ¿ Kç¿ Kë¿ Kí¿ L¿ L<¿ Ly¿ L•¿ LŒ¿ LÙ¿ M¿ MA¿ MJ¿ MQ¿ MU¿ MV¿ M°¿ M±¿ M∑¿ N¿ NO¿ N¿ NÖ¿ N‘¿ O¿ O¿ OM¿ Oc¿ Od¿ Oé¿ Oﬂ¿ P¿ PI¿ PW¿ P]¿ Pä¿ P°¿ P•¿ P¶¿ P·¿ Q%¿ QR¿ QÇ¿ Qê¿ Qñ¿ Qø¿ Q÷¿ Q⁄¿ Q€¿ R¿ R¿ RX¿ Rå¿ R®¿ Rœ¿ RÙ¿ S¿ S¿ S'¿ S>¿ SB¿ SC¿ SÖ¿ Sã¿ S¥¿ SÏ¿ T
¿ T3¿ T[¿ Ti¿ To¿ Tô¿ T∫¿ T—¿ T’¿ T÷¿ U¿ UA¿ UV¿ Uv¿ Uó¿ U•¿ U´¿ U≈¿ UË¿ V¿ V¿ V¿ VW¿ V]¿ Vú¿ VÙ¿ W*¿ W^¿ Wb¿ Wc¿ W≠¿ W≥¿ WÒ¿ XF¿ Xz¿ X≠¿ X±¿ X≤¿ Y ¿ Y@¿ YF¿ Yó¿ Y∫¿ YÈ¿ YÍ¿ ZA¿ ZG¿ Zì¿ Z„¿ [.¿ [A¿ [G¿ [î¿ [ﬂ¿ [¸¿ \O¿ \¢¿ \£¿ \¯¿ \˛¿ ]J¿ ]ì¿ ]‚¿ ]¸¿ ^¿ ^O¿ ^ö¿ ^∑¿ _¿ _W¿ _X¿ _ò¿ _¿ `J¿ `ü¿ `‰¿ `Ë¿ `È¿ a¿ a¿ aJ¿ aV¿ aè¿ a“¿ b¿ b6¿ bÅ¿ bá¿ b—¿ b’¿ b÷¿ c¿ c¿ cS¿ cÜ¿ cä¿ cã¿ c“¿ cﬁ¿ d¿ de¿ d∞¿ dÔ¿ e8¿ ev¿ eµ¿ eπ¿ e∫¿ f¿ f¿ fJ¿ fî¿ fﬂ¿ g¿ gg¿ g§¿ g„¿ gÁ¿ gË¿ h¿ h¿ hH¿ hg¿ hÜ¿ hµ¿ h‚¿ h¿ hˆ¿ i)¿ i*¿ ii¿ i∂¿ iÕ¿ i‘¿ j¿ jk¿ jπ¿ jÛ¿ kD¿ kë¿ kª¿ kÔ¿ l¿ lA¿ lB¿ lÄ¿ lÀ¿ l‚¿ lÈ¿ m¿ m=¿ mk¿ mo¿ mp¿ m∆¿ n¿ n¿ n¿ nc¿ nÑ¿ n“¿ o!¿ on¿ o∫¿ p¿ pC¿ pL¿ pù¿ pÓ¿ q¿ q`¿ q®¿ q±¿ q∑¿ q—¿ r"¿ r/¿ r6¿ r:¿ r;¿ rG¿ ra¿ r}¿ r≈¿ rÙ¿ s#¿ s'¿ s(¿ s4¿ sT¿ sv¿ sö¿ sû¿ sü¿ s‡¿ sÊ¿ t%¿ tS¿ tû¿ t–¿ t—¿ u¿ u¿ u]¿ uä¿ u¨¿ uÿ¿ v¿ v?¿ ve¿ vs¿ vy¿ võ¿ v∫¿ v›¿ w¿ w¿ w>¿ wB¿ wC¿ wh¿ wå¿ w¿¿ w·¿ x¿ x?¿ xl¿ xï¿ xæ¿ x„¿ y¿ yE¿ yÉ¿ yá¿ yà¿ yª¿ y¿ z¿ z>¿ zL¿ zR¿ zv¿ zç¿ zë¿ zí¿ z∏¿ zæ¿ {¿ {B¿ {H¿ {ñ¿ {Â¿ |3¿ ||¿ |Ã¿ |‹¿ }¿ }b¿ }™¿ }Ï¿ ~¿ ~F¿ ~T¿ ~Z¿ ~Ç¿ ~ô¿ ~π¿ ~Ω¿ ~æ¿ ¿ ¿ !¿ v¿ ƒ¿ Ä¿ Ä<¿ ÄB¿ Äé¿ Äû¿ ÄÀ¿ ÄÈ¿ Å¿ Å¿ Å%¿ ÅF¿ Å]¿ Åa¿ Åb¿ Å™¿ ÅÃ¿ Ç¿ Ç+¿ ÇW¿ Çe¿ Çk¿ Çê¿ Çß¿ Ç´¿ Ç¨¿ Ç›¿ É¿ É5¿ É[¿ É_¿ É`¿ É™¿ Éœ¿ É’¿ Ñ¿ Ñ ¿ Ñ]¿ Ñc¿ Ñs¿ Ñy¿ Ñ»¿ Ñ‹¿ Ö'¿ ÖS¿ ÖÑ¿ Öà¿ Öâ¿ Ö§¿ Ö•¿ Ö»¿ Ö˝¿ Ü ¿ ÜN¿ Ün¿ Ü|¿ ÜÇ¿ Üñ¿ Ü…¿ Üœ¿ ÜÌ¿ á
¿ á,¿ á2¿ áK¿ á_¿ áx¿ á®¿ áÆ¿ á≤¿ á≥¿ áŒ¿ à ¿ à¿ à¿ à6¿ àX¿ àr¿ àè¿ à≠¿ àª¿ à¡¿ àÿ¿ à¯¿ à¸¿ à˝¿ âR¿ âv¿ âë¿ âØ¿ âŒ¿ â‹¿ â‚¿ â˙¿ ä¿ ä¿ ä¿ äH¿ äj¿ äÑ¿ ä°¿ äø¿ äÕ¿ ä”¿ äÍ¿ ã
¿ ã¿ ã¿ ã^¿ ãd¿ ãÆ¿ ã ¿ ã–¿ å¿ å¿ åe¿ åµ¿ åÚ¿ ç¿ ç&¿ çy¿ çñ¿ çæ¿ ç€¿ çÈ¿ çÔ¿ é¿ é¿ éW¿ éß¿ é—¿ è¿ è¿ è¿ è ¿ èU¿ èw¿ èâ¿ è‹¿ è˘¿ ê!¿ ê>¿ êL¿ êR¿ êi¿ êÄ¿ êÑ¿ êÖ¿ êπ¿ êŸ¿ êÍ¿ ë¿ ë"¿ ë0¿ ë6¿ ëL¿ ëc¿ ëg¿ ëh¿ ëú¿ ë›¿ í¿ í0¿ í4¿ í5¿ í{¿ íó¿ íù¿ í’¿ í€¿ ì,¿ ìK¿ ìZ¿ ìy¿ ìÊ¿ î ¿ î$¿ îb¿ îq¿ îê¿ î˝¿ ï7¿ ï;¿ ïa¿ ïå¿ ïê¿ ïë¿ ï»¿ ñ ¿ ñ%¿ ñQ¿ ñ_¿ ñe¿ ñä¿ ñ°¿ ñ•¿ ñ¶¿ ñŸ¿ ñﬂ¿ ó!¿ ó'¿ ók¿ óñ¿ óƒ¿ ó·¿ ò	¿ ò(¿ ò6¿ ò<¿ òT¿ òÑ¿ òö¿ ò∫¿ òæ¿ òø¿ òı¿ ò˚¿ ôK¿ ôó¿ ôﬂ¿ ö¿ ö!¿ öF¿ öb¿ öp¿ öv¿ öä¿ ö∏¿ öæ¿ ö”¿ öÁ¿ õ¿ õ¿ õ/¿ õ3¿ õ4¿ õX¿ õÇ¿ õü¿ õ¡¿ õ‚¿ õ¿ õˆ¿ ú¿ ú'¿ ú+¿ ú,¿ úO¿ úU¿ ú≤¿ ú∏¿ ù¿ ùb¿ ùŒ¿ û¿ û*¿ ûN¿ ûp¿ û~¿ ûÑ¿ ûü¿ û∂¿ û∫¿ ûª¿ ü¿ üN¿ üT¿ ü†¿ ü»¿ ü›¿ †¿ †-¿ †V¿ †|¿ †ä¿ †ê¿ †Ø¿ †Ô¿ °¿ °?¿ °Ö¿ °∑¿ °’¿ °Ÿ¿ °⁄¿ ¢¿ ¢h¿ ¢n¿ ¢≤¿ ¢˚¿ £L¿ £î¿ £©¿ £‚¿ §¿ §-¿ §1¿ §2¿ §i¿ §o¿ §†¿ §⁄¿ §˛¿ •&¿ •*¿ •+¿ •\¿ •b¿ •≠¿ ¶¿ ¶B¿ ¶e¿ ¶ì¿ ¶Ω¿ ¶À¿ ¶—¿ ¶Ù¿ ß
¿ ß¿ ß¿ ß>¿ ßD¿ ßè¿ ß„¿ ®¿ ®?¿ ®k¿ ®ì¿ ®°¿ ®ß¿ ®»¿ ®ﬁ¿ ®‚¿ ®„¿ ©.¿ ©P¿ ©V¿ ©¢¿ ©®¿ ©∏¿ ©æ¿ ™¿ ™!¿ ™I¿ ™J¿ ™ë¿ ™√¿ ™Â¿ ´¿ ´¿ ´P¿ ´V¿ ´ö¿ ´›¿ ¨¿ ¨C¿ ¨Ü¿ ¨ª¿ ¨¡¿ ≠¿ ≠@¿ ≠v¿ ≠ò¿ ≠ﬂ¿ Æ¿ Æ4¿ Æd¿ Ær¿ Æx¿ Æ°¿ Æ∏¿ Æÿ¿ Æ‹¿ Æ›¿ Ø$¿ ØZ¿ Ø`¿ Ø§¿ ØÁ¿ ∞¿ ∞M¿ ∞ê¿ ∞≈¿ ∞À¿ ±¿ ±?¿ ±E¿ ±ò¿ ±·¿ ±Á¿ ≤+¿ ≤p¿ ≤∑¿ ≤ı¿ ≥¿ ≥J¿ ≥N¿ ≥O¿ ≥É¿ ≥â¿ ≥ÿ¿ ¥2¿ ¥Ç¿ ¥≈¿ µ¿ µ;¿ µw¿ µ{¿ µ|¿ µŸ¿ ∂¿ ∂¿ ∂j¿ ∂p¿ ∂Õ¿ ∑¿ ∑O¿ ∑ç¿ ∑ë¿ ∑í¿ ∑ ¿ ∑–¿ ∏¿ ∏a¿ ∏Å¿ ∏≥¿ ∏“¿ ∏”¿ π
¿ π¿ πA¿ πG¿ πj¿ πî¿ π∫¿ π€¿ π˝¿ ∫¿ ∫2¿ ∫T¿ ∫Z¿ ∫^¿ ∫_¿ ∫†¿ ∫ø¿ ∫˜¿ ∫¯¿ ªD¿ ªì¿ ª“¿ ª¸¿ º4¿ º5¿ ºÄ¿ º«¿ ºÙ¿ º˙¿ Ω9¿ Ωy¿ Ωú¿ Ω‘¿ æ¿ æR¿ æã¿ æ∆¿ ø¿ ø.¿ øS¿ øW¿ øX¿ ød¿ ø´¿ ø›¿ ¿ ¿ ¿o¿ ¿Ω¿ ¿‹¿ ¡¿ ¡t¿ ¡≠¿ ¡’¿ ¬&¿ ¬L¿ ¬Y¿ ¬}¿ ¬¢¿ ¬∞¿ ¬∂¿ ¬‡¿ ¬˘¿ √S¿ √b¿ √ñ¿ √Æ¿ √Ù¿ ƒA¿ ƒÇ¿ ƒ—¿ ≈¿ ≈.¿ ≈P¿ ≈∏¿ ≈…¿ ≈ÿ¿ ≈‰¿ ∆¿ ∆%¿ ∆/¿ ∆ç¿ ∆ï¿ ∆õ¿ ∆¶¿ ∆ÿ¿ ∆˘¿ «¿ «B¿ «_¿ «z¿ «ô¿ «ö¿ «¬¿ «ı¿ «˚¿ «¸¿ »¿ »F¿ »L¿ »M¿ »ä¿ »≤¿ »˝¿ …¿ …U¿ …©¿ …±¿ …˚¿  
¿  Q¿  £¿  ´¿  ±¿  µ¿  ∂¿  €¿ À¿ À)¿ À=¿ À~¿ Àá¿ À≠¿ À¥¿ À∏¿ Àπ¿ À≈¿ Ã9¿ Ã{¿ Ã∫¿ ÃÓ¿ Õ¿ Õ¿ Õ1¿ ÕO¿ Õg¿ Õä¿ ÕÎ¿ Œ8¿ Œê¿ Œ≈¿ Œ‡¿ œ¿ œ¿ œ:¿ œ;¿ œ[¿ œ©¿ œ¿ –¿ –ç¿ –◊¿ —)¿ —V¿ —|¿ —ó¿ —°¿ —≈¿ —‰¿ —Û¿ “4¿ “â¿ “¶¿ “∫¿ “ƒ¿ “Ó¿ ” ¿ ”Z¿ ”ì¿ ”√¿ ”Õ¿ ‘¿ ‘T¿ ‘r¿ ‘ñ¿ ‘π¿ ‘Ô¿ ’'¿ ’2¿ ’Ä¿ ’—¿ ’ˆ¿ ÷!¿ ÷K¿ ÷v¿ ÷¢¿ ÷≠¿ ÷˚¿ ◊+¿ ◊X¿ ◊Õ¿ ◊¿ ÿ9¿ ÿé¿ ÿ±¿ ÿﬁ¿ Ÿ	¿ Ÿ¿ Ÿ|¿ Ÿ£¿ Ÿ⁄¿ ŸË¿ Ÿ˝¿ ⁄¿ ⁄#¿ ⁄r¿ ⁄|¿ ⁄¨¿ ⁄ˇ¿ €M¿ €W¿ €Ç¿ €∏¿ ‹¿ ‹¿ ‹F¿ ‹j¿ ‹Ä¿ ‹∑¿ ‹ƒ¿ ‹Œ¿ ‹ﬂ¿ ›¿ ›-¿ ›^¿ ›Å¿ ›â¿ ›è¿ ›∂¿ ﬁ¿ ﬁ	¿ ﬁ
¿ ﬁ<¿ ﬁL¿ ﬁá¿ ﬁæ¿ ﬁ≈¿ ﬁ…¿ ﬁ ¿ ﬂ¿ ﬂQ¿ ﬂó¿ ﬂò¿ ﬂŒ¿ ‡¿ ‡¿ ‡¿ ‡T¿ ‡s¿ ‡«¿ ‡Á¿ ‡ı¿ ‡˚¿ ·O¿ ·b¿ ·´¿ ·—¿ ·ÿ¿ ·‹¿ ·›¿ ‚!¿ ‚@¿ ‚ï¿ ‚µ¿ ‚√¿ ‚…¿ „¿ „0¿ „y¿ „ü¿ „¶¿ „™¿ „´¿ „È¿ ‰¿ ‰[¿ ‰ö¿ ‰∂¿ ‰ƒ¿ ‰ ¿ Â¿ Â2¿ ÂG¿ Âg¿ Âç¿ Âñ¿ Âº¿ Â√¿ Â«¿ Â»¿ Ê¿ Ê&¿ Êy¿ Ê∆¿ ÊÊ¿ ÊÙ¿ Ê˙¿ ÁT¿ Ág¿ Á|¿ Áú¿ Á∆¿ Áœ¿ Áı¿ Á¸¿ Ë ¿ Ë¿ Ë)¿ Ë<¿ Ëñ¿ Ë«¿ Ë‹¿ Ë‰¿ È	¿ È¿ È'¿ ÈA¿ ÈG¿ ÈK¿ ÈL¿ Èx¿ Èí¿ ÈÏ¿ Í¿ Í2¿ Í:¿ Í_¿ Íu¿ Í}¿ Íù¿ Í£¿ Í¥¿ Í∏¿ Íπ¿ Î¿ Î¿ Î¿ Î]¿ ÎØ¿ ÎÒ¿ Ï¿ ÏO¿ ÏÄ¿ Ï∑¿ ÏÕ¿ Ï’¿ Ï€¿ ÏÏ¿ Ï¿ ÏÒ¿ Ï˝¿ Ì"¿ Ì;¿ Ìg¿ Ìì¿ Ìî¿ Ì∆¿ ÌÈ¿ Ó¿ Ód¿ Óç¿ Ó§¿ Ó“¿ Ó÷¿ Ó◊¿ Ó„¿ Óı¿ Ô	¿ Ô#¿ ÔO¿ ÔÄ¿ Ôî¿ Ôª¿ Ô‚¿ ÔÊ¿ ÔÁ¿ ÔÛ¿ ¿ Q¿ î¿ ∑¿ ‹¿ ‚¿ Ò¿ Ò*¿ Ò0¿ ÒM¿ ÒQ¿ ÒR¿ Ò^¿ Òí¿ Ò’¿ Ú¿ Ú;¿ Ú[¿ Úa¿ ÚÑ¿ Ú§¿ Ú™¿ ÚÃ¿ Ú–¿ Ú—¿ Ú˚¿ Ú¸¿ ÛH¿ ÛI¿ Ûe¿ Ûâ¿ Ûø¿ Ûı¿ Û¸¿ Ù ¿ Ù¿ Ù ¿ Ù5¿ ÙY¿ Ù~¿ Ù§¿ Ù´¿ ÙØ¿ Ù∞¿ Ù·¿ Ùˆ¿ ı¿ ıb¿ ı¨¿ ı≥¿ ı∑¿ ı∏¿ ˆ¿ ˆZ¿ ˆ∞¿ ˆ±¿ ˆ˛¿ ˜¿ ˜U¿ ˜•¿ ˜Ú¿ ¯>¿ ¯ä¿ ¯ê¿ ¯†¿ ¯¶¿ ¯Á¿ ˘ ¿ ˘o¿ ˘í¿ ˘ì¿ ˘¿¿ ˘¡¿ ˘¸¿ ˙ç¿ ˙¶¿ ˙¿ ˚T¿ ˚≠¿ ˚Ò¿ ˚˛¿ ¸¿ ¸˙¿ ˝¿ ˝W¿ ˝é¿ ˝ó¿ ˝ù¿ ˝°¿ ˝¢¿ ˝Ò¿ ˛"¿ ˛(¿ ˛w¿ ˛Ö¿ ˛ã¿ ˛‹¿ ˛˛¿ ˇ2¿ ˇa¿ ˇt¿ ˇz¿ ˇù¿ ˇû¿ ˇ‰¿ +¿ W¿ Å¿ à¿ â¿ †¿ ¨¿¿1¿5¿6¿~¿Ñ¿î¿ö¿‚¿¿`¿Ö¿¡¿‰¿@¿D¿E¿ì¿£¿©¿π¿ø¿¿Q¿ñ¿”¿¿8¿r¿ï¿∆¿$¿k¿«¿»¿/¿o¿p¿—¿ˆ¿¿6¿m¿Æ¿—¿Î¿	¿	0¿	L¿	W¿	z¿	ù¿	æ¿	·¿
9¿
ã¿
Ÿ¿
¿A¿}¿†¿∫¿˙¿¿,¿7¿=¿>¿m¿≤¿∂¿∑¿√¿ˆ¿J¿a¿–¿¯¿ˇ¿D¿`¿ò¿–¿Í¿Ó¿Ô¿˚¿.¿Ç¿ô¿›¿,¿õ¿√¿ ¿¿+¿c¿õ¿ƒ¿»¿…¿'¿]¿£¿§¿¬¿Ï¿ ¿?¿Y¿_¿r¿≠¿’¿¿¿'¿k¿Ü¿°¿∑¿ø¿≈¿Ô¿Û¿Ù¿¿G¿|¿¿¿¸¿˝¿¿=¿c¿∫¿…¿!¿Ö¿ç¿¿¿∆¿«¿¿a¿q¿ä¿Ÿ¿'¿g¿Ω¿¿¿:¿R¿X¿ï¿È¿¿Q¿b¿s¿z¿~¿¿ã¿›¿ﬁ¿Í¿¿K¿≤¿π¿›¿·¿‚¿Ó¿0¿S¿ñ¿ö¿õ¿ß¿‘¿’¿·¿Ó¿>¿|¿”¿¿p¿ø¿ ¿ -¿ ú¿!
¿!¿!/¿!T¿!|¿!ë¿!ü¿!‡¿!Ê¿!Í¿!Î¿"¿";¿"<¿"H¿"à¿"¥¿"Ÿ¿"˙¿"˚¿#¿#V¿#v¿#ú¿#§¿#™¿#Æ¿#Ø¿#œ¿#¯¿#˘¿$I¿$ï¿$¢¿$∑¿%¿%¿%9¿%?¿%ç¿%∞¿%Ë¿&¿&W¿&[¿&\¿&™¿&Û¿'¿'	¿'T¿'~¿'≠¿'‡¿'‰¿(¿(0¿(L¿(P¿(Q¿(ü¿(‰¿(Ù¿(˙¿)E¿)j¿)¿)µ¿)π¿)œ¿)Î¿)¸¿* ¿*¿*O¿*†¿*∞¿*∂¿+¿+-¿+H¿+Ä¿+Ñ¿+Ö¿+”¿,$¿,4¿,:¿,Ü¿,±¿,Ã¿-¿-¿-$¿-@¿-W¿-[¿-\¿-ó¿-ù¿-ﬂ¿.-¿.{¿. ¿.–¿/¿/]¿/r¿/¥¿/ı¿/˘¿/˙¿0:¿0@¿0ë¿0º¿1"¿1E¿1≤¿1‚¿1Ô¿2<¿2=¿2m¿2µ¿2∂¿2Ï¿3
¿3,¿3S¿3Z¿3[¿3É¿3á¿3à¿3√¿4¿4¿4D¿4J¿4â¿4«¿5
¿5¿5¿5l¿5r¿5Õ¿5”¿6¿6M¿6S¿6í¿6˙¿7¿7ä¿7Ã¿8Q¿8∑¿8¸¿8˝¿9¿9%¿9Å¿9€¿: ¿:	¿:¿:¿:!¿:"¿:^¿:d¿:£¿:Â¿;¿;2¿;¨¿;Ô¿<¿<=¿<¿<å¿<Ì¿<Û¿=¿=¿= ¿=g¿=}¿=í¿=À¿>¿>J¿>s¿>√¿>Ã¿>“¿?!¿?8¿?É¿?â¿?Ã¿?Î¿@¿@.¿@o¿@û¿@¬¿@Ì¿@Û¿A¿A¿Ae¿A≥¿AÏ¿AÛ¿BB¿Bì¿B®¿Bƒ¿C¿C\¿CÉ¿C§¿C ¿D¿D0¿Dw¿DÖ¿Dß¿D“¿D¸¿E¿E¿E7¿Ec¿Eé¿Eõ¿E¿¿E⁄¿F¿F&¿FS¿FÜ¿Fó¿F•¿F«¿Fı¿G"¿G1¿G=¿Gb¿GÖ¿G®¿GÕ¿Gﬁ¿GÊ¿GÏ¿GÌ¿H7¿H;¿H<¿Hà¿Hç¿H‹¿I,¿Is¿I™¿I´¿J#¿Jp¿Jº¿J…¿K¿K<¿KC¿KG¿KH¿Kô¿K®¿K≠¿K˛¿LG¿Lë¿L·¿LÒ¿Lˆ¿MG¿Më¿Mﬂ¿N¿NM¿NR¿Nû¿NÓ¿O7¿OR¿Oy¿O¸¿P=¿PA¿PB¿P_¿P`¿P≠¿P≤¿P¸¿QG¿QY¿Q{¿Q†¿Qø¿Q‡¿R2¿RU¿Rx¿Rô¿Rº¿S6¿S<¿S@¿SA¿Sè¿SÆ¿S„¿T ¿TZ¿Tm¿Tå¿T‚¿TÔ¿U¿Ud¿Uq¿Uz¿U~¿U¿Uã¿Uò¿Uÿ¿V[¿Vo¿W ¿W8¿W[¿Wx¿W«¿X$¿X(¿X)¿X5¿Xê¿Y¿Y'¿Y∏¿Y¿Z6¿Z:¿Z;¿ZG¿Z`¿Zô¿[ ¿[£¿[¥¿[Ì¿\%¿\g¿\Ö¿\Ü¿\©¿\∆¿]¿]F¿]}¿]—¿]Ù¿^¿^:¿^p¿^ò¿^°¿^®¿^©¿^Ô¿_J¿_K¿_ú¿_ù¿_÷¿`¿`¿`I¿`}¿`∑¿`ª¿`º¿a¿a^¿a¢¿a ¿aÂ¿b¿b*¿bN¿bp¿bï¿b√¿bƒ¿c¿cv¿c‘¿c˝¿d¿d¿dU¿d[¿dk¿dq¿d¿¿d‘¿e7¿e_¿eõ¿f¿f]¿f«¿g#¿g$¿gI¿gw¿g}¿g~¿gù¿gÍ¿g¿gÒ¿h¿hN¿hT¿hU¿h©¿h¿i&¿iÉ¿i•¿i„¿jA¿jd¿jj¿jü¿j˚¿k¿k[¿k∫¿kﬁ¿k‰¿kÂ¿l*¿lo¿l‹¿l›¿m¿m?¿mà¿m™¿m∞¿m¿n¿nZ¿n}¿nÉ¿nÑ¿n´¿n¨¿n«¿nÀ¿nÃ¿o¿o5¿o;¿oK¿oQ¿o†¿o¥¿p?¿po¿pî¿p≤¿p”¿p˜¿q¿q;¿q_¿qe¿q£¿q‹¿q˘¿r/¿rx¿r∑¿s¿s9¿s§¿s±¿s‡¿sÊ¿t7¿t;¿t<¿tü¿t‰¿u¿ul¿u§¿u“¿v9¿vA¿vG¿vú¿væ¿vÂ¿wG¿wN¿wR¿wS¿w§¿wŸ¿wﬂ¿x0¿xI¿xO¿xò¿xû¿xÔ¿y3¿y9¿yÖ¿yÕ¿z¿ze¿z±¿{¿{.¿{:¿{I¿{^¿{u¿{é¿{ï¿{ô¿{ö¿{⁄¿|¿|¿|H¿|Ç¿|à¿|â¿|…¿}	¿}
¿}R¿}ú¿}ø¿}Ú¿}¯¿}˘¿~2¿~e¿~f¿~â¿~º¿~¬¿~∆¿~«¿¿¿É¿Ø¿»¿˚¿Ä/¿Ä6¿Äú¿Ä≥¿Ä’¿ÄË¿Ä˚¿Å¿Å#¿ÅO¿Åh¿Åõ¿Åœ¿Åÿ¿ÅÒ¿Ç;¿ÇP¿Çe¿Çn¿Çt¿Çx¿Çy¿ÇÖ¿Ç∆¿É¿É$¿É*¿É\¿É`¿Éa¿Ém¿É§¿É«¿Ñ¿Ñ5¿ÑO¿Ñ_¿Ñ{¿Ñì¿Ñ∑¿Ñﬂ¿ÑË¿Ñı¿Ö¿Ö?¿ÖE¿Öz¿Ö¨¿Ö¸¿Ü¿Ü¿Ü¿ÜY¿ÜZ¿Üf¿Ü°¿ÜΩ¿Ü”¿ÜË¿á¿á¿áE¿áÑ¿áä¿áé¿áè¿áõ¿á‡¿à¿àJ¿à¢¿àŸ¿â¿âh¿â≠¿ä ¿äw¿ä«¿ã¿ã¿ã¿ã#¿ãU¿ãs¿ãã¿ã¨¿ãƒ¿ãˆ¿å¿å¿å¿å¿å¿åD¿åc¿åá¿å¢¿å≤¿å≥¿åø¿ç ¿ç¿ç¿ç3¿ç4¿ç@¿çb¿çc¿çï¿ç∏¿çÈ¿é¿é¿é¿é¿éT¿ém¿én¿é•¿éΩ¿é√¿éƒ¿éÿ¿è
¿è7¿è=¿èA¿èB¿èN¿èÖ¿èµ¿è—¿ê
¿ê7¿êc¿êñ¿êú¿ê†¿ê°¿ê≠¿ê“¿êÎ¿ë¿ë¿ë¿ë'¿ë9¿ëg¿ë{¿ë¿ëÄ¿ëå¿ëô¿ëÔ¿ëÒ¿ëÚ¿í<¿íZ¿í^¿í≠¿í˛¿ìM¿ìû¿ìÔ¿î¿î¿î\¿î©¿îÈ¿ï9¿ï]¿ïa¿ïo¿ïs¿ïƒ¿ñ
¿ñQ¿ñó¿ñÍ¿ó(¿óv¿óü¿ó•¿óÌ¿ò<¿òã¿òÀ¿ò—¿ô¿ôb¿ô≤¿ôø¿ô˘¿ô˙¿ö0¿ö6¿öÜ¿ö‘¿õ¿õ%¿õv¿õ≈¿õ˝¿úD¿úF¿úG¿úÉ¿úù¿ú¿¿ú›¿ù
¿ù3¿ù4¿ù\¿ù]¿ùç¿ùß¿ùœ¿ùˆ¿û¿û
¿û*¿ûA¿ûE¿ûF¿û~¿ûû¿ûÃ¿ûı¿ü¿ü	¿ü+¿üB¿üF¿üG¿üë¿üó¿ü÷¿†¿†b¿†ò¿†¬¿†–¿†÷¿†˘¿°¿°¿°¿°_¿°e¿°£¿°Á¿¢)¿¢]¿¢Ü¿¢î¿¢ö¿¢º¿¢”¿¢◊¿¢ÿ¿¢‰¿£,¿£[¿£Ñ¿£√¿£—¿£◊¿£ÿ¿£˙¿§;¿§}¿§ƒ¿§¿•¿•!¿•"¿•I¿•`¿•ò¿•Í¿¶¿¶¿¶¿¶¿¶¿¶"¿¶]¿¶Ö¿¶ô¿¶ü¿¶æ¿¶ˇ¿ß¿ß6¿ßn¿ß™¿ßÓ¿®1¿®5¿®7¿®8¿®l¿®¿®Ä¿®®¿®ƒ¿®‰¿©¿©¿©¿©2¿©I¿©M¿©N¿©ç¿©•¿©™¿©ı¿™¿™3¿™4¿™X¿™ä¿™ã¿™≥¿™…¿™Í¿´¿´%¿´+¿´,¿´E¿´\¿´`¿´a¿´é¿´ß¿´À¿´Ì¿´˚¿¨¿¨¿¨3¿¨7¿¨8¿¨d¿¨ä¿¨≠¿¨œ¿¨›¿¨„¿¨˛¿≠¿≠¿≠¿≠X¿≠y¿≠•¿≠›¿≠Î¿≠Ò¿≠Ú¿Æ¿Æ2¿ÆK¿ÆQ¿ÆU¿ÆV¿Æç¿Æ™¿Æ“¿Æ˙¿Ø¿Ø¿Ø/¿ØF¿ØJ¿ØK¿Ø¬¿∞¿∞*¿∞R¿∞Ω¿±¿±'¿±1¿±9¿±d¿±â¿±•¿±ÿ¿±Á¿≤7¿≤i¿≤q¿≤w¿≤{¿≤|¿≤à¿≤–¿≥¿≥¿≥T¿≥U¿≥¢¿≥∞¿≥∂¿≥∑¿≥ı¿≥ˆ¿¥/¿¥G¿¥Ä¿¥∆¿¥ﬂ¿µ¿µ¿µ2¿µÉ¿µâ¿µä¿µ’¿µÌ¿∂B¿∂P¿∂V¿∂W¿∂m¿∂∏¿∂¿∂˜¿∂˚¿∂¸¿∑¿∑C¿∑k¿∑¿∑Ö¿∑Ü¿∑•¿∑ø¿∑≈¿∑Ó¿∏ ¿∏\¿∏å¿∏¿¿∏Ù¿π:¿π{¿π¿πÅ¿πÇ¿π»¿∫¿∫¿∫6¿∫7¿∫C¿∫o¿∫´¿∫–¿∫÷¿∫⁄¿∫€¿∫Á¿ª¿ªR¿ªz¿ªÄ¿ªÑ¿ªÖ¿ªë¿ªŸ¿º¿ºH¿ºN¿ºR¿ºS¿º_¿ºö¿º¬¿º÷¿º‹¿ΩI¿Ω\¿Ωb¿Ωc¿Ω∫¿æ¿æD¿æà¿æù¿æ•¿æ´¿æ¨¿ææ¿æ¬¿æƒ    
_kCaretGap_kCaretHeightOffset_kFloatingCursorSizeIncrease_kFloatingCursorRadius6_kShortestDistanceSquaredWithFloatingAndRegularCursorsTextSelectionPointVerticalCaretMovementRunRenderEditable_RenderEditableCustomPaintRenderEditablePainter_TextHighlightPainter_CaretPainter_CompositeRenderEditablePainter KC