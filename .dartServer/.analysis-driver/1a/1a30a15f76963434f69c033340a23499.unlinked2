Ä˝popdoNotPopbubblerequestFocus_requestFocus	navigator
_navigatorsettings	_settings_isPageBasedrestorationScopeId_restorationScopeId_updateSettings_updateRestorationIdoverlayEntriesinstalldidPushdidAdd
didReplacewillPoppopDispositiononPopInvokedonPopInvokedWithResultwillHandlePopInternallycurrentResultpopped_popCompleter_disposeCompleterdidPopdidComplete
didPopNextdidChangeNextdidChangePreviouschangedInternalStatechangedExternalStatedispose	isCurrentisFirsthasActiveRouteBelowisActivename	argumentstoString_defaultPopInvokedHandlerkeyrestorationIdcanPop	canUpdatecreateRoute_navigators	didRemovedidChangeTopdidStartUserGesturedidStopUserGesture
controllermaybeOfofupdateShouldNotifyrouteisWaitingForEnteringDecisionisWaitingForExitingDecisionmarkForPush
markForAdd
markForPopmarkForCompletemarkForRemove_transitionresolvepages	onPopPageonDidRemovePagetransitionDelegateinitialRouteonGenerateRouteonUnknownRoute	observersrouteTraversalEdgeBehaviordefaultRouteNameonGenerateInitialRoutesreportsRouteUpdateToEngineclipBehavior	pushNamedrestorablePushNamedpushReplacementNamedrestorablePushReplacementNamedpopAndPushNamedrestorablePopAndPushNamedpushNamedAndRemoveUntil!restorablePushNamedAndRemoveUntilpushrestorablePushpushReplacementrestorablePushReplacementpushAndRemoveUntilrestorablePushAndRemoveUntilreplacerestorableReplacereplaceRouteBelowrestorableReplaceRouteBelowmaybePoppopUntilremoveRouteremoveRouteBelowdefaultGenerateInitialRoutescreateStatestagingaddaddingpushReplacepushingidlecompleteremovepoppingremoving	disposingdisposedrestorationInformation	pageBasedkDebugPopAttemptLimitnotAnnouncedcurrentStatelastAnnouncedPreviousRoutelastAnnouncedPoppedNextRoutelastAnnouncedNextRoutelastFocusNodecanUpdateFrom	handleAdd
handlePushhandleDidPopNext	handlePophandleCompletehandleRemovalpendingResult_reportRemovalToObserverfinalizeforcedDisposewillBePresent	isPresentisPresentForRestorationsuitableForAnnouncementsuitableForTransitionAnimationshouldAnnounceChangeToNextisPresentPredicate'suitableForTransitionAnimationPredicatewillBePresentPredicateisRoutePredicate_isWaitingForExitingDecisionmarkNeedsExitingDecisionrestorationEnabledprimaryRoutesecondaryRoutenotify_value
indexWhereaddAllclearinsertremoveAt
removeLast[]iterator_overlayKey_history_entryWaitingForSubTreeDisposal_serializableHistory_observedRouteAdditions_observedRouteDeletions	focusNode_debugLocked_heroControllerFromScope_effectiveObservers_usingPagesAPI_handleHistoryChanged_debugCheckPageApiParameters	initState_recordLastFocus"_rawNextPagelessRestorationScopeId_nextPagelessRestorationScopeIdrestoreStatedidToggleBucketdidChangeDependencies_forcedDisposeAllRouteEntries_disposeRouteEntry_updateHeroController_updateEffectiveObserversdidUpdateWidget_debugCheckDuplicatedPageKeys
deactivateactivateoverlay_allRouteOverlayEntries_lastTopmostRoute_lastAnnouncedRouteName_debugUpdatingPage_updatePages_flushingHistory_flushHistoryUpdates_flushObserverNotifications_flushRouteAnnouncement_getRouteBefore_getIndexBefore_getRouteAfter_routeNamed_debugIsStaticCallback
_pushEntry_afterNavigation_pushReplacementEntry_pushEntryAndRemoveUntil_replaceEntry_replaceEntryBelowfinalizeRoute_getRouteById_userGesturesInProgress_userGesturesInProgressCountuserGestureInProgressuserGestureInProgressNotifier_activePointers_handlePointerDown_handlePointerUpOrCancel_cancelActivePointers_firstRouteEntryWhereOrNull_lastRouteEntryWhereOrNullbuildnamed	anonymoustype_serializableDataisRestorablegetSerializableDatacomputeSerializableDatatoRouteEntryrouteBuilder_pageToPagelessRoutesupdate_finalizeEntry_debugMapsEqualhasDatarestoreEntriesForPagecreateDefaultValuefromPrimitivesinitWithValuetoPrimitivesenablednavigatorFinder	onPresent
onCompletepresent_route	_disposed_hookOntoRouteFuture_defaultNavigatorFindercanHandlePop) _kAndroidRefocusingDelayDurationRouteFactoryRouteListFactoryRestorableRouteBuilderRoutePredicateWillPopCallbackPopPageCallbackDidRemovePageCallbackRoutePopDispositionRouteRouteSettingsPageNavigatorObserverHeroControllerScopeRouteTransitionRecordTransitionDelegateDefaultTransitionDelegate"kDefaultRouteTraversalEdgeBehavior	Navigator_RouteLifecycle_RouteEntryPredicate_RoutePlaceholder_RouteEntry_NavigatorObservation_NavigatorPushObservation_NavigatorPopObservation_NavigatorRemoveObservation_NavigatorReplaceObservation_IndexWhereCallback_HistoryNavigatorState_RouteRestorationType_RestorationInformation_NamedRestorationInformation _AnonymousRestorationInformation_HistoryPropertyNavigatorFinderCallbackRoutePresentationCallbackRouteCompletionCallbackRestorableRouteFutureNavigationNotificationÅ–DurationmillisecondsonGenerateRoutedynamiconGenerateInitialRoutesListStringrestorablePushTBuildContextObjectpopUntilboolpopForm	onWillPop
ModalRouteaddScopedWillPopCallbackremoveScopedWillPopCallbackWillPopScope
DeprecatedFuture	onPopPagedidPoppagesonDidRemovePagevoidwillPoppopDispositiondoNotPopbubbleSystemNavigatorOverlayOverlayEntryMaterialPageRoutecreateRouterequestFocus kFlutterMemoryAllocationsEnabledFlutterMemoryAllocationsinstancedispatchObjectCreatedlibrary	classNameobjectwidgetRestorationScopeValueListenableValueNotifiervalueremove	protectedmustCallSuperTickerFuturecompletethen	focusNodeenclosingScopemaybePopsetFrameworkHandlesBackcanPopPopScopeonPopInvokedfuture	CompleterfinalizeRoutepushReplacementdidStartUserGesturepushoffstageStatedidUpdateWidgetMaterialAppdidChangeDependenciescontextbarrierColordisposedispatchObjectDisposed_lastRouteEntryWhereOrNullisPresentPredicateroute_firstRouteEntryWhereOrNull_historyentrymaintainStateisRoutePredicate	isPresent	immutableoverrideobjectRuntimeTypecurrentResultpoppedLocalKeyRestorationManagerPopInvokedWithResultCallbackruntimeTypekeysettingsfactoryname	argumentsExpandochildInheritedWidgetHeroControllerof"dependOnInheritedWidgetOfExactType
controllermaybeOfFlutterErrorresolveisWaitingForEnteringDecisiontransitionDelegateIterableMapnewPageRouteHistorylocationToExitingPageRoutepageRouteToPagelessRoutestoListgrowableSetvaluestoSetexitingPageRouteisWaitingForExitingDecisioncontainsKeypagelessRouteintcast
routeEntrylengthcontainsisEmptymarkForPush
markForAdd
markForPopmarkForCompletemarkForRemovelastadd	pageRouterouteTraversalEdgeBehaviorTraversalEdgeBehaviorparentScopeRouterAppBarScaffoldappBar
WidgetsApp
PopupRoute
showDialogshowMenushowModalBottomSheetPopupMenuButtonDropdownButton	PageRoutePageRouteBuilderCupertinoTabViewBuilder	isCurrentrestorationIdrestorationScopeIdStatefulWidgetdefaultGenerateInitialRoutesCliphardEdgeWidgetElementRenderObjectcreateElementcreateStateRenderObjectWidgetcreateRenderObjectdefaultRouteNameRestorationBucketRestorationMixinselectSingleEntryHistory PlatformRouteInformationProviderrouternonedidPushdidChangeNext	observersonUnknownRouteoptionalTypeArgs	pushNamedStandardMessageCodecrestorablePushNamed
didReplacedidCompletepushReplacementNamedresultrestorablePushReplacementNamed
didPopNextTransitionRouteopaquepopAndPushNamedrestorablePopAndPushNamedwillHandlePopInternallywithName	didRemovepushNamedAndRemoveUntil!restorablePushNamedAndRemoveUntilrestorablePushReplacementpushAndRemoveUntilrestorablePushAndRemoveUntildidChangePreviousreplaceoldRoutenewRouterestorableReplacenewRouteBuilderreplaceRouteBelowanchorRouterestorableReplaceRouteBelowPopEntryisFirstLocalHistoryRouteremoveRouteremoveRouteBelowStatefulElementstaterootNavigatorfindRootAncestorStateOfTypefindAncestorStateOfType
startsWith	substring_routeNamed	allowNullsplit
isNotEmptypartreportErrorFlutterErrorDetails	exceptionclearremoveWhereinitialStatestagingpushReplaceWeakReference	canUpdate	navigator_debugLocked
_navigatorinstalloverlayEntriesadding_observedRouteAdditionspreviousPresentpushingwhenCompleteOrCancelidle_flushHistoryUpdatesprevious
isNewFirst_disposeCompleterdefaultTargetPlatformTargetPlatformandroiddelayedSystemChannelsaccessibilitysendFocusSemanticEventtoMapnodeIdreFocusNodeiOSpopping_popCompleterisCompletedonPopInvokedWithResultcallremoving_observedRouteDeletionsdidAddindex
isReplaceddisposed	disposingwhereemounted_entryWaitingForSubTreeDisposalVoidCallbackremoveListenereveryscheduleMicrotaskaddListenertargetsuitableForTransitionAnimationwillBePresent_updateRestorationIdprimaryRoutesecondaryRouteChangeNotifiermaybeDispatchObjectCreation
indexWherestartnotifyListenersaddAllinsertremoveAt
removeLastIteratoriteratortoStringTickerProviderStateMixin	GlobalKeyOverlayStateQueue	FocusNodeFocus
debugLabelcanHandlePopSchedulerBindingschedulerPhaseSchedulerPhasepostFrameCallbacksdispatchmidFrameMicrotaskspersistentCallbackstransientCallbacksaddPostFrameCallbackstack
StackTracecurrent	initStateobserver_navigators'getElementForInheritedWidgetOfExactTypereportsRouteUpdateToEngineServicesBindingaccessibilityFocus
lastOrNulllastFocusNodeRestorableNumregisterForRestorationrestoreEntriesForPagepage	pageBasedhasDatainitialRoutemaprestorationInformationnameddidToggleBucketbucketupdatechangedExternalStateforcedDisposegracefuloverlayEntry_heroControllerFromScoperestorePendingKey
deactivateactivatecurrentStateputIfAbsentcanUpdateFrom_updateSettingsfrommarkNeedsExitingDecision_transitionrearrangeOverlay	handleAdd
handlePushhandleDidPopNext	handlePopwillBePresentPredicatehandleCompletehandleRemovaldidChangeToprouteInformationUpdateduriUriparse	rearrangeforEachnotifyremoveFirstsuitableForAnnouncement'suitableForTransitionAnimationPredicatelastAnnouncedNextRouteshouldAnnounceChangeToNextlastAnnouncedPreviousRoute	fromPartsDiagnosticsNodeErrorSummaryErrorDescriptionDiagnosticsPropertystyleDiagnosticsTreeStyleerrorProperty!debugIsSerializableForRestorationtoRouteEntryFunctionkIsWebPluginUtilitiesgetCallbackHandle	anonymousrouteBuilderkReleaseMode
jsonEncodetoEncodable	postEventany	lastWheremoveNext
firstWherefinalizedidStopUserGesturePointerDownEventpointerPointerEventRenderAbsorbPointercurrentContextfindAncestorRenderObjectOfTypesetState	absorbingWidgetsBindingcancelPointerelementNotificationListeneronNotificationnotificationListeneronPointerDownonPointerUponPointerCancelAbsorbPointerFocusTraversalGrouppolicy	autofocusskipTraversalincludeSemanticsUnmanagedRestorationScopeclipBehaviorinitialEntriesfromSerializableDatasublistelementAtOrNullcomputeSerializableDatagetCallbackFromHandleCallbackHandlefromRawHandletoRawHandleRestorablePropertyisRegisteredkeysisPresentForRestorationrestorationEnabledisRestorablegetSerializableData	setEquals
listEqualsdataMapEntrynavigatorFinder	onPresent
onComplete_getRouteByIdNotification_RoutePlaceholderRouteSettingsInheritedWidgetTransitionDelegateStatefulWidgetRouteTransitionRecord_NavigatorObservationIterableChangeNotifierStateTickerProviderStateMixinRestorationMixin_RestorationInformationRestorablePropertyNotification‡*KÓuv»,!S?òŒ    ÅŒ   
dart:async  Å„   dart:collection  Å˝   dart:convert  Ç   Ç+	developerÇ.dart:developer  Ç:   ÇJuiÇMdart:ui  ÇS   package:flutter/foundation.dart  Ç}   package:flutter/rendering.dart  Ç¶   package:flutter/scheduler.dart  Çœ   package:flutter/services.dart  Ç¯   
basic.dart  É   binding.dart  É$   focus_manager.dart  ÉA   focus_scope.dart  É\   focus_traversal.dart  É{   framework.dart  Éî   heroes.dart  É™   notification_listener.dart  Éœ   overlay.dart  ÉÊ   restoration.dart  Ñ   restoration_properties.dart  Ñ'   routes.dart  Ñ=   ticker_provider.dart¿1˚ ¿£zò* <ÄÜÄ§Ä•Ä÷ÅÅ
Å%ÅAÅ^ÅÅùÅ√ÅÃÅÕÅ‚Å¸ÇÇ9ÇQÇRÇ|Ç•ÇŒÇˆÇ˜ÉÉ#É@É[ÉzÉìÉ©ÉŒÉÂÑ Ñ&Ñ<Ñ[Ñ\Ñ∑ÖÖÖÖCÖhÖŒÖÜÜÜAÜEÜnÜrÜÄÜÑÜ¿á	á
á6á:áká‘á’àààaàÆàπàΩââPâîâﬂäämänä≠äÎäÏã=ãAãÜã»ã’ã˙å2å4ågåhåûå¢åÌç0ç~ç ç˜éFéGéÉéáé‘èèfèìè÷è◊êêêGêKêYê]ê©êªê÷êÎêÒë?ëqëxëyëïëõëÈííííNíTí•íıìììììSìWì¢ìÒî@îdîhîÆî◊î€ï*ïLïPïüïÂñ2ñzñ óóóGóóó∫óÓòòò_òsòyòÀòﬂòÈôôôTôzô¶ôÂöö7öMöVö\ö`öaö∫ö¿õõiõÜõáõπõËúúú*ú0úWú]ú®úÂùù
ùZù•ùÔû9û]ûàû£û§û⁄û€ü,ü>üDüêü¶ü¨ü˚†K†ô†È°8°k°µ¢¢	¢=¢a¢Ä¢û¢§¢®¢©¢Û£(£W£[£\£Ö£ã£⁄§§§k§z§Ä§Ã§Ò•4•5•q•w•…¶¶b¶¶å¶ù¶≤¶≥¶˝ßßKßQßûßﬂßÂ®4®c®p®Å®ú®÷®©-©5©=©A©B©â©è©€™™™e™î™°™≤™ƒ™‹´-´{´ ¨¨:¨C¨ó¨Í≠9≠k≠ü≠ÒÆDÆñÆÊØ8ØàØπØƒ∞∞b∞ï∞“∞‹∞‚∞Ê∞Á±6±<±ã±∫±«±ÿ≤≤	≤Y≤Å≤á≤◊≤ı≤˚≥F≥≥ ¥¥e¥¢¥®¥Ëµµµ`µéµîµ§µ™µı∂	∂V∂l∂{∂û∂ÿ∂‹∑∑W∑[∑\∑¨∑‘∑⁄∏*∏i∏ö∏†∏Îπ$πoπª∫
∫G∫M∫ç∫∞∫∂ªª3ª9ªIªOªòªËº*ºUºmº©º√ºº¯º˛ΩIΩMΩNΩzΩÄΩŒææTæcæìæŒæ“æˆæ˜ø:øfølø∫¿ @
¿ @@¿ @U¿ @f¿ @û¿ @∂¿ @Ê¿ A¿ A¿ A¿ A¿ AM¿ Az¿ A{¿ A≈¿ B¿ B¿ B\¿ BÉ¿ B£¿ B§¿ BÔ¿ Bı¿ CD¿ Cì¿ C®¿ CŸ¿ D¿ D¿ DL¿ DM¿ Dî¿ D‡¿ E-¿ Ey¿ Eï¿ Eõ¿ EË¿ F6¿ FÜ¿ F—¿ G!¿ G:¿ G@¿ Gê¿ G‡¿ H¿ H"¿ Hq¿ Hä¿ Hõ¿ H∂¿ Hœ¿ H‡¿ H‰¿ HÂ¿ I3¿ I9¿ Im¿ I∫¿ J¿ J(¿ J.¿ J{¿ JÃ¿ K¿ K¿ KR¿ K†¿ KÒ¿ L9¿ LF¿ LW¿ Lw¿ L¨¿ L∞¿ L±¿ L˙¿ M¿ M¿ M`¿ Mx¿ MÖ¿ Mñ¿ M∆¿ M«¿ N	¿ N¿ N_¿ NØ¿ Nı¿ O¿ O¿ On¿ Oç¿ Oö¿ O´¿ Oﬂ¿ O‡¿ P&¿ P,¿ Px¿ P»¿ Q¿ Q3¿ Q9¿ QÜ¿ Q©¿ Q∂¿ Q«¿ R¿ R¿ RG¿ RM¿ Ró¿ RË¿ S9¿ Sr¿ Sx¿ Sà¿ Sé¿ Sÿ¿ T¿ T#¿ T4¿ TV¿ TW¿ T£¿ T¿ Tˆ¿ U+¿ U|¿ Uø¿ V¿ VF¿ Vç¿ V ¿ V–¿ W¿ Wb¿ W©¿ W‚¿ WË¿ X,¿ XF¿ XL¿ X\¿ Xb¿ X≤¿ Xœ¿ X‹¿ XÌ¿ Y¿ Y¿ YA¿ YG¿ Yò¿ Y…¿ Yœ¿ Z¿ Z.¿ Z4¿ ZÅ¿ Zœ¿ [¿ [/¿ [<¿ [O¿ [f¿ [â¿ [´¿ [◊¿ \%¿ \+¿ \/¿ \0¿ \q¿ \w¿ \¨¿ \√¿ \·¿ \ı¿ \˚¿ ]n¿ ]ì¿ ]ß¿ ]≠¿ ]Ÿ¿ ]›¿ ]ﬁ¿ ^)¿ ^/¿ ^¿ ^∑¿ ^Ã¿ ^Í¿ ^˛¿ _¿ _x¿ _ù¿ _±¿ _∑¿ _„¿ _Á¿ _Ë¿ `0¿ `=¿ `^¿ `|¿ `ê¿ `ñ¿ `“¿ `Û¿ a	¿ a¿ aD¿ aY¿ aa¿ ag¿ ay¿ a}¿ a~¿ a¨¿ a≤¿ b¿ bR¿ bé¿ bî¿ bÊ¿ c:¿ cë¿ cß¿ d¿ d¿ d¿ d¿ dS¿ d^¿ dt¿ d°¿ dπ¿ d»¿ d‹¿ d‚¿ d„¿ e¿ e¿ eA¿ eW¿ eX¿ eÇ¿ eà¿ eÿ¿ eÛ¿ eÙ¿ f ¿ fx¿ fz¿ f{¿ f©¿ f≠¿ fˆ¿ g=¿ gA¿ gÖ¿ gâ¿ gù¿ gÈ¿ g˝¿ h¿ hI¿ hY¿ h]¿ hk¿ ho¿ h¿¿ h–¿ hˇ¿ i:¿ iI¿ iW¿ ig¿ i|¿ iî¿ i¨¿ iﬂ¿ iÂ¿ iÊ¿ j/¿ j0¿ jY¿ j_¿ jü¿ j∂¿ j∑¿ k¿ k¿ k¿ kn¿ kt¿ kÑ¿ kä¿ k◊¿ kÈ¿ l¿ l	¿ lG¿ lM¿ lù¿ l„¿ m¿ m¿ mY¿ m°¿ mÒ¿ n+¿ na¿ nb¿ n£¿ n©¿ nÙ¿ o¿ o¿ oa¿ o≠¿ o⁄¿ oÔ¿ o¿ p.¿ p4¿ pÉ¿ pê¿ p∏¿ pÁ¿ q¿ q¿ q	¿ qB¿ qH¿ qû¿ q©¿ q◊¿ qÿ¿ q‰¿ r<¿ r>¿ r?¿ r}¿ ró¿ r”¿ s	¿ s
¿ sR¿ s°¿ s€¿ t¿ tc¿ t´¿ tˆ¿ u@¿ u`¿ u∞¿ u±¿ u◊¿ u›¿ v(¿ vI¿ vë¿ ví¿ v∏¿ væ¿ w¿ w%¿ wl¿ wm¿ wî¿ wö¿ wÂ¿ x¿ x¿ x\¿ xß¿ x˜¿ y¿ y`¿ ya¿ yú¿ yÍ¿ yÎ¿ z¿ z¿ zf¿ zµ¿ zˆ¿ z¸¿ {L¿ {ù¿ {Ë¿ |;¿ |<¿ |~¿ |Ñ¿ |”¿ }¿ }b¿ }c¿ }†¿ }¶¿ }‚¿ ~¿ ~¿ ~¿ ~8¿ ~<¿ ~Ö¿ ~”¿  ¿ $¿ s¿ √¿ Ä¿ ÄX¿ Äå¿ Ä√¿ Ä·¿ Ä¿ Å¿ Å7¿ Å=¿ Å>¿ Åè¿ Åú¿ Åø¿ ÅŒ¿ ÅË¿ Ç¿ Ç¿ Ç@¿ Çd¿ Çe¿ Ç±¿ ÇŸ¿ Çﬂ¿ É!¿ É`¿ Éf¿ Év¿ É|¿ ÉÀ¿ Ñ¿ Ñ;¿ Ñ§¿ Ñ¡¿ Ñ≈¿ Ñ∆¿ Ö¿ Ö"¿ Ö(¿ Öx¿ Öú¿ Ö¢¿ Ö‰¿ Ü¿ Ü¿ Ü(¿ Ü.¿ Üz¿ Üæ¿ ÜÒ¿ á*¿ á:¿ áZ¿ áv¿ áŒ¿ á¯¿ àM¿ àü¿ à¿ â%¿ âI¿ âa¿ âl¿ ât¿ âá¿ âë¿ â©¿ â≠¿ âÆ¿ â∫¿ âı¿ ä$¿ ä(¿ ä*¿ ä+¿ äz¿ äƒ¿ äÎ¿ ã¿ ã,¿ ã-¿ ã~¿ ãÑ¿ ã‘¿ å¿ åC¿ ål¿ åm¿ åΩ¿ å√¿ ç¿ ç]¿ çÅ¿ ç©¿ ç™¿ ç‡¿ çÊ¿ é3¿ éô¿ éË¿ é˛¿ éˇ¿ è7¿ è=¿ èä¿ è¿ êA¿ êV¿ êW¿ êç¿ êì¿ êﬂ¿ ë0¿ ëN¿ ës¿ ët¿ ë∞¿ ë∂¿ í¿ íO¿ íù¿ í«¿ í»¿ ì¿ ì¿ ìT¿ ì¢¿ ìﬂ¿ ì˜¿ ì˘¿ ì˙¿ îK¿ îs¿ îw¿ î∆¿ ï¿ ï¿ ïh¿ ïl¿ ïÄ¿ ïœ¿ ñ¿ ñ?¿ ñC¿ ñO¿ ñö¿ ñ™¿ ñ⁄¿ ó¿ ó|¿ ó·¿ óÏ¿ ò;¿ ò?¿ òå¿ òƒ¿ òË¿ òÙ¿ ô¿ ô¿ ô$¿ ôÜ¿ ôƒ¿ ôÒ¿ ö]¿ öÜ¿ ö◊¿ õ¿ õ¿ õ#¿ õ/¿ õX¿ õ\¿ õf¿ õ~¿ õÜ¿ õå¿ õê¿ õò¿ õ®¿ õ¨¿ õ∫¿ õæ¿ ú	¿ ú&¿ úu¿ ú´¿ ú“¿ ù¿ ù:¿ ù;¿ ùk¿ ù©¿ û¿ ûf¿ ûm¿ û™¿ û⁄¿ ü¿ üT¿ ü[¿ üù¿ ü§¿ üø¿ †¿ † ¿ †m¿ †î¿ †‚¿ °	¿ °X¿ °©¿ °∆¿ °’¿ °‹¿ ¢¿ ¢¿ ¢G¿ ¢N¿ ¢|¿ ¢Ã¿ ¢Ì¿ ¢Ù¿ £?¿ £å¿ £ú¿ £˜¿ §]¿ §ù¿ §Ì¿ •,¿ •s¿ •ﬂ¿ ¶¿ ¶+¿ ¶5¿ ¶=¿ ¶é¿ ¶º¿ ¶Ë¿ ¶È¿ ß;¿ ß†¿ ß≠¿ ßı¿ ®?¿ ®K¿ ®Ö¿ ®µ¿ ®∆¿ ®Û¿ ®˝¿ ©¿ ©¿ ©¿ ©Z¿ ©}¿ ©Õ¿ ™¿ ™¿ ™2¿ ™<¿ ™=¿ ™Q¿ ™U¿ ™V¿ ™°¿ ™Ì¿ ™Û¿ ´D¿ ´å¿ ´…¿ ¨¿ ¨b¿ ¨≥¿ ¨›¿ ¨„¿ ≠/¿ ≠}¿ ≠…¿ Æ¿ Æc¿ Æ¨¿ Æ˚¿ Ø1¿ Ø}¿ Ø»¿ ∞¿ ∞0¿ ∞a¿ ∞∞¿ ∞¸¿ ±L¿ ±ö¿ ±È¿ ≤7¿ ≤U¿ ≤[¿ ≤©¿ ≤¯¿ ≥G¿ ≥r¿ ≥x¿ ≥»¿ ¥¿ ¥P¿ ¥õ¿ ¥‰¿ µ3¿ µu¿ µ{¿ µ´¿ µ±¿ µŸ¿ µﬂ¿ ∂¿ ∂¿ ∂B¿ ∂H¿ ∂s¿ ∂ø¿ ∂‹¿ ∂‚¿ ∑¿ ∑¿ ∑X¿ ∑°¿ ∑ß¿ ∑∑¿ ∑Ω¿ ∏¿ ∏4¿ ∏Ñ¿ ∏≠¿ ∏¸¿ π"¿ πn¿ π∫¿ ∫
¿ ∫L¿ ∫õ¿ ∫›¿ ª	¿ ªG¿ ª£¿ º¿ º
¿ º¿ º¿ º^¿ ºû¿ º¢¿ ºÛ¿ ΩA¿ Ωñ¿ Ω”¿ æ¿ æY¿ æÜ¿ æµ¿ æ∂¿ æ¬¿ æÓ¿ ø,¿ øà¿ øÈ¿ ø¿ ¿;¿ ¿ã¿ ¿Ÿ¿ ¡¿ ¡g¿ ¡√¿ ¡È¿ ¡˘¿ ¬¿ ¬;¿ ¬ö¿ √¿ √F¿ √ì¿ √§¿ √ˆ¿ ƒ ¿ ƒ ¿ ƒã¿ ƒŸ¿ ≈(¿ ≈t¿ ≈√¿ ∆ ¿ ∆T¿ ∆°¿ ∆∏¿ «
¿ «¿ «(¿ «4¿ «>¿ «F¿ «k¿ «l¿ «¿¿ «Ù¿ «˙¿ «˚¿ »2¿ »m¿ »n¿ »∑¿ …¿ …5¿ …ä¿ …≠¿ …æ¿ …‡¿ …Í¿ …Ú¿  ¿  F¿  L¿  `¿  d¿  f¿  g¿  ®¿  ¨¿  Ó¿ ÀR¿ ÀS¿ Àù¿ À°¿ À¿ Ã?¿ Ãç¿ Ã‚¿ Õ3¿ Õp¿ Õt¿ Õè¿ Õì¿ Õ„¿ Œ2¿ ŒÅ¿ Œ—¿ œ¿ œk¿ œç¿ œë¿ œ‡¿ –-¿ –e¿ –â¿ –ç¿ –◊¿ –€¿ –˙¿ –˛¿ —G¿ —ç¿ —”¿ “¿ “d¿ “é¿ “í¿ “›¿ ”'¿ ”u¿ ”¿¿ ‘
¿ ‘U¿ ‘§¿ ‘Ì¿ ’¿ ’¿ ’8¿ ’<¿ ’ä¿ ’⁄¿ ÷(¿ ÷A¿ ÷E¿ ÷ì¿ ÷„¿ ◊	¿ ◊¿ ◊¿ ◊+¿ ◊_¿ ◊e¿ ◊m¿ ◊q¿ ◊¥¿ ◊˛¿ ÿ-¿ ÿ1¿ ÿ=¿ ÿr¿ ÿö¿ ÿ≥¿ ÿÎ¿ Ÿ¿ Ÿ"¿ ŸJ¿ Ÿh¿ Ÿê¿ Ÿ°¿ Ÿ∞¿ ŸΩ¿ Ÿ»¿ Ÿ—¿ ŸŸ¿ Ÿ·¿ ŸÂ¿ ⁄+¿ ⁄n¿ ⁄•¿ ⁄©¿ ⁄Û¿ €¿ €"¿ €.¿ €J¿ €R¿ €V¿ €°¿ €Ï¿ ‹-¿ ‹t¿ ‹î¿ ‹ò¿ ‹Ω¿ ‹¡¿ ›¿ ›H¿ ›¿ ›∂¿ ›∫¿ ›ﬂ¿ ﬁ)¿ ﬁq¿ ﬁª¿ ﬁø¿ ﬁÀ¿ ﬁ›¿ ﬁ˜¿ ﬂ7¿ ﬂa¿ ﬂ∞¿ ﬂˇ¿ ‡N¿ ‡Y¿ ‡c¿ ‡i¿ ‡q¿ ‡u¿ ‡í¿ ‡ñ¿ ‡¢¿ ‡ ¿ ‡“¿ ‡÷¿ ‡¯¿ ‡¸¿ ·E¿ ·{¿ ·¿ ·Õ¿ ‚¿ ‚(¿ ‚,¿ ‚u¿ ‚¥¿ ‚∏¿ ‚ƒ¿ „¿ „5¿ „L¿ „n¿ „ì¿ „À¿ „ÿ¿ „„¿ „Î¿ „Û¿ „˚¿ „ˇ¿ ‰G¿ ‰ë¿ ‰≠¿ ‰±¿ ‰˝¿ Â9¿ ÂÑ¿ Â’¿ Â‰¿ ÂË¿ Â˝¿ Ê¿ ÊM¿ Êû¿ ÊÌ¿ Á¿ Á¿ Á\¿ Á•¿ ÁÍ¿ Ë.¿ Ëe¿ Ëi¿ Ë∫¿ È¿ ÈR¿ ÈV¿ Èl¿ Èp¿ È¿¿ Í¿ Í^¿ Íë¿ Íï¿ Í·¿ Î/¿ ÎÄ¿ ÎÕ¿ Î—¿ Î›¿ Ï¿ Ï&¿ ÏY¿ Ïì¿ Ïú¿ ÏÔ¿ Ì¿ Ì,¿ ÌQ¿ Ìú¿ Ì∂¿ Ì√¿ ÌŒ¿ Ì÷¿ Ìﬁ¿ ÌÊ¿ ÌÍ¿ Ó'¿ Óo¿ ÓΩ¿ Ô¿ ÔN¿ Ôd¿ Ôh¿ Ô∑¿ Ôÿ¿ Ô‹¿ Ô˜¿ Ô˚¿ G¿ ó¿ Ë¿ Ò%¿ Ò)¿ Ò:¿ Ò>¿ Òã¿ ÒŸ¿ Ú¿ Ú¿ Úh¿ Úµ¿ Û¿ ÛQ¿ Û†¿ Û∂¿ Û∫¿ Ù¿ ÙU¿ Ùm¿ Ùq¿ ÙÑ¿ Ù”¿ ı¿ ı¿ ıT¿ ı§¿ ı®¿ ıÒ¿ ˆ"¿ ˆ&¿ ˆp¿ ˆÄ¿ ˆÑ¿ ˆ”¿ ˜¿ ˜m¿ ˜Ω¿ ˜Î¿ ˜Ô¿ ¯¿ ¯¿ ¯d¿ ¯Æ¿ ¯˚¿ ˘L¿ ˘g¿ ˘k¿ ˘Ñ¿ ˘à¿ ˘”¿ ˙¿ ˙i¿ ˙∑¿ ˙Ÿ¿ ˙›¿ ˚'¿ ˚8¿ ˚à¿ ˚∑¿ ¸¿ ¸U¿ ¸ü¿ ¸Ì¿ ˝9¿ ˝`¿ ˝d¿ ˝®¿ ˝ˆ¿ ˛B¿ ˛ä¿ ˛≥¿ ˇ¿ ˇ¿ ˇL¿ ˇ`¿ ˇo¿ ˇô¿ ˇ™¿ ˇ–¿ ¿ ¿ '¿ >¿ â¿ £¿ º¿¿3¿Z¿å¿™¿«¿¿+¿1¿2¿n¿t¿º¿	¿B¿í¿ò¿‚¿¿!¿q¿æ¿¿^¿Ö¿ã¿÷¿&¿t¿∂¿“¿ÿ¿)¿]¿c¿Æ¿˛¿5¿X¿Y¿ï¿õ¿Á¿	¿	¿	b¿	ë¿	ó¿	„¿
	¿
¿
`¿
Ø¿
ˇ¿7¿F¿j¿•¿©¿Õ¿Œ¿¿8¿>¿É¿«¿Õ¿¿,¿2¿É¿«¿¿6¿f¿g¿∑¿Ÿ¿ﬂ¿¿F¿G¿r¿x¿®¿Æ¿˚¿-¿3¿Ç¿”¿¿8¿9¿w¿û¿ü¿ﬁ¿‰¿0¿Å¿ö¿†¿Ó¿+¿Q¿R¿Ä¿´¿¨¿˚¿¿¿S¿¢¿Ú¿)¿/¿{¿…¿’¿€¿¿j¿∫¿·¿Á¿˜¿˝¿J¿\¿™¿—¿¿e¿≥¿Î¿ ¿$¿%¿s¿Ω¿√¿
¿T¿ü¿Ô¿>¿å¿Ÿ¿)¿H¿]¿ó¿ò¿—¿◊¿Á¿Ì¿G¿n¿ú¿ù¿Ì¿¿ ¿R¿X¿¶¿ˆ¿¿¿Y¿ê¿ﬁ¿ .¿ {¿ ¿¿!¿!\¿!e¿!ó¿!ò¿!‰¿"¿"¿"e¿"∂¿#¿#	¿#U¿#à¿#”¿$#¿$q¿$Ö¿$ã¿$⁄¿%(¿%v¿%¡¿%Ã¿%“¿%Î¿&¿&¿&K¿&Q¿&°¿&¥¿&∫¿&›¿&¯¿&˘¿'L¿'É¿'â¿'ﬁ¿'ı¿'˚¿(¿(.¿(/¿(Ä¿(è¿(ï¿(À¿)¿)X¿)^¿)§¿)Ò¿*1¿*U¿*[¿*¨¿*∫¿*¿¿+
¿+¿+Z¿+j¿+¿+Ö¿+«¿,¿,N¿,c¿,i¿,ü¿,·¿-2¿-¿-µ¿-ª¿-ˇ¿.8¿.M¿.S¿.i¿.o¿.í¿.ò¿.¶¿.ƒ¿.˜¿.ˇ¿/	¿/¿/!¿/7¿/=¿/â¿/ñ¿/ú¿/™¿/Ã¿/È¿/¸¿0¿09¿0W¿0y¿0Ü¿0ë¿0ô¿0£¿0µ¿0ª¿0—¿0◊¿1#¿1)¿17¿1[¿1©¿1ƒ¿1‚¿1Ë¿2¿2F¿2P¿2X¿2^¿2z¿2ó¿2™¿2¿¿3¿3¿3#¿3-¿3?¿3E¿3U¿3[¿3•¿3»¿3‹¿4¿4(¿4@¿4W¿4^¿4Æ¿4≤¿4≥¿5¿5¿5¿5Y¿5®¿5Ù¿6-¿6B¿6H¿6{¿6Å¿6À¿7¿7V¿7¶¿7≈¿7À¿8¿8F¿8[¿8a¿8≠¿8¸¿9J¿9ó¿9‰¿: ¿:¿:¿:1¿:7¿:Z¿:`¿:n¿:è¿:∂¿:…¿:ﬂ¿;¿;#¿;D¿;Q¿;\¿;d¿;n¿;Ä¿;î¿;Ã¿;Ê¿;˛¿<¿<¿<v¿<z¿<{¿<À¿=¿=`¿=f¿=ß¿=Û¿>@¿>â¿>ÿ¿?&¿?o¿?u¿?º¿@¿@¿@T¿@°¿@·¿A/¿A}¿A ¿AÚ¿A¯¿BI¿BW¿B]¿B´¿BÏ¿BÚ¿CC¿CV¿Ck¿Cq¿C∞¿C∂¿CÈ¿CÔ¿D¿D¿D.¿D4¿DB¿De¿DÆ¿D∂¿D¿¿D“¿Dÿ¿DË¿DÓ¿E?¿Er¿EÜ¿E◊¿EÒ¿F	¿F¿F0¿F7¿F¶¿F™¿F´¿F˚¿GI¿Gê¿Gñ¿G·¿H/¿H~¿H¿¿H’¿H€¿I¿I¿If¿Il¿Iµ¿Iª¿I—¿I◊¿I˙¿J ¿J¿J2¿JÅ¿Jâ¿Jì¿J•¿Jπ¿K¿K*¿KB¿KR¿Ki¿Kp¿KÈ¿KÌ¿KÓ¿L;¿Lt¿Lz¿L∂¿L˜¿L˝¿MJ¿Mê¿Mñ¿MÂ¿N&¿Nt¿N√¿O¿O^¿OÆ¿OÂ¿OÎ¿P<¿PJ¿PP¿Pû¿Pÿ¿Pﬁ¿Q7¿QL¿QR¿Që¿Qó¿Q ¿Q–¿QÊ¿QÏ¿R¿R¿R#¿RG¿Ré¿Rñ¿R†¿R≤¿R∏¿R»¿RŒ¿S¿SE¿SY¿S•¿Sø¿S◊¿SÁ¿S˛¿T¿To¿Ts¿Tt¿T¡¿T˙¿U ¿UF¿Uè¿Uﬁ¿V ¿V5¿V;¿Vt¿Vz¿V¡¿V«¿W¿W¿W,¿W2¿WU¿W[¿Wi¿Wá¿W“¿W⁄¿W‰¿Wˆ¿X
¿X\¿Xv¿Xé¿Xû¿Xµ¿Xº¿Y0¿Y4¿Y5¿YÉ¿Y”¿Y˜¿Y˝¿ZA¿Zà¿Z∑¿ZΩ¿Zˇ¿[;¿[A¿[è¿[Ÿ¿[ﬂ¿\,¿\Y¿\_¿\û¿\Ï¿]¿]¿]X¿]ß¿]‰¿^$¿^n¿^º¿_
¿_0¿_6¿_á¿_ï¿_õ¿_È¿_Ô¿`?¿`W¿`l¿`r¿`±¿`∑¿`Í¿`¿a¿a¿a/¿a5¿aC¿ac¿aæ¿a∆¿a–¿a‚¿aË¿a¯¿a˛¿bN¿b}¿bë¿b—¿bÎ¿c¿c$¿c;¿cB¿cÆ¿c≤¿c≥¿d¿dQ¿du¿d{¿d…¿e¿ei¿e´¿e¿¿e∆¿f¿f¿fT¿fZ¿f£¿f©¿fø¿f≈¿fË¿fÓ¿f¸¿g¿gÅ¿gâ¿gì¿g•¿gπ¿gˇ¿h¿h2¿hR¿hi¿hp¿hÊ¿hÍ¿hÎ¿i8¿iM¿iS¿iÑ¿i ¿j¿jW¿j{¿jÅ¿j“¿j‡¿jÊ¿k0¿kE¿kK¿kä¿kê¿k¶¿k¨¿kœ¿k’¿k„¿k˛¿l¿l/¿lR¿lë¿lû¿l©¿l±¿lª¿lÕ¿l”¿l„¿lÈ¿m5¿mQ¿me¿mπ¿mÁ¿mÎ¿mÏ¿n5¿nJ¿nP¿nã¿nŸ¿o(¿oZ¿oo¿ou¿o£¿o©¿o‰¿p3¿p¿pÀ¿q¿qZ¿qû¿q§¿q¿r;¿rP¿rV¿rü¿r•¿rª¿rﬁ¿r‰¿s@¿sR¿sf¿sÌ¿tB¿tF¿tG¿tó¿tÊ¿u ¿u&¿ub¿uÆ¿v ¿vN¿vû¿vÏ¿w*¿w0¿w|¿w…¿x	¿xW¿xô¿xü¿x¿x˛¿y¿yR¿yì¿y®¿yÆ¿yÌ¿yÛ¿z	¿z¿z2¿z8¿zF¿zd¿zì¿z¶¿z…¿{¿{¿{$¿{,¿{6¿{H¿{N¿{^¿{d¿{¥¿{„¿{˜¿|}¿|–¿|‘¿|’¿}%¿}p¿}™¿}∞¿}ˆ¿~D¿~é¿~–¿~Â¿~Î¿$¿*¿b¿h¿±¿∑¿Õ¿¿ˆ¿Ä^¿Äp¿ÄÑ¿Å8¿ÅØ¿Å≥¿Å¥¿Ç¿ÇH¿Çh¿Çn¿Ç≠¿ÇÙ¿É#¿É)¿Ék¿Éß¿É≠¿É˚¿ÑE¿ÑK¿Ñò¿Ñ≈¿ÑÀ¿Ö¿Öb¿Ö¨¿Ö¸¿ÜE¿Üí¿Ü‚¿á#¿á)¿áz¿áà¿áé¿á‹¿áÒ¿á˜¿à6¿à<¿àR¿àX¿à{¿àÅ¿àè¿àµ¿à·¿àÙ¿âN¿âr¿â}¿âÖ¿âè¿â°¿âß¿â∑¿âΩ¿ä¿ä3¿äG¿ä∆¿ã¿ã¿ã¿ãa¿ã®¿ã»¿ãŒ¿å¿åh¿å≤¿åÙ¿ç	¿ç¿çK¿çQ¿çâ¿çè¿çÿ¿çﬁ¿çÙ¿é¿é¿éä¿éú¿é∞¿èb¿è÷¿è⁄¿è€¿ê(¿êH¿êN¿êÇ¿êŒ¿ë¿ël¿ëº¿ë‰¿ëÍ¿í:¿íb¿íh¿íπ¿í¯¿ìH¿ìê¿ì›¿î.¿îG¿îM¿îù¿îø¿î≈¿ï¿ï(¿ï.¿ï>¿ïD¿ïì¿ïﬁ¿ñ'¿ñS¿ñg¿ñÍ¿ó?¿óC¿óD¿óë¿ó±¿ó∑¿óı¿òD¿òì¿ò≈¿ò⁄¿ò‡¿ô¿ô¿ôO¿ôU¿ôû¿ô≤¿öl¿öÔ¿öÛ¿öÙ¿õA¿õè¿õ™¿õ∞¿õÓ¿ú8¿úá¿ú÷¿ù&¿ùN¿ùT¿ù§¿ùÃ¿ù“¿û#¿ûb¿û≤¿û˙¿üG¿üò¿ü±¿ü∑¿†¿†¿† ¿†0¿†6¿†É¿†ñ¿†Ê¿°¿°)¿°π¿¢¿¢"¿¢#¿¢p¿¢æ¿¢Ÿ¿¢ﬂ¿£'¿£u¿£√¿§¿§ ¿§&¿§a¿§g¿§ü¿§•¿§Ó¿•¿•…¿¶\¿¶`¿¶a¿¶±¿¶ø¿¶≈¿¶¯¿ßG¿ßó¿ß∞¿ß∂¿ß¿ßˆ¿®F¿®X¿®m¿®s¿®É¿®â¿®‘¿®Ï¿©¿©[¿©è¿©ì¿©î¿©ÿ¿™$¿™r¿™Å¿™á¿™º¿´¿´]¿´t¿´z¿´ ¿¨¿¨¿¨_¿¨©¿¨Ú¿¨¯¿≠I¿≠ê¿≠ñ¿≠·¿Æ,¿Æ;¿ÆP¿ÆV¿Æf¿Æl¿Æ∫¿Æ˜¿ØH¿Øy¿Øç¿ØÊ¿∞¿∞ ¿∞!¿∞o¿∞Ñ¿∞ä¿∞∫¿±
¿±X¿±ù¿±Í¿±¿≤<¿≤ä¿≤”¿≥"¿≥p¿≥ª¿≥¡¿¥¿¥`¿¥†¿¥√¿¥…¿µ¿µ ¿µm¿µî¿µ©¿µØ¿µ≈¿µÀ¿∂¿∂¿∂¿∂,¿∂L¿∂T¿∂^¿∂p¿∂v¿∂®¿∂Æ¿∂º¿∂”¿∑¿∑¿∑"¿∑6¿∑Ç¿∑¨¿∑∞¿∑±¿∑˛¿∏4¿∏:¿∏o¿∏∂¿∏Â¿∏Î¿π4¿π_¿πe¿π§¿π™¿π¿∫¿∫¿∫!¿∫'¿∫J¿∫P¿∫^¿∫u¿∫π¿∫¡¿∫À¿∫›¿ª&¿ªU¿ªY¿ªZ¿ª©¿ª⁄¿ª‡¿º¿ºh¿ºµ¿ºÕ¿º”¿Ω¿Ωg¿ΩØ¿Ω˚¿æL¿æe¿æk¿æµ¿æ”¿æŸ¿ø¿ø,¿ø2¿øÉ¿ø∑¿øˇ¿¿4¿¿8¿¿9¿¿à¿¿ÿ¿¡¿¡¿¡D¿¡î¿¡·¿¡˘¿¡ˇ¿¬D¿¬ì¿¬€¿√'¿√x¿√ë¿√ó¿√Ë¿ƒ0¿ƒ6¿ƒt¿ƒâ¿ƒ‹¿≈¿≈ ¿≈!¿≈q¿≈Ä¿≈Ü¿≈©¿≈Ø¿≈Ω¿≈Ÿ¿≈È¿≈˘¿∆¿∆%¿∆+¿∆|¿∆≈¿∆¿∆ˆ¿«H¿«ê¿«ñ¿«÷¿«Ú¿»¿».¿»5¿»T¿»ô¿»≤¿»∏¿»π¿»◊¿…$¿…n¿…o¿…¿…û¿…∫¿ ¿ q¿ ±¿ º¿ ƒ¿ ◊¿ ·¿ ¯¿ ¸¿ ˝¿ÀM¿Àd¿Àj¿Àç¿Àì¿À°¿À‰¿Ã¿Ã¿Ã1¿ÃC¿Ãg¿Ão¿Ãy¿Ã¿Ã–¿Õ¿ÕD¿ÕJ¿Õó¿Õù¿Õ›¿Õˇ¿Œ¿Œ;¿ŒB¿Œa¿Œ¶¿Œø¿Œ≈¿Œ∆¿Œﬂ¿œ,¿œv¿œz¿œ{¿œ≤¿œ∏¿–¿–)¿–/¿–Ä¿–Œ¿—¿—2¿—8¿—à¿—‘¿“#¿“^¿“Œ¿”¿”W¿”§¿”’¿”˙¿‘¿‘N¿‘c¿‘o¿‘ﬂ¿’"¿’K¿’j¿’ö¿’ª¿’—¿’˛¿÷¿÷'¿÷ä¿÷î¿÷ú¿÷Ω¿÷—¿÷ı¿◊¿◊/¿◊h¿◊Ø¿ÿ!¿ÿv¿ÿÖ¿ÿí¿ÿ©¿ÿ∑¿ÿÌ¿Ÿ	¿Ÿ¿Ÿ+¿Ÿ3¿Ÿt¿Ÿﬂ¿⁄!¿⁄á¿⁄ç¿⁄Ã¿⁄”¿€¿€o¿€∏¿€ÿ¿‹¿‹4¿‹ì¿‹ô¿‹√¿‹«¿‹»¿‹‘¿›¿›
¿›¿›B¿›E¿›w¿›ú¿›¡¿›Á¿ﬁ¿ﬁ;¿ﬁb¿ﬁà¿ﬁ∏¿ﬁË¿ﬂ¿ﬂH¿ﬂx¿ﬂ®¿ﬂ‹¿‡¿‡;¿‡i¿‡ñ¿‡¬¿‡Ì¿·¿·9¿·c¿·ë¿·π¿·‡¿‚¿‚0¿‚X¿‚Ä¿‚®¿‚–¿‚˘¿„¿„H¿„m¿„ñ¿„ª¿„‡¿‰¿‰A¿‰D¿‰ê¿‰∑¿Â¿Â¿Âw¿Â|¿Âö¿Âü¿Ê¿Êp¿Êõ¿ÊÙ¿Á[¿Áü¿Ë¿Ë$¿Ë)¿ËK¿ËP¿Ëπ¿Ë›¿È¿ÈD¿È¨¿Í¿Íg¿ÍØ¿Í„¿Î.¿Î{¿Îö¿Îƒ¿Î∆¿Î«¿Ï¿Ï	¿Ï&¿Ï@¿Ï]¿Ï_¿Ï`¿Ïí¿Ï°¿Ï≥¿Ï‡¿Ïˇ¿Ì"¿ÌY¿Ìj¿Ì†¿Ì“¿Ó¿Ó?¿Ós¿Ó¿Ó¶¿ÓÊ¿Ô¿ÔJ¿Ôâ¿Ô∫¿Ô›¿ÔÛ¿Ô¸¿¿¿¿¿1¿j¿Ç¿É¿”¿˛¿Ò.¿Ò/¿Òt¿Òu¿Òï¿Ú¿Úò¿Ú¸¿ÛI¿ÛJ¿Ûö¿Û‡¿Û˛¿ÙN¿Ùñ¿Ù´¿ÙÌ¿ı9¿ı?¿ıi¿ı©¿ıØ¿ı¿¿ıƒ¿ı≈¿ı¿ˆ
¿ˆ¿ˆ$¿ˆ:¿ˆN¿ˆT¿ˆô¿ˆø¿ˆ√¿ˆƒ¿˜(¿˜Y¿˜}¿˜£¿˜≈¿˜⁄¿¯¿¯2¿¯]¿¯ñ¿¯ù¿¯°¿¯¢¿˘D¿˘–¿˘Ù¿˙ ¿˙ ¿˙m¿˙ï¿˙ú¿˙‘¿˙ˆ¿˚¿˚8¿˚ó¿˚œ¿˚˝¿¸)¿¸`¿¸è¿¸∫¿˝¿˝.¿˝w¿˝Å¿˝ã¿˝ò¿˝œ¿˝Ò¿˛¿˛"¿˛8¿˛Y¿˛_¿˛`¿˛ƒ¿˛Ò¿ˇ/¿ˇ8¿ˇE¿ˇz¿ˇß¿ˇ‚¿ˇÎ¿ˇÒ¿ˇı¿ˇˆ¿ ,¿ O¿ û¿ ø¿ Ú¿;¿d¿ã¿Ì¿I¿•¿Ÿ¿#¿â¿¨¿¿&¿:¿D¿N¿T¿X¿Y¿¿Ö¿“¿¿¿l¿à¿Ï¿¿;¿g¿í¿‹¿"¿;¿`¿s¿y¿°¿Ã¿‡¿Ê¿¿2¿t¿®¿Æ¿»¿Ÿ¿›¿ﬁ¿¯¿	¿	8¿	á¿	≤¿	∂¿	∑¿
¿
C¿
n¿
õ¿
ø¿
Ï¿)¿2¿8¿<¿=¿ç¿°¿ ¿‡¿¿¿¿¿%¿&¿A¿X¿t¿ú¿†¿°¿…¿ ¿˘¿&¿2¿c¿≥¿¿¿F¿T¿Z¿q¿ù¿»¿Ã¿Õ¿ ¿<¿H¿y¿…¿¿¿\¿j¿p¿á¿≥¿œ¿¸¿ ¿¿¿U¿Å¿Ö¿Ü¿√¿…¿¿2¿K¿å¿Ã¿¿0¿~¿Ñ¿±¿∆¿ ¿À¿¸¿¿R¿ñ¿π¿ø¿	¿¿^¿å¿ç¿›¿*¿l¿ª¿¿¿z¿{¿ù¿¥¿¬¿»¿…¿Ú¿¿C¿|¿≥¿’¿Î¿¿(¿;¿c¿¿Õ¿¿h¿∑¿‹¿È¿1¿j¿í¿›¿+¿K¿ë¿ß¿µ¿Ù¿¿¿)¿2¿U¿[¿_¿`¿{¿∫¿ˆ¿˙¿˚¿¿S¿è¿ì¿î¿Ï¿Ì¿¿U¿í¿ñ¿ó¿√¿ ¿ A¿ E¿ F¿ Ö¿ ∂¿!¿!@¿!N¿!i¿!Ø¿!∂¿!∫¿!ª¿"¿"u¿"≈¿"∆¿#¿#E¿#I¿#J¿#V¿#™¿#´¿#∑¿#ˇ¿$,¿$-¿$w¿$x¿$Ñ¿$õ¿$ß¿$Î¿%=¿%ê¿%ó¿%¿¿%ƒ¿%≈¿%—¿%Á¿%Û¿&7¿&à¿&€¿&‚¿'
¿'¿'¿'¿'A¿'M¿'û¿'Ô¿(C¿(J¿(é¿(£¿(œ¿(›¿(Í¿)¿)4¿)A¿)ì¿)ú¿)œ¿)È¿)Í¿)¿*
¿*4¿*8¿*9¿*E¿*p¿*|¿*Õ¿+¿+r¿+Ä¿+á¿+¶¿+–¿+‘¿+’¿+·¿+˙¿,¿,W¿,¶¿,˙¿-¿-¿-¿-G¿-K¿-L¿-ï¿-º¿-È¿.'¿.+¿.-¿..¿.U¿.n¿.Ö¿.û¿.£¿.»¿.¿.Ò¿/¿/¿/¿/_¿/|¿/î¿/Æ¿/≥¿/¥¿/¿¿/Ï¿0 ¿0$¿0&¿0'¿0f¿0Ç¿0ö¿0¥¿0π¿0∫¿0∆¿0Ú¿1%¿1)¿1+¿1,¿1n¿1ç¿1•¿1ø¿1ƒ¿1≈¿1—¿1˝¿23¿27¿29¿2:¿2}¿2ù¿2µ¿2œ¿2‘¿2’¿2·¿3¿3X¿3\¿3^¿3_¿3°¿3¢¿3Á¿3Î¿48¿4E¿4à¿4±¿4¿¿4Ï¿5$¿5*¿5.¿5/¿5c¿5d¿5¢¿5Õ¿5—¿5“¿5Ù¿6¿6$¿6(¿6)¿6Y¿6v¿6ï¿6Æ¿6¥¿6∏¿6π¿6 ¿6˘¿7¿7'¿7@¿7F¿7J¿7K¿7{¿7û¿7µ¿7π¿7∫¿7ﬁ¿8¿8+¿8=¿8A¿8B¿8_¿8í¿8©¿8ª¿8ø¿8¿¿8Á¿9¿9¿9¿9¿99¿9U¿9Y¿9Z¿9f¿9|¿9ö¿9û¿9†¿9°¿9…¿9Õ¿:¿:v¿:¢¿: ¿:À¿;¿;(¿;.¿;|¿;π¿;ø¿<¿<R¿<û¿<‚¿=A¿=†¿=°¿=·¿>#¿>$¿>¿>Ä¿>¨¿>≠¿>·¿>‚¿?(¿?)¿?J¿?u¿?î¿?∞¿@¿@:¿@á¿@î¿@≤¿@∏¿A ¿A7¿A>¿AÄ¿A∏¿AÊ¿B¿B.¿B\¿Bã¿Bπ¿C¿C!¿C5¿CA¿Ck¿C•¿C´¿CØ¿C∞¿Cÿ¿CÛ¿D¿D¿D,¿DL¿Di¿Då¿DÃ¿DÛ¿E ¿E%¿EJ¿EU¿E^¿EØ¿Eœ¿EÏ¿F¿F^¿Fè¿Fú¿F¡¿FÊ¿FÒ¿F˙¿G ¿G¿G¿G¿G"¿G7¿GN¿Gz¿Gª¿GÂ¿H¿H!¿HM¿HN¿Hõ¿H–¿I¿IS¿I{¿I∑¿I∏¿IÂ¿J¿J¿J¿Jm¿Jû¿J¢¿J£¿J’¿J¿KJ¿Kò¿Kú¿Kù¿K‹¿L3¿L4¿Lç¿Lé¿Lö¿L„¿M)¿Mf¿Mg¿M™¿Mœ¿MÌ¿N¿N¿NR¿Nü¿N‘¿O¿O$¿O=¿Oh¿Oq¿O¿O•¿Oı¿PD¿PM¿Ph¿P∏¿Pæ¿Pø¿Q¿Q6¿Qh¿Qä¿Qø¿Q«¿QÈ¿R¿R,¿R>¿R}¿R¥¿R…¿RÈ¿S¿S\¿Sç¿Sª¿Sﬁ¿T%¿T7¿TO¿T^¿Tk¿Tv¿T~¿TÑ¿TÖ¿Të¿T¨¿T¯¿UF¿Uì¿U∞¿U∑¿U“¿V
¿V&¿V_¿Vc¿Vd¿Vp¿Vß¿VÕ¿VÁ¿W¿W!¿WE¿WK¿WO¿W[¿Wï¿Wñ¿W¢¿W√¿WÊ¿X'¿XW¿XÅ¿Xá¿Xã¿Xå¿Xƒ¿XÌ¿Y3¿YP¿Yc¿Yk¿Yç¿Yœ¿Y’¿YŸ¿Y⁄¿Z*¿Zt¿Zë¿Zó¿Z´¿Z¬¿Zœ¿ZÏ¿ZÚ¿Zˆ¿Z˜¿[9¿[r¿[ô¿[Ó¿\¿\Q¿\°¿\“¿]¿]V¿]ß¿]¯¿^;¿^†¿^”¿_&¿_u¿_ô¿_’¿`¿`*¿`Y¿`Ø¿a¿a&¿aP¿a•¿a˜¿b.¿bG¿bx¿b©¿b¿¿b’¿bÁ¿b˜¿c=¿cI¿c`¿cn¿cØ¿c∑¿d¿d ¿dY¿d¢¿d™¿dﬁ¿e¿e¿e¿e¿e1¿e]¿eº¿e…¿e˜¿e˝¿f¿f¿f¿f<¿fb¿fé¿f¡¿g¿g?¿gG¿gä¿g∂¿gÓ¿gˆ¿h¿h¿h]¿ho¿hì¿h∑¿hÿ¿hˇ¿iC¿ij¿i{¿i§¿iÕ¿i‹¿iÈ¿iÛ¿j¿j¿j*¿j0¿j1¿ja¿jã¿jë¿jï¿jñ¿jø¿jœ¿j˛¿k5¿k]¿kx¿k©¿kÃ¿k÷¿kﬁ¿kÒ¿k˚¿kˇ¿l ¿l¿l"¿lf¿lú¿l¢¿l”¿lÎ¿lÔ¿l¿l¸¿m¿m&¿mG¿mã¿mµ¿mÎ¿mÒ¿mı¿mˆ¿n¿n¿n0¿n@¿n[¿nn¿nx¿n°¿n¬¿n€¿o ¿o2¿oV¿oÉ¿o’¿p	¿p!¿p6¿po¿pâ¿pç¿pé¿p—¿q
¿q¿qB¿q]¿qç¿q¥¿qª¿qø¿q¿¿q‚¿r¿r¿r)¿rA¿rQ¿rt¿rõ¿rº¿rœ¿rŸ¿r⁄¿s¿sh¿s≤¿s˘¿t ¿t/¿tO¿t¢¿t—¿u¿uD¿uë¿u‚¿u„¿v5¿vä¿vΩ¿w¿wT¿w°¿w¬¿x¿x.¿xr¿xÇ¿xΩ¿y¿y,¿yh¿yÆ¿y˝¿z¿ze¿zÄ¿zŒ¿z˙¿{4¿{5¿{]¿{y¿{ó¿{∆¿{Û¿{Ù¿|.¿|û¿|ü¿|∆¿|Ú¿}"¿}a¿}¢¿}Î¿~
¿~+¿~É¿~®¿~…¿~‘¿~˙¿¿+¿3¿]¿l¿t¿∂¿‰¿Û¿˚¿Ä'¿ÄV¿Äv¿Äë¿ÄÆ¿Ä¥¿Äµ¿Ä˚¿ÅM¿Å]¿Å≤¿ÅÓ¿Ç/¿ÇP¿ÇÄ¿Çú¿ÇÆ¿Ç∂¿Çı¿É#¿É2¿É:¿É;¿Éí¿É∏¿ÉÈ¿Ñ¿Ñ-¿Ñp¿Ñ{¿Ñ•¿Ñ≠¿ÑÆ¿Ñ»¿Ñ‡¿ÑÊ¿Ö!¿ÖW¿ÖX¿Ö™¿Ö›¿Ü1¿Ü~¿Üñ¿Ü”¿á	¿áN¿áq¿á¿á∫¿á√¿à¿à!¿àB¿àT¿à\¿à]¿à®¿à∆¿àÿ¿à‡¿à·¿â¿â,¿â>¿âF¿â~¿â≠¿â≥¿â¥¿â€¿ä¿äJ¿äe¿äp¿äê¿ä»¿ã
¿ã¿ãd¿ãØ¿ãœ¿å¿å*¿åE¿åv¿åÅ¿åß¿å∑¿åÊ¿ç8¿çâ¿çî¿ç∂¿ç≈¿é¿éc¿éö¿é—¿é¯¿è ¿è¿è¿èY¿èÊ¿ê¿êc¿êÄ¿êÅ¿ê∞¿ê„¿ë.¿ëF¿ëm¿ëê¿ëù¿ë—¿í?¿í|¿íÜ¿íò¿í†¿í°¿ì¿ì[¿ìß¿ìÀ¿ì˙¿î@¿î}¿î’¿ï¿ïO¿ïå¿ïñ¿ïû¿ïÿ¿ïﬁ¿ïﬂ¿ñ¿ñ7¿ñf¿ñë¿ñ∫¿ó¿ó)¿ó9¿óh¿óò¿ó ¿ò¿ò+¿òX¿ò`¿òj¿òk¿òè¿ò‰¿ô#¿ôd¿ôÖ¿ô∏¿ö¿ö¿ö@¿öc¿ön¿öî¿ö¶¿öÆ¿ö⁄¿õ¿õK¿õz¿õö¿õ∑¿õ“¿õÿ¿õŸ¿ú'¿úÉ¿ú≥¿ú‘¿ù¿ù4¿ùt¿ù≤¿ùœ¿ù’¿ùÎ¿û$¿û[¿ûî¿ûö¿û ¿ûÊ¿ü!¿ü^¿üf¿ül¿ü©¿ü·¿ü˝¿†6¿†:¿†;¿†\¿†]¿†õ¿†Ã¿†È¿°8¿°á¿°ÿ¿¢¿¢D¿¢[¿¢Ö¿¢…¿£F¿£¨¿§¿§H¿§a¿§Ü¿§®¿§Ã¿§Á¿•¿•d¿•q¿•±¿•≈¿•Í¿¶¿¶4¿¶S¿¶{¿¶ä¿¶ ¿¶‡¿¶Ï¿ß¿ß9¿ß_¿ßÉ¿ßü¿ßº¿ß„¿®C¿®i¿®v¿®¥¿®˘¿©:¿©v¿©å¿©ò¿©¿™,¿™]¿™i¿™é¿™±¿™Ì¿´¿´*¿´O¿´°¿´ﬁ¿´ˇ¿¨!¿¨A¿¨b¿¨»¿≠¿≠¿≠*¿≠O¿≠v¿≠©¿≠∑¿≠ﬁ¿≠Í¿Æ¿Æá¿Æî¿Æ”¿Ø ¿ØA¿ØW¿Øc¿Ø§¿Ø≈¿ØÎ¿∞'¿∞8¿∞_¿∞Å¿∞¡¿∞’¿∞˙¿±¿±F¿±y¿±á¿±ß¿±≥¿±“¿±Ô¿≤O¿≤\¿≤û¿≤≤¿≤Ÿ¿≥
¿≥E¿≥X¿≥d¿≥Ö¿≥÷¿≥‚¿¥¿¥.¿¥T¿¥¶¿¥‹¿¥Ù¿µ¿µC¿µi¿µÇ¿µä¿µú¿µ∞¿µ»¿∂¿∂¿∂?¿∂b¿∂c¿∂Ø¿∂≈¿∂‰¿∂Â¿∑D¿∑É¿∑…¿∏¿∏¿∏!¿∏D¿∏h¿∏ï¿∏’¿π¿πh¿πï¿πù¿π£¿π§¿πÚ¿πˇ¿∫3¿∫d¿∫j¿∫Ü¿∫π¿∫ø¿∫Ÿ¿ª¿ª¿ª*¿ª.¿ª/¿ªV¿ª}¿ª§¿ªÀ¿ªŸ¿ªﬂ¿º¿ºf¿ºù¿º£¿º§¿º’¿Ω,¿Ωc¿Ωi¿Ωm¿Ωn¿Ωë¿Ω∂¿Ωœ¿æ ¿æ,¿æ@¿æR¿æZ¿æ ¿æÀ¿ø¿øA¿øs¿ø}¿ø±¿øπ¿¿.¿¿o¿¿ß¿¿„¿¿Î¿¿˝¿¡¿¡¿¡¿¡T¿¡É¿¡≥¿¡∑¿¡∏¿¡˚¿¬3¿¬E¿¬K¿¬]¿¬a¿¬b¿¬≠¿¬Ú¿√¿√
¿√G¿√K¿√L¿√Ø¿√ ¿ƒ¿ƒ¿ƒ¿ƒ*¿ƒV¿ƒr¿ƒ–¿≈-¿≈{¿≈¢¿≈√¿≈ÿ¿≈„¿≈Î¿≈˛¿∆¿∆:¿∆L¿∆h¿∆o¿∆∑¿∆ﬁ¿∆¿«¿«W¿«√¿«·¿»@¿»o¿»~¿»ı¿…¿…¿…"¿….¿…l¿…~¿…õ¿…’¿ @¿ ï¿À¿À¿À$¿À9¿ÀE¿ÀK¿Às¿ÀÖ¿Àâ¿Àä¿À∑¿ÀΩ¿À¿Àˆ¿Ã5¿Ã;¿Ãn¿Ãt¿Ãä¿Ãê¿Ã≥¿Ãπ¿Ã«¿Ã‰¿Õ¿Õ¿Õ ¿Õ2¿Õ8¿ÕH¿ÕN¿Õò¿Õª¿Õœ¿Õ˙¿Œ¿Œ)¿Œ0¿Œw¿Œ{¿Œ|¿Œ©¿ŒØ¿ŒÏ¿ŒÚ¿œ%¿œ+¿œr¿œx¿œ¡¿œ«¿œ›¿œ„¿–¿–¿–¿–6¿–j¿–r¿–|¿–é¿–¢¿–”¿–Î¿—¿—	¿—é¿—À¿—‚¿—˛¿“9¿“w¿“é¿“Ø¿“≥¿“¥¿” ¿”O¿”l¿”r¿”∞¿”∂¿”ı¿”˚¿‘.¿‘4¿‘J¿‘P¿‘s¿‘y¿‘á¿‘°¿‘Ÿ¿‘·¿‘Î¿‘˝¿’¿’¿’¿’j¿’õ¿’Ø¿’˘¿÷¿÷!¿÷8¿÷?¿÷•¿÷©¿÷™¿÷ˆ¿◊E¿◊b¿◊h¿◊∞¿◊∂¿◊Ù¿◊˙¿ÿA¿ÿG¿ÿê¿ÿñ¿ÿ¨¿ÿ≤¿ÿ’¿ÿ€¿ÿÈ¿Ÿ¿ŸD¿ŸL¿ŸV¿Ÿh¿Ÿ|¿ŸÃ¿Ÿ‰¿ŸÙ¿⁄¿⁄¿⁄ó¿⁄‘¿⁄Î¿€¿€B¿€á¿€±¿€“¿€÷¿€◊¿‹#¿‹0¿‹6¿‹o¿‹u¿‹¥¿‹∫¿‹Ì¿‹Û¿›	¿›¿›2¿›8¿›F¿›\¿›å¿›î¿›û¿›∞¿›∂¿›∆¿›Ã¿ﬁ¿ﬁC¿ﬁW¿ﬁú¿ﬁ¥¿ﬁƒ¿ﬁ€¿ﬁ‚¿ﬁ˜¿ﬂ1¿ﬂ5¿ﬂ6¿ﬂÇ¿ﬂè¿ﬂï¿ﬂÿ¿ﬂﬁ¿‡¿‡¿‡d¿‡j¿‡≥¿‡π¿‡œ¿‡’¿‡¯¿‡˛¿·¿· ¿·Z¿·b¿·l¿·~¿·í¿·›¿·ı¿‚¿‚¿‚#¿‚8¿‚y¿‚}¿‚~¿‚œ¿„¿„¿„T¿„Z¿„ô¿„ü¿„“¿„ÿ¿„Ó¿„Ù¿‰¿‰¿‰+¿‰N¿‰†¿‰®¿‰≤¿‰ƒ¿‰ ¿‰⁄¿‰‡¿Â0¿Â_¿Âs¿Â¨¿Â≈¿ÂÂ¿Â¸¿Ê¿Êf¿Êj¿Êk¿Êº¿Ê˙¿Á ¿ÁK¿ÁQ¿Áí¿Áò¿Áﬂ¿ÁÂ¿Ë.¿Ë4¿ËJ¿ËP¿Ës¿Ëy¿Ëá¿Ë§¿È ¿È¿È¿È$¿È8¿Èw¿Èê¿È∞¿È«¿ÈŒ¿ÍS¿Íê¿Í™¿Í∆¿Î¿Î?¿Îo¿Îê¿Îî¿Îï¿Îƒ¿Î ¿Î¯¿Î˛¿Ï=¿ÏC¿ÏY¿Ï_¿ÏÇ¿Ïà¿Ïñ¿ÏØ¿ÏÕ¿Ï¿Ì/¿Ì<¿ÌG¿ÌO¿ÌY¿Ìk¿Ìq¿ÌÅ¿Ìá¿Ì”¿ÌÔ¿Ó¿Ó:¿Óî¿Ó≠¿Ó±¿Ó≤¿ÓÂ¿Ó˛¿Ô¿ÔÉ¿Ô‘¿ÔÁ¿ÔÒ¿¿¿	¿4¿:¿r¿x¿¶¿¨¿‰¿Í¿Ò3¿Ò9¿ÒO¿Òr¿Òx¿Ò⁄¿ÒÏ¿Ú ¿Új¿Ú‘¿ÛY¿Ûö¿Ûº¿Ûÿ¿Ù¿ÙQ¿Ùh¿Ùâ¿Ùç¿Ùé¿Ùµ¿Ù–¿Ù‡¿Ù˚¿ı¿ı¿ıD¿ı|¿ıï¿ı±¿ı¡¿ı›¿ı¿ı˙¿ˆ¿ˆ!¿ˆ"¿ˆS¿ˆl¿ˆº¿˜¿˜K¿˜L¿˜w¿˜í¿˜ø¿˜¿¿˜‚¿¯¿¯U¿¯â¿¯ö¿¯º¿¯∆¿¯˙¿¯˚¿˘2¿˘|¿˘ù¿˘®¿˘“¿˙¿˙(¿˙`¿˙m¿˙w¿˙≠¿˙µ¿˙∂¿˙˘¿˚¿˚#¿˚)¿˚F¿˚J¿˚K¿˚õ¿˚„¿˚˜¿˚˝¿¸6¿¸<¿¸{¿¸Å¿¸ó¿¸ù¿¸¿¿¸∆¿¸‘¿¸Ô¿˝¿˝A¿˝Ñ¿˝ë¿˝ú¿˝§¿˝Æ¿˝¿¿˝∆¿˝÷¿˝‹¿˛,¿˛[¿˛o¿˛ÿ¿ˇ¿ˇx¿ˇî¿ˇò¿ˇô¿ˇÂ¿ -¿ A¿ G¿ ä¿ ê¿ …¿ œ¿¿¿V¿\¿r¿ï¿õ¿	¿¿/¿∆¿0¿µ¿ˆ¿¿4¿o¿¥¿ﬁ¿ˇ¿¿¿V¿q¿Å¿ú¿Ø¿π¿Â¿¿n¿≠¿¿!¿=¿M¿i¿|¿Ü¿©¿≠¿Æ¿˛¿/¿5¿q¿w¿∂¿º¿“¿ÿ¿˚¿	¿	¿	0¿	\¿	∂¿	⁄¿	Â¿	Ì¿	˜¿
	¿
¿
¿
%¿
+¿
u¿
°¿
µ¿¿@¿m¿„¿ˇ¿¿¿P¿Å¿á¿Õ¿”¿¿¿M¿S¿ú¿¢¿∏¿€¿·¿T¿f¿z¿¿|¿¿B¿g¿É¿æ¿¸¿,¿M¿Q¿R¿°¿º¿Ã¿Á¿˙¿¿0¿`¿ò¿Ω¿÷¿¿;¿]¿e¿w¿}¿ô¿ö¿™¿∆¿Ÿ¿„¿¿
¿¿E¿K¿|¿Ç¿í¿ò¿Á¿2¿{¿ß¿ª¿!¿<¿e¿“¿÷¿◊¿¿¿R¿X¿â¿è¿«¿Õ¿¿*¿«¿¿]¿‚¿#¿H¿d¿ü¿‡¿¿%¿)¿*¿m¿à¿´¿π¿ø¿œ¿Í¿˝¿¿B¿n¿¡¿¿Ç¿≤¿Ÿ¿¿#¿3¿O¿b¿l¿Ç¿ß¿≠¿±¿≤¿¸¿5¿;¿v¿|¿å¿í¿ﬂ¿Ú¿ B¿ q¿ Ö¿ ¯¿!!¿!M¿!¬¿!∆¿!«¿"¿"J¿"P¿"ï¿"õ¿"÷¿"‹¿#¿#¿#c¿#w¿$!¿$M¿$∫¿%?¿%Ä¿%•¿%¡¿%¸¿&=¿&i¿&ä¿&é¿&è¿&⁄¿&ı¿'-¿'â¿'Â¿(\¿(}¿(ñ¿(Ω¿(Ã¿(‘¿(Ê¿(Ï¿)<¿)c¿)ë¿)≠¿)Ê¿)Í¿)Î¿*¿*¿*L¿*R¿*b¿*h¿*≥¿*À¿*›¿+A¿+a¿+ï¿+©¿+Ø¿+È¿,)¿,<¿,B¿,b¿,î¿,®¿,Æ¿,Ì¿,Ò¿,Ú¿-=¿-ã¿-ø¿-≈¿-˜¿-˝¿.¿.¿.\¿.§¿.Û¿/$¿/8¿/z¿/Ÿ¿/ˆ¿0
¿0¿0@¿0A¿0é¿0√¿1¿1!¿1'¿1;¿1}¿1ê¿1ñ¿1ó¿1˘¿2¿2q¿2Ñ¿2ä¿2ã¿2π¿2‡¿2ˆ¿3¿3/¿3D¿3m¿3¨¿3¡¿3«¿3À¿3Ã¿3¸¿4¿4/¿45¿4K¿4Q¿4à¿4é¿4ú¿4∏¿4—¿4Ÿ¿4„¿4ı¿5¿5¿5C¿5I¿5W¿5t¿5®¿5∞¿5∫¿5Ã¿5‡¿6¿6*¿6:¿6U¿6h¿6r¿6ƒ¿6˚¿7i¿7∏¿7Ô¿8!¿8)¿8a¿8n¿8ä¿8ƒ¿8 ¿8ˇ¿94¿9:¿9õ¿9´¿9«¿9⁄¿9‰¿:¿:¿:¿:K¿:Q¿:É¿:â¿:ü¿:•¿:»¿:Œ¿:‹¿:ı¿;0¿;8¿;B¿;T¿;Ä¿;Ÿ¿;˘¿<!¿<1¿<9¿<F¿<î¿<ö¿<û¿<ü¿<Ï¿<Ú¿='¿=R¿=m¿=}¿=ò¿=´¿=µ¿=€¿>¿>`¿>t¿>ß¿>∑¿>”¿>Ê¿>¿?¿?¿?i¿?r¿?x¿?|¿?}¿?Œ¿@¿@¿@R¿@à¿@£¿@≥¿@Œ¿@·¿@Î¿A¿As¿Aœ¿BF¿Bg¿BÄ¿Bß¿B∂¿Bæ¿B–¿B÷¿C&¿CD¿Cw¿Cá¿C£¿C∂¿C¿¿Cƒ¿C≈¿D¿D¿Dl¿Dº¿E	¿ES¿E}¿EÉ¿E–¿F!¿F9¿Ff¿F≤¿G ¿G¿G2¿Gâ¿G÷¿H&¿HV¿H°¿HÃ¿I¿I™¿I∑¿IÙ¿I˙¿J¿JX¿Jw¿Jî¿J…¿Jœ¿J–¿K¿K¿K¿K,¿KV¿Kƒ¿K»¿K…¿L¿L4¿L_¿Lâ¿L–¿L‘¿L’¿M¿MA¿MG¿MW¿M]¿Mß¿Mﬁ¿N'¿N(¿Nv¿NŒ¿Nœ¿O
¿O¿OT¿OZ¿Oñ¿Oµ¿O◊¿Oˇ¿P-¿PJ¿Pv¿P¿Pæ¿P„¿Q!¿QJ¿Qd¿Qí¿Q§¿Q¨¿QÚ¿R.¿R6¿R<¿R@¿RA¿Ra¿Rg¿Rµ¿R˘¿S¿S@¿Sb¿Sä¿S–¿S˜¿Sˇ¿T¿T	¿T
¿T6¿T7¿Tk¿Tì¿Tó¿Tò¿TŒ¿T˘¿T˝¿T˛¿U¿Uã¿U÷¿V¿Vf¿Vï¿W¿W(¿WL¿Wõ¿W¬¿WÃ¿W“¿X¿X#¿X$¿Xq¿Xπ¿XÎ¿Y¿Y¿Y&¿Y,¿Y=¿YA¿YB¿Yé¿Y’¿YÓ¿Z ¿Z;¿ZU¿Z]¿Zc¿Zv¿Zz¿Z{¿Zá¿ZÆ¿Z…¿ZÍ¿ZÎ¿[9¿[á¿[ö¿[ø¿[˙¿\:¿\â¿\—¿]	¿]#¿]/¿]¿]∫¿^¿^,¿^9¿^g¿^~¿^â¿^¢¿^œ¿_ ¿_5¿_U¿_´¿_”¿`¿`+¿`Q¿`r¿`ó¿`¿¿`Ú¿a¿a6¿a\¿aì¿b¿b)¿b<¿bM¿b\¿bi¿bt¿b}¿bÑ¿bà¿bä¿bã¿b®¿b±¿bæ¿b¿¿b¡¿bÍ¿c¿c:¿cT¿ct¿cô¿cæ¿cÏ¿d'¿dG¿dl¿dï¿dñ¿d‹¿e¿e3¿eã¿eü¿e«¿f¿fH¿f°¿fß¿f´¿f¨¿f–¿fÓ¿g¿g¿g-¿g.¿gO¿gÑ¿g£¿gß¿g®¿gπ¿g‰¿h¿h	¿h
¿h¿hO¿hP¿hΩ¿hˆ¿i¿i¿i3¿iU¿iy¿iÄ¿iÑ¿iÜ¿iá¿iÃ¿iÌ¿j¿j"¿jH¿js¿jt¿jº¿j›¿k¿k.¿k[¿ká¿kà¿kî¿kø¿k¸¿l¿l"¿l?¿lS¿l[¿l_¿l`¿ll¿lå¿l°¿lº¿lΩ¿l…¿m¿m`¿mr¿mv¿mx¿my¿m¬¿mÁ¿n¿n$¿nJ¿ny¿nz¿n∆¿nÁ¿o¿o£¿o–¿p ¿p¿p¿p~¿p¢¿p£¿pØ¿p⁄¿pÙ¿qN¿qj¿qß¿q¡¿qﬁ¿q˚¿r¿r¿r¿r¿r(¿rH¿r~¿rô¿rö¿r¶¿rﬂ¿s-¿s@¿sD¿sF¿sG¿sò¿s‹¿t¿t¿t!¿t"¿tD¿t^¿tü¿tœ¿u¿u%¿u\¿uπ¿u›¿uﬁ¿v'¿vr¿vs¿v¢¿vŒ¿v¯¿w
¿w¿w¿w@¿w]¿w“¿x&¿xC¿x}¿x¥¿x÷¿y¿y5¿yö¿y´¿y·¿z¿z!¿z3¿z;¿z<¿z\¿zƒ¿z˘¿{¿{F¿{ê¿{∆¿|!¿|Q¿|°¿|˚¿}0¿}8¿}>¿}Ø¿}ˇ¿~ ¿~H¿~I¿~∞¿~±¿~œ¿~ı¿¿¿¿¿0¿I¿`¿ç¿≠¿≥¿ﬂ¿Ä¿Ä8¿Är¿Ä´¿Ä◊¿Å¿Å¿Å¿Å¿Åb¿Åò¿Å¨¿Å≤¿Å⁄¿Ç¿Ç¿Ç!¿Ç'¿Ç8¿Ç<¿Ç=¿ÇN¿Çh¿Çë¿Çü¿Ç•¿Ç«¿Çﬁ¿Ç‚¿Ç„¿Çı¿Çˆ¿É+¿É,¿ÉÖ¿Éü¿ÉÀ¿Ñ¿ÑZ¿Ño¿Ñu¿ÑÀ¿ÑÌ¿Ö¿Ö¿Ö8¿Öñ¿Öú¿ÖØ¿Ö≥¿Ö¥¿Ö◊¿Öÿ¿Ö‰¿Ü¿Ü*¿Ü.¿Ü/¿Ü;¿Üx¿Ü¡¿á/¿áE¿áv¿á~¿áÇ¿áÉ¿áè¿á…¿áÏ¿á¿áÒ¿á˝¿à¿à:¿à>¿à?¿àK¿àj¿àl¿àm¿à≤¿à∂¿â¿â/¿âÄ¿âÅ¿â…¿ä¿ä#¿ä'¿äw¿äæ¿ä¬¿äÒ¿ãS¿ãT¿ãê¿ãî¿ã‚¿ã˛¿å¿å2¿åp¿åq¿åø¿åˆ¿å˙¿çI¿çò¿ç‹¿ç‡¿é0¿é{¿é«¿è¿èe¿è|¿èÄ¿èÕ¿èÚ¿èˆ¿êG¿êï¿ê‹¿ë ¿ë¿ëO¿ëû¿ë“¿ë÷¿ëÍ¿í:¿ív¿íz¿í“¿í‚¿ì'¿ìP¿ìj¿ìû¿ìª¿ì–¿ì÷¿ì◊¿î%¿îu¿î¥¿îÂ¿îÊ¿ï)¿ï/¿ï¿ïÃ¿ñ¿ñ8¿ñ>¿ñã¿ñŸ¿ñ˜¿ó$¿ó%¿óm¿ó~¿óÑ¿ó√¿óÛ¿óÙ¿òA¿òR¿òX¿ò°¿ò‹¿ô*¿ôP¿ôh¿ôÇ¿ôø¿ô‚¿ô˘¿ô˝¿ô˛¿öA¿öG¿öó¿öæ¿öø¿öˆ¿ö¸¿õ0¿õQ¿õe¿õf¿õr¿õö¿õõ¿õß¿õÕ¿õÊ¿ú	¿ú¿ú¿ú¿ú ¿ú;¿úV¿úk¿úó¿úõ¿úú¿ú®¿ú–¿úÍ¿ù¿ù
¿ù¿ù%¿ù&¿ù2¿ùE¿ùZ¿ùö¿ù∞¿ù¥¿ùµ¿ù¡¿û ¿û¿û#¿ûh¿û~¿ûÇ¿ûÉ¿û¨¿û⁄¿ûˆ¿ü2¿ü\¿üs¿üÉ¿üã¿üÕ¿ü‚¿ü˚¿† ¿†(¿†,¿†-¿†ç¿†è¿†ê¿†–¿†‘¿°%¿°7¿°;¿°|¿°≈¿°˘¿¢C¿¢d¿¢Ñ¿¢ä¿¢ã¿¢‘¿¢ı¿£¿£¿£¿£3¿£t¿£x¿£z   Å/// @docImport 'package:flutter/cupertino.dart';
/// @docImport 'package:flutter/material.dart';
///
/// @docImport 'app.dart';
/// @docImport 'form.dart';
/// @docImport 'pages.dart';
/// @docImport 'pop_scope.dart';
/// @docImport 'router.dart';
/// @docImport 'will_pop_scope.dart';ÅÕ  Å‚  Å¸  ÇÇ/ Ç9ÇN ÇR  Ç|  Ç•  ÇŒ  Ç˜  É  É#  É@  É[  Éz  Éì  É©  ÉŒ  ÉÂ  Ñ   Ñ&  Ñ<    ì¿ Pˇó…Ñ†/// An abstraction for an entry managed by a [Navigator].
///
/// This class defines an abstract interface between the navigator and the
/// "routes" that are pushed on and popped off the navigator. Most routes have
/// visual affordances, which they place in the navigators [Overlay] using one
/// or more [OverlayEntry] objects.
///
/// See [Navigator] for more explanation of how to use a [Route] with
/// navigation, including code examples.
///
/// See [MaterialPageRoute] for a route that replaces the entire screen with a
/// platform-adaptive transition.
///
/// A route can belong to a page if the [settings] are a subclass of [Page]. A
/// page-based route, as opposed to a pageless route, is created from
/// [Page.createRoute] during [Navigator.pages] updates. The page associated
/// with this route may change during the lifetime of the route. If the
/// [Navigator] updates the page of this route, it calls [changedInternalState]
/// to notify the route that the page has been updated.
///
/// The type argument `T` is the route's return type, as used by
/// [currentResult], [popped], and [didPop]. The type `void` may be used if the
/// route does not return a value.óœóœóÇo ò·òÊÄ‚/// Initialize the [Route].
///
/// If the [settings] are not provided, an empty [RouteSettings] object is
/// used instead.
///
/// If [requestFocus] is not provided, the value of [Navigator.requestFocus] is
/// used instead.òÌò˝  ô
ô  ô/ô%ô:ô1ô=ôCôPôQôiô[ôkõkõw  õÍõ˙  ûäûò  °∑O°‘ °Í°˜°ˇ°¯°˛¢ ¢¢¿ C€3¿ CÔ ¿ Cˇ¿ D¿ D¿ D	¿ D
¿ D¿ D¿ D7¿ D' ¿ D;¿ DD¿ DG¿ DE¿ DF¿ DH¿ DIöcÅõÄ¨/// When the route state is updated, request focus if the current route is at the top.
///
/// If not provided in the constructor, [Navigator.requestFocus] is used instead.   õâ^õœ//// The navigator that the route is in, if any.   ú	Ç~ûqÇ;/// The settings for this route.
///
/// See [RouteSettings] for details.
///
/// The settings can change during the route's lifetime. If the settings
/// change, the route's overlays will be marked dirty (see
/// [changedInternalState]).
///
/// If the route is created from a [Page] in the [Navigator.pages] list, then
/// this will be a [Page] subclass, and it will be updated each time its
/// corresponding [Page] in the [Navigator.pages] has changed. Once the
/// [Route] is removed from the history, this value stops updating (and
/// remains with its last value).   û¶3ûØ    û›Ç◊°äÇw/// The restoration scope ID to be used for the [RestorationScope] surrounding
/// this route.
///
/// The restoration scope ID is null if restoration is currently disabled
/// for this route.
///
/// If the restoration scope ID changes (e.g. because restoration is enabled
/// or disabled) during the life of the route, the [ValueListenable] notifies
/// its listeners. As an example, the ID changes to null while the route is
/// transitioning off screen, which triggers a notification on this field. At
/// that point, the route is considered as no longer present for restoration
/// purposes and its state will not be restored.   £^Å’•
ÅÄ/// The overlay entries of this route.
///
/// These are typically populated by [install]. The [Navigator] is in charge
/// of adding them to and removing them from the [Overlay].
///
/// There must be at least one entry in this list after [install] has been
/// invoked.
///
/// The [Navigator] will take care of keeping the entries together if the
/// route is moved in the history.   ∑^ÖÓºDÑõ/// Returns whether calling [Navigator.maybePop] when this [Route] is current
/// ([isCurrent]) should do anything.
///
/// [Navigator.maybePop] is usually used instead of [Navigator.pop] to handle
/// the system back button, when it hasn't been disabled via
/// [SystemNavigator.setFrameworkHandlesBack].
///
/// By default, if a [Route] is the first route in the history (i.e., if
/// [isFirst]), it reports that pops should be bubbled
/// ([RoutePopDisposition.bubble]). This behavior prevents the user from
/// popping the first route off the history and being stranded at a blank
/// screen; instead, the larger scope is popped (e.g. the application quits,
/// so that the user returns to the previous application).
///
/// In other cases, the default behavior is to accept the pop
/// ([RoutePopDisposition.pop]).
///
/// The third possible value is [RoutePopDisposition.doNotPop], which causes
/// the pop request to be ignored entirely.
///
/// See also:
///
///  * [Form], which provides a [Form.canPop] boolean that is similar.
///  * [PopScope], a widget that provides a way to intercept the back button.
///  * [Page.canPop], a way for [Page] to affect this property.   ¿ A]¿ AX0/// Whether calling [didPop] would return false.   ¿ A}Å%¿ BåÄ˝/// When this route is popped (see [Navigator.pop]) if the result isn't
/// specified or if it's null, this value will be used instead.
///
/// This fallback is implemented by [didComplete]. This value is used if the
/// argument to that method is null.   ¿ B¶Å2¿ CπÄ˘/// A future that completes when this route is popped off the navigator.
///
/// The future completes with the value given to [Navigator.pop], if any, or
/// else the value of [currentResult]. See [didComplete] for more discussion
/// on this topic.   ¿ \2Å™¿ \∑u/// Whether this route is the top-most route on the navigator.
///
/// If this is true, then [isActive] is also true.   ¿ ]‡Ç¿ ^¬Ä–/// Whether this route is the bottom-most active route on the navigator.
///
/// If [isFirst] and [isCurrent] are both true then this is the only route on
/// the navigator (and [isActive] will also be true).   ¿ _ÍÅí¿ `HE/// Whether there is at least one active route underneath this route.  ¿ `2¿ `3¿ aÄÇñ¿ cúÇ /// Whether this route is on the navigator.
///
/// If the route is not only active, but also the current route (the top-most
/// route), then [isCurrent] will also be true. If it is the first route (the
/// bottom-most route), then [isFirst] will also be true.
///
/// If a higher route is entirely opaque, then the route will be active but not
/// rendered. It is even possible for the route to be active but for the stateful
/// widgets within the route to not be instantiated. See [ModalRoute.maintainState].   ¢Äú¢  ¢ ¢/   ¢ıe¢˙  ££   •7Åz¶§Å=/// Called when the route is inserted into the navigator.
///
/// Uses this to populate [overlayEntries]. There must be at least one entry in
/// this list after [install] has been invoked. The [Navigator] will be in charge
/// to add them to the [Overlay] or remove them from it by calling
/// [OverlayEntry.remove].  ¶Å¶Ç¶é¶è¶µÇã®êÅù/// Called after [install] when the route is pushed onto the navigator.
///
/// The returned value resolves when the push transition is complete.
///
/// The [didAdd] method will be called instead of [didPush] when the route
/// immediately appears on screen without any push transition.
///
/// The [didChangeNext] and [didChangePrevious] methods are typically called
/// immediately after this method is called.  ®e®f®r®s©Dá°™πÅC/// Called after [install] when the route is added to the navigator.
///
/// This method is called instead of [didPush] when the route immediately
/// appears on screen without any push transition.
///
/// The [didChangeNext] and [didChangePrevious] methods are typically called
/// immediately after this method is called.  ™ñ™ó™£™§∞ÈÅ±ﬂÄ /// Called after [install] when the route replaced another in the navigator.
///
/// The [didChangeNext] and [didChangePrevious] methods are typically called
/// immediately after this method is called. ±Í±˚  ±º±Ω±…± ≤ÖO∂˙Ñ0/// Returns whether calling [Navigator.maybePop] when this [Route] is current
/// ([isCurrent]) should do anything.
///
/// [Navigator.maybePop] is usually used instead of [Navigator.pop] to handle
/// the system back button.
///
/// By default, if a [Route] is the first route in the history (i.e., if
/// [isFirst]), it reports that pops should be bubbled
/// ([RoutePopDisposition.bubble]). This behavior prevents the user from
/// popping the first route off the history and being stranded at a blank
/// screen; instead, the larger scope is popped (e.g. the application quits,
/// so that the user returns to the previous application).
///
/// In other cases, the default behavior is to accept the pop
/// ([RoutePopDisposition.pop]).
///
/// The third possible value is [RoutePopDisposition.doNotPop], which causes
/// the pop request to be ignored entirely.
///
/// See also:
///
///  * [Form], which provides a [Form.onWillPop] callback that uses this
///    mechanism.
///  * [WillPopScope], another widget that provides a way to intercept the
///    back button.  ∂n∂o∂y∂⁄∂∂¢ΩPÅ•æŸÄ˚/// Called after a route pop was handled.
///
/// Even when the pop is canceled, for example by a [PopScope] widget, this
/// will still be called. The `didPop` parameter indicates whether or not the
/// back navigation actually happened successfully. æÊæÏ  æVæWæaæ–ægæóæ˘Ç¿ @mÅO/// {@template flutter.widgets.navigator.onPopInvokedWithResult}
/// Called after a route pop was handled.
///
/// Even when the pop is canceled, for example by a [PopScope] widget, this
/// will still be called. The `didPop` parameter indicates whether or not the
/// back navigation actually happened successfully.
/// {@endtemplate} ¿ @Ñ¿ @ä  ¿ @ë	¿ @ï  ¿ @W¿ @X¿ DOÑî¿ H¢Ñ/// A request was made to pop this route. If the route can handle it
/// internally (e.g. because it has its own stack of internal state) then
/// return false, otherwise return true (by returning the value of calling
/// `super.didPop`). Returning false will prevent the default behavior of
/// [NavigatorState.pop].
///
/// When this function returns true, the navigator removes this route from
/// the history but does not yet call [dispose]. Instead, it is the route's
/// responsibility to call [NavigatorState.finalizeRoute], which will in turn
/// call [dispose] on the route. This sequence lets the route perform an
/// exit animation (or some other visual effect) after being popped but prior
/// to being disposed.
///
/// This method should call [didComplete] to resolve the [popped] future (and
/// this is all that the default implementation does); routes should not wait
/// for their exit animation to complete before doing so.
///
/// See [popped], [didComplete], and [currentResult] for a discussion of the
/// `result` argument. ¿ H©	¿ H≠  ¿ Hå¿ Hç¿ HÁÉ»¿ L^É5/// The route was popped or is otherwise being removed somewhat gracefully.
///
/// This is called by [didPop] and in response to
/// [NavigatorState.pushReplacement]. If [didPop] was not called, then the
/// [NavigatorState.finalizeRoute] method must be called immediately, and no exit
/// animation will run.
///
/// The [popped] future is completed by this method. The `result` argument
/// specifies the value that this future is completed with, unless it is null,
/// in which case [currentResult] is used instead.
///
/// This should be called before the pop animation, if any, takes place,
/// though in some cases the animation may be driven by the user before the
/// route is committed to being popped; this can in particular happen with the
/// iOS-style back gesture. See [NavigatorState.didStartUserGesture]. ¿ Lj	¿ Ln  ¿ L;¿ L<¿ LH¿ LI¿ L≥Å¿ MùÄº/// The given route, which was above this one, has been popped off the
/// navigator.
///
/// This route is now the current route ([isCurrent] is now true), and there
/// is no next route. ¿ M®¿ M∏  ¿ Mz¿ M{¿ Má¿ Mà¿ M…Ç¿ O≤Å≥/// This route's next route has changed to the given new route.
///
/// This is called on a route whenever the next route changes for any reason,
/// so long as it is in the history, including when a route is first added to
/// a [Navigator] (e.g. by [Navigator.push]), except for cases when
/// [didPopNext] would be called.
///
/// The `nextRoute` argument will be null if there's no new next route (i.e.
/// if [isCurrent] is true). ¿ O¿¿ O—  ¿ Oè¿ Oê¿ Oú¿ Où¿ O‚Ç ¿ QŒÅ∂/// This route's previous route has changed to the given new route.
///
/// This is called on a route whenever the previous route changes for any
/// reason, so long as it is in the history, except for immediately after the
/// route itself has been pushed (in which case [didPush] or [didReplace] will
/// be called instead).
///
/// The `previousRoute` argument will be null if there's no previous route
/// (i.e. if [isFirst] is true). ¿ Q‡¿ QÒ  ¿ Q´¿ Q¨¿ Q∏¿ Qπ¿ RÇO¿ T;Å˚/// Called whenever the internal state of the route has changed.
///
/// This should be called whenever [willHandlePopInternally], [didPop],
/// [ModalRoute.offstage], or other internal state of the route changes value.
/// It is used by [ModalRoute], for example, to report the new information via
/// its inherited widget to any children of the route.
///
/// See also:
///
///  * [changedExternalState], which is called when the [Navigator] has
///    updated in some manner that might affect the routes.  ¿ T¿ T¿ T%¿ T&¿ TYÑµ¿ XÙÑI/// Called whenever the [Navigator] has updated in some manner that might
/// affect routes, to indicate that the route may wish to rebuild as well.
///
/// This is called by the [Navigator] whenever the
/// [NavigatorState]'s [State.widget] changes (as in [State.didUpdateWidget]),
/// for example because the [MaterialApp] has been rebuilt. This
/// ensures that routes that directly refer to the state of the
/// widget that built the [MaterialApp] will be notified when that
/// widget rebuilds, since it would otherwise be difficult to notify
/// the routes that state they depend on may have changed.
///
/// It is also called whenever the [Navigator]'s dependencies change
/// (as in [State.didChangeDependencies]). This allows routes to use the
/// [Navigator]'s context ([NavigatorState.context]), for example in
/// [ModalRoute.barrierColor], and update accordingly.
///
/// The [ModalRoute] subclass overrides this to force the barrier
/// overlay to rebuild.
///
/// See also:
///
///  * [changedInternalState], the equivalent but for changes to the internal
///    state of the route.  ¿ X—¿ X“¿ Xﬁ¿ Xﬂ¿ YÉ¿ [CÅ˜/// Discards any resources used by the object.
///
/// This method should not remove its [overlayEntries] from the [Overlay]. The
/// object's owner is in charge of doing that.
///
/// After this is called, the object is not in a usable state and should be
/// discarded.
///
/// This method should only be called by the object's owner; typically the
/// [Navigator] owns a route and so will call this method when the route is
/// removed, after which the route is no longer referenced by the navigator.  ¿ [ ¿ [!¿ [1¿ [2 ¿ dÇ_¿ dd8/// Data that might be useful in constructing a [Route]. ¿ dvk ¿ d©¿ d∂*/// Creates data used to construct routes.¿ dΩ	¿ d√  ¿ dÃ¿ d“   ¿ dÂp¿ eQW/// The name of the route (e.g., "/settings").
///
/// If null, the route is anonymous. ¿ eZÄó¿ eËy/// The arguments passed to this route.
///
/// May be used when building the route, e.g. in [Navigator.onGenerateRoute].  ¿ eˆÄÅ¿ f	   ¿ eˆ¿ e˜¿ dS¿ dT¿ f{ã¬¿ hﬂÇT/// Describes the configuration of a [Route].
///
/// The type argument `T` is the corresponding [Route]'s return type, as
/// used by [Route.currentResult], [Route.popped], and [Route.didPop].
///
/// The [canPop] and [onPopInvoked] are used for intercepting pops.
///
/// {@tool dartpad}
/// This sample demonstrates how to use this [canPop] and [onPopInvoked] to
/// intercept pops.
///
/// ** See code in examples/api/lib/widgets/page/page_can_pop.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [Navigator.pages], which accepts a list of [Page]s and updates its routes
///    history.¿ h‰¿ h‰¿ iÄ„ ¿ iB¿ iF8/// Creates a page and initializes [key] for subclasses.¿ iM¿ iS  ¿ i[
¿ ib  ¿ ik¿ ir  ¿ iÄ¿ iÜ  ¿ iò¿ iû  ¿ i∞-¿ i∂  ¿ i¶¿ iƒ¿ j2ÄÇ¿ j±h/// The key associated with this page.
///
/// This key will be used for comparing pages in [canUpdate]. ¿ jπÅM¿ k˘Å/// Restoration ID to save and restore the state of the [Route] configured by
/// this page.
///
/// If no restoration ID is provided, the [Route] will not restore its state.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter. ¿ lÇT¿ nSÇ/// Called after a pop on the associated route was handled.
///
/// It's not possible to prevent the pop from happening at the time that this
/// method is called; the pop has already happened. Use [canPop] to
/// disable pops in advance.
///
/// This will still be called even when the pop is canceled. A pop is canceled
/// when the associated [Route.popDisposition] returns false, or when
/// [canPop] is set to false. The `didPop` parameter indicates whether or not
/// the back navigation actually happened successfully. ¿ ndÅâ¿ oÁÅg/// When false, blocks the associated route from being popped.
///
/// If this is set to false for first page in the Navigator. It prevents
/// Flutter app from exiting.
///
/// If there are any [PopScope] widgets in a route's widget subtree,
/// each of their `canPop` must be `true`, in addition to this canPop, in
/// order for the route to be able to pop.  ¿ iËF¿ iÙ  ¿ j¿ j  ¿ j¿ j$   ¿ oÚÅ¿ póÄó/// Whether this page can be updated with the [other] page.
///
/// Two pages are consider updatable if they have same the [runtimeType] and
/// [key]. ¿ p°¿ p∞   ¿ qÄÀ¿ q¥Äé/// Creates the [Route] that corresponds to this page.
///
/// The created [Route] must have its [Route.settings] property set to this [Page]. ¿ q¿¿ qŒ  ¿ q†¿ q°¿ q⁄a¿ qÌ   ¿ q⁄¿ q€ ¿ r?ãƒ¿ rÉ=/// An interface for observing the behavior of a [Navigator].  ¿ ubL¿ uá ¿ uï¿ uú¿ u´¿ uù¿ u¨¿ u≠¿ rôo¿ rÈ9/// The navigator that the observer is observing, if any.   ¿ u≥Ä›¿ vPÄè/// The [Navigator] pushed `route`.
///
/// The route immediately below that one, and thus the previously active
/// route, is `previousRoute`. ¿ vX¿ vh  ¿ vn¿ v   ¿ vîÄ◊¿ w,Ää/// The [Navigator] popped `route`.
///
/// The route immediately below that one, and thus the newly active
/// route, is `previousRoute`. ¿ w3¿ wC  ¿ wI¿ wZ   ¿ woÅ¿ yÅñ/// The [Navigator] removed `route`.
///
/// If only one route is being removed, then the route immediately below
/// that one, if any, is `previousRoute`.
///
/// If multiple routes are being removed, then the route below the
/// bottommost route being removed, if any, is `previousRoute`, and this
/// method will be called once for each removed route, from the topmost route
/// to the bottommost route. ¿ y'¿ y7  ¿ y=¿ yN   ¿ ycÄÜ¿ y£8/// The [Navigator] replaced `oldRoute` with `newRoute`. ¿ y∞¿ y¡  ¿ y ¿ y€   ¿ yÌÇM¿ {ÔÅÍ/// The top most route has changed.
///
/// The `topRoute` is the new top most route. This can be a new route pushed
/// on top of the screen, or an existing route that becomes the new top-most
/// route because the previous top-most route has been popped.
///
/// The `previousTopRoute` was the top most route before the change. This can
/// be a route that was popped off the screen, or a route that will be covered
/// by the `topRoute`. This can also be null if this is the first build. ¿ {¸¿ |  ¿ | ¿ |&   ¿ |>Å#¿ }Ä…/// The [Navigator]'s routes are being moved by a user gesture.
///
/// For example, this is called when an iOS back gesture starts, and is used
/// to disable hero animations during such interactions. ¿ })¿ }9  ¿ }?¿ }P   ¿ }eÄú¿ }Èx/// User gesture is no longer controlling the [Navigator].
///
/// Paired with an earlier call to [didStartUserGesture].    ¿ ~å$¿ Ä^ÇR/// An inherited widget to host a hero controller.
///
/// The hosted hero controller will be picked up by the navigator in the
/// [child] subtree. Once a navigator picks up this controller, the navigator
/// will bar any navigator below its subtree from receiving this controller.
///
/// The hero controller inside the [HeroControllerScope] can only subscribe to
/// one navigator at a time. An assertion will be thrown if the hero controller
/// subscribes to more than one navigators. This can happen when there are
/// multiple navigators under the same [HeroControllerScope] in parallel. ¿ ÄéÄÆ ¿ ÄÀ¿ Äﬁ4/// Creates a widget to host the input [controller].¿ ÄÂ	¿ ÄÏ  ¿ ÄÙ'¿ Å  ¿ Å!¿ Å1   ¿ Å@Ä¡¿ Å∑¿ Å∏¿ ÅºY/// Creates a widget to prevent the subtree from receiving the hero controller
/// above.¿ Å√	¿ Å   ¿ Å“¿ Å‚  ¿ Å˙¿ ÅÔ¿ Å¸¿ Ç]¿ ÇX:/// The hero controller that is hosted inside this widget.  ¿ ÇgÇ]¿ ÑÅà/// Retrieves the [HeroController] from the closest [HeroControllerScope]
/// ancestor, or null if none exists.
///
/// Calling this method will create a dependency on the closest
/// [HeroControllerScope] in the [context], if there is one.
///
/// See also:
///
/// * [HeroControllerScope.of], which is similar to this method, but asserts
///   if no [HeroControllerScope] ancestor is found. ¿ Ñ#¿ Ñ1   ¿ Ñ»Ñ‰¿ Ü÷Å›/// Retrieves the [HeroController] from the closest [HeroControllerScope]
/// ancestor.
///
/// If no ancestor is found, this method will assert in debug mode, and throw
/// an exception in release mode.
///
/// Calling this method will create a dependency on the closest
/// [HeroControllerScope] in the [context].
///
/// See also:
///
/// * [HeroControllerScope.maybeOf], which is similar to this method, but
///   returns null if no [HeroControllerScope] ancestor is found. ¿ ÜŸ¿ ÜÁ   ¿ â∞w¿ â¡  ¿ â‘¿ âÈ  ¿ â∞¿ â± ¿ ä+âÕ¿ ä”Äò/// A [Route] wrapper interface that can be staged for [TransitionDelegate] to
/// decide how its underlying [Route] should transition on or off screen.   ¿ äÌ>¿ ã%"/// Retrieves the wrapped [Route].   ¿ ã/Å<¿ åNÅ/// Whether this route is waiting for the decision on how to enter the screen.
///
/// If this property is true, this route requires an explicit decision on how
/// to transition into the screen. Such a decision should be made in the
/// [TransitionDelegate.resolve].   ¿ åoÅ9¿ çåÅ	/// Whether this route is waiting for the decision on how to exit the screen.
///
/// If this property is true, this route requires an explicit decision on how
/// to transition off the screen. Such a decision should be made in the
/// [TransitionDelegate.resolve].   ¿ ç¨ÅQ¿ éÔÅ3/// Marks the [route] to be pushed with transition.
///
/// During [TransitionDelegate.resolve], this can be called on an entering
/// route (where [RouteTransitionRecord.isWaitingForEnteringDecision] is true) in indicate that the
/// route should be pushed onto the [Navigator] with an animated transition.   ¿ èÅT¿ êHÅ7/// Marks the [route] to be added without transition.
///
/// During [TransitionDelegate.resolve], this can be called on an entering
/// route (where [RouteTransitionRecord.isWaitingForEnteringDecision] is true) in indicate that the
/// route should be added onto the [Navigator] without an animated transition.   ¿ êYÅ¿ ëUÄÏ/// Marks the [route] to be popped with transition.
///
/// During [TransitionDelegate.resolve], this can be called on an exiting
/// route to indicate that the route should be popped off the [Navigator] with
/// an animated transition. ¿ ëa¿ ëj   ¿ ëvÅP¿ í§Å/// Marks the [route] to be completed without transition.
///
/// During [TransitionDelegate.resolve], this can be called on an exiting
/// route to indicate that the route should be completed with the provided
/// result and removed from the [Navigator] without an animated transition. ¿ íµ¿ íæ   ¿ í Å,¿ ìÊÅ/// Marks the [route] to be removed without transition.
///
/// During [TransitionDelegate.resolve], this can be called on an exiting
/// route to indicate that the route should be removed from the [Navigator]
/// without completing and without an animated transition.    ¿ ì˙®¿ ú∫à∞/// The delegate that decides how pages added and removed from [Navigator.pages]
/// transition in or out of the screen.
///
/// This abstract class implements the API to be called by [Navigator] when it
/// requires explicit decisions on how the routes transition on or off the screen.
///
/// To make route transition decisions, subclass must implement [resolve].
///
/// {@tool snippet}
/// The following example demonstrates how to implement a subclass that always
/// removes or adds routes without animated transitions and puts the removed
/// routes at the top of the list.
///
/// ```dart
/// class NoAnimationTransitionDelegate extends TransitionDelegate<void> {
///   @override
///   Iterable<RouteTransitionRecord> resolve({
///     required List<RouteTransitionRecord> newPageRouteHistory,
///     required Map<RouteTransitionRecord?, RouteTransitionRecord> locationToExitingPageRoute,
///     required Map<RouteTransitionRecord?, List<RouteTransitionRecord>> pageRouteToPagelessRoutes,
///   }) {
///     final List<RouteTransitionRecord> results = <RouteTransitionRecord>[];
///
///     for (final RouteTransitionRecord pageRoute in newPageRouteHistory) {
///       if (pageRoute.isWaitingForEnteringDecision) {
///         pageRoute.markForAdd();
///       }
///       results.add(pageRoute);
///
///     }
///     for (final RouteTransitionRecord exitingPageRoute in locationToExitingPageRoute.values) {
///       if (exitingPageRoute.isWaitingForExitingDecision) {
///        exitingPageRoute.markForRemove();
///        final List<RouteTransitionRecord>? pagelessRoutes = pageRouteToPagelessRoutes[exitingPageRoute];
///        if (pagelessRoutes != null) {
///          for (final RouteTransitionRecord pagelessRoute in pagelessRoutes) {
///             pagelessRoute.markForRemove();
///           }
///        }
///       }
///       results.add(exitingPageRoute);
///
///     }
///     return results;
///   }
/// }
///
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [Navigator.transitionDelegate], which uses this class to make route
///    transition decisions.
///  * [DefaultTransitionDelegate], which implements the default way to decide
///    how routes transition in or out of the screen.¿ úÕ¿ úÕ¿ ú‘e ¿ ù$¿ ù6G/// Creates a delegate and enables subclass to create a constant class.    ¿ ù=ç¿ ù]  ¿ ùo8¿ ùï  ¿ ù≠V¿ ùÍ  ¿ û	[¿ ûL   ¿ ™Xë±¿ ∫ˇèÓ/// A method that will be called by the [Navigator] to decide how routes
/// transition in or out of the screen when [Navigator.pages] is updated.
///
/// The `newPageRouteHistory` list contains all page-based routes in the order
/// that will be on the [Navigator]'s history stack after this update
/// completes. If a route in `newPageRouteHistory` has its
/// [RouteTransitionRecord.isWaitingForEnteringDecision] set to true, this
/// route requires explicit decision on how it should transition onto the
/// Navigator. To make a decision, call [RouteTransitionRecord.markForPush] or
/// [RouteTransitionRecord.markForAdd].
///
/// The `locationToExitingPageRoute` contains the pages-based routes that
/// are removed from the routes history after page update. This map records
/// page-based routes to be removed with the location of the route in the
/// original route history before the update. The keys are the locations
/// represented by the page-based routes that are directly below the removed
/// routes, and the value are the page-based routes to be removed. The
/// location is null if the route to be removed is the bottom most route. If
/// a route in `locationToExitingPageRoute` has its
/// [RouteTransitionRecord.isWaitingForExitingDecision] set to true, this
/// route requires explicit decision on how it should transition off the
/// Navigator. To make a decision for a removed route, call
/// [RouteTransitionRecord.markForPop],
/// [RouteTransitionRecord.markForComplete] or
/// [RouteTransitionRecord.markForRemove]. It is possible that decisions are
/// not required for routes in the `locationToExitingPageRoute`. This can
/// happen if the routes have already been popped in earlier page updates and
/// are still waiting for popping animations to finish. In such case, those
/// routes are still included in the `locationToExitingPageRoute` with their
/// [RouteTransitionRecord.isWaitingForExitingDecision] set to false and no
/// decisions are required.
///
/// The `pageRouteToPagelessRoutes` records the page-based routes and their
/// associated pageless routes. If a page-based route is waiting for exiting
/// decision, its associated pageless routes also require explicit decisions
/// on how to transition off the screen.
///
/// Once all the decisions have been made, this method must merge the removed
/// routes (whether or not they require decisions) and the
/// `newPageRouteHistory` and return the merged result. The order in the
/// result will be the order the [Navigator] uses for updating the route
/// history. The return list must preserve the same order of routes in
/// `newPageRouteHistory`. The removed routes, however, can be inserted into
/// the return list freely as long as all of them are included.
///
/// For example, consider the following case.
///
/// `newPageRouteHistory = [A, B, C]`
///
/// `locationToExitingPageRoute = {A -> D, C -> E}`
///
/// The following outputs are valid.
///
/// `result = [A, B ,C ,D ,E]` is valid.
/// `result = [D, A, B ,C ,E]` is also valid because exiting route can be
/// inserted in any place.
///
/// The following outputs are invalid.
///
/// `result = [B, A, C ,D ,E]` is invalid because B must be after A.
/// `result = [A, B, C ,E]` is invalid because results must include D.
///
/// See also:
///
///  * [RouteTransitionRecord.markForPush], which makes route enter the screen
///    with an animated transition.
///  * [RouteTransitionRecord.markForAdd], which makes route enter the screen
///    without an animated transition.
///  * [RouteTransitionRecord.markForPop], which makes route exit the screen
///    with an animated transition.
///  * [RouteTransitionRecord.markForRemove], which does not complete the
///    route and makes it exit the screen without an animated transition.
///  * [RouteTransitionRecord.markForComplete], which completes the route and
///    makes it exit the screen without an animated transition.
///  * [DefaultTransitionDelegate.resolve], which implements the default way
///    to decide how routes transition in or out of the screen. ¿ ª8¿ ª3  ¿ ªKV¿ ªà  ¿ ªß[¿ ªÍ    ¿ ºéX¿ æÇ/// The default implementation of [TransitionDelegate] that the [Navigator] will
/// use if its [Navigator.transitionDelegate] is not specified.
///
/// This transition delegate follows two rules. Firstly, all the entering routes
/// are placed on top of the exiting routes if they are at the same location.
/// Secondly, the top most route will always transition with an animated transition.
/// All the other routes below will either be completed with
/// [Route.currentResult] or added without an animated transition.¿ æ6¿ æ6¿ æ[Y ¿ æé¿ æß*/// Creates a default transition delegate. ¿ æ¨¿ æ±¿ æ≤  ¿ æ∏ã´¿ æ‰  ¿ æÚ8¿ ø  ¿ ø0V¿ øm  ¿ øå[¿ øœ  ¿ æ∏¿ æπ ¿ ÀS¿∂¿ ˛ê≥6/// A widget that manages a set of child widgets with a stack discipline.
///
/// Many apps have a navigator near the top of their widget hierarchy in order
/// to display their logical history using an [Overlay] with the most recently
/// visited pages visually on top of the older pages. Using this pattern lets
/// the navigator visually transition from one page to another by moving the widgets
/// around in the overlay. Similarly, the navigator can be used to show a dialog
/// by positioning the dialog widget above the current page.
///
/// ## Using the Pages API
///
/// The [Navigator] will convert its [Navigator.pages] into a stack of [Route]s
/// if it is provided. A change in [Navigator.pages] will trigger an update to
/// the stack of [Route]s. The [Navigator] will update its routes to match the
/// new configuration of its [Navigator.pages]. To use this API, one can create
/// a [Page] subclass and defines a list of [Page]s for [Navigator.pages]. A
/// [Navigator.onPopPage] callback is also required to properly clean up the
/// input pages in case of a pop.
///
/// By Default, the [Navigator] will use [DefaultTransitionDelegate] to decide
/// how routes transition in or out of the screen. To customize it, define a
/// [TransitionDelegate] subclass and provide it to the
/// [Navigator.transitionDelegate].
///
/// For more information on using the pages API, see the [Router] widget.
///
/// ## Using the Navigator API
///
/// Mobile apps typically reveal their contents via full-screen elements
/// called "screens" or "pages". In Flutter these elements are called
/// routes and they're managed by a [Navigator] widget. The navigator
/// manages a stack of [Route] objects and provides two ways for managing
/// the stack, the declarative API [Navigator.pages] or imperative API
/// [Navigator.push] and [Navigator.pop].
///
/// When your user interface fits this paradigm of a stack, where the user
/// should be able to _navigate_ back to an earlier element in the stack,
/// the use of routes and the Navigator is appropriate. On certain platforms,
/// such as Android, the system UI will provide a back button (outside the
/// bounds of your application) that will allow the user to navigate back
/// to earlier routes in your application's stack. On platforms that don't
/// have this build-in navigation mechanism, the use of an [AppBar] (typically
/// used in the [Scaffold.appBar] property) can automatically add a back
/// button for user navigation.
///
/// ### Displaying a full-screen route
///
/// Although you can create a navigator directly, it's most common to use the
/// navigator created by the `Router` which itself is created and configured by
/// a [WidgetsApp] or a [MaterialApp] widget. You can refer to that navigator
/// with [Navigator.of].
///
/// A [MaterialApp] is the simplest way to set things up. The [MaterialApp]'s
/// home becomes the route at the bottom of the [Navigator]'s stack. It is what
/// you see when the app is launched.
///
/// ```dart
/// void main() {
///   runApp(const MaterialApp(home: MyAppHome()));
/// }
/// ```
///
/// To push a new route on the stack you can create an instance of
/// [MaterialPageRoute] with a builder function that creates whatever you
/// want to appear on the screen. For example:
///
/// ```dart
/// Navigator.push(context, MaterialPageRoute<void>(
///   builder: (BuildContext context) {
///     return Scaffold(
///       appBar: AppBar(title: const Text('My Page')),
///       body: Center(
///         child: TextButton(
///           child: const Text('POP'),
///           onPressed: () {
///             Navigator.pop(context);
///           },
///         ),
///       ),
///     );
///   },
/// ));
/// ```
///
/// The route defines its widget with a builder function instead of a
/// child widget because it will be built and rebuilt in different
/// contexts depending on when it's pushed and popped.
///
/// As you can see, the new route can be popped, revealing the app's home
/// page, with the Navigator's pop method:
///
/// ```dart
/// Navigator.pop(context);
/// ```
///
/// It usually isn't necessary to provide a widget that pops the Navigator
/// in a route with a [Scaffold] because the Scaffold automatically adds a
/// 'back' button to its AppBar. Pressing the back button causes
/// [Navigator.pop] to be called. On Android, pressing the system back
/// button does the same thing.
///
/// ### Using named navigator routes
///
/// Mobile apps often manage a large number of routes and it's often
/// easiest to refer to them by name. Route names, by convention,
/// use a path-like structure (for example, '/a/b/c').
/// The app's home page route is named '/' by default.
///
/// The [MaterialApp] can be created
/// with a [Map<String, WidgetBuilder>] which maps from a route's name to
/// a builder function that will create it. The [MaterialApp] uses this
/// map to create a value for its navigator's [onGenerateRoute] callback.
///
/// ```dart
/// void main() {
///   runApp(MaterialApp(
///     home: const MyAppHome(), // becomes the route named '/'
///     routes: <String, WidgetBuilder> {
///       '/a': (BuildContext context) => const MyPage(title: Text('page A')),
///       '/b': (BuildContext context) => const MyPage(title: Text('page B')),
///       '/c': (BuildContext context) => const MyPage(title: Text('page C')),
///     },
///   ));
/// }
/// ```
///
/// To show a route by name:
///
/// ```dart
/// Navigator.pushNamed(context, '/b');
/// ```
///
/// ### Routes can return a value
///
/// When a route is pushed to ask the user for a value, the value can be
/// returned via the [pop] method's result parameter.
///
/// Methods that push a route return a [Future]. The Future resolves when the
/// route is popped and the [Future]'s value is the [pop] method's `result`
/// parameter.
///
/// For example if we wanted to ask the user to press 'OK' to confirm an
/// operation we could `await` the result of [Navigator.push]:
///
/// ```dart
/// bool? value = await Navigator.push(context, MaterialPageRoute<bool>(
///   builder: (BuildContext context) {
///     return Center(
///       child: GestureDetector(
///         child: const Text('OK'),
///         onTap: () { Navigator.pop(context, true); }
///       ),
///     );
///   }
/// ));
/// ```
///
/// If the user presses 'OK' then value will be true. If the user backs
/// out of the route, for example by pressing the Scaffold's back button,
/// the value will be null.
///
/// When a route is used to return a value, the route's type parameter must
/// match the type of [pop]'s result. That's why we've used
/// `MaterialPageRoute<bool>` instead of `MaterialPageRoute<void>` or just
/// `MaterialPageRoute`. (If you prefer to not specify the types, though, that's
/// fine too.)
///
/// ### Popup routes
///
/// Routes don't have to obscure the entire screen. [PopupRoute]s cover the
/// screen with a [ModalRoute.barrierColor] that can be only partially opaque to
/// allow the current screen to show through. Popup routes are "modal" because
/// they block input to the widgets below.
///
/// There are functions which create and show popup routes. For
/// example: [showDialog], [showMenu], and [showModalBottomSheet]. These
/// functions return their pushed route's Future as described above.
/// Callers can await the returned value to take an action when the
/// route is popped, or to discover the route's value.
///
/// There are also widgets which create popup routes, like [PopupMenuButton] and
/// [DropdownButton]. These widgets create internal subclasses of PopupRoute
/// and use the Navigator's push and pop methods to show and dismiss them.
///
/// ### Custom routes
///
/// You can create your own subclass of one of the widget library route classes
/// like [PopupRoute], [ModalRoute], or [PageRoute], to control the animated
/// transition employed to show the route, the color and behavior of the route's
/// modal barrier, and other aspects of the route.
///
/// The [PageRouteBuilder] class makes it possible to define a custom route
/// in terms of callbacks. Here's an example that rotates and fades its child
/// when the route appears or disappears. This route does not obscure the entire
/// screen because it specifies `opaque: false`, just as a popup route does.
///
/// ```dart
/// Navigator.push(context, PageRouteBuilder<void>(
///   opaque: false,
///   pageBuilder: (BuildContext context, _, __) {
///     return const Center(child: Text('My PageRoute'));
///   },
///   transitionsBuilder: (___, Animation<double> animation, ____, Widget child) {
///     return FadeTransition(
///       opacity: animation,
///       child: RotationTransition(
///         turns: Tween<double>(begin: 0.5, end: 1.0).animate(animation),
///         child: child,
///       ),
///     );
///   }
/// ));
/// ```
///
/// The page route is built in two parts, the "page" and the
/// "transitions". The page becomes a descendant of the child passed to
/// the `transitionsBuilder` function. Typically the page is only built once,
/// because it doesn't depend on its animation parameters (elided with `_`
/// and `__` in this example). The transition is built on every frame
/// for its duration.
///
/// (In this example, `void` is used as the return type for the route, because
/// it does not return a value.)
///
/// ### Nesting Navigators
///
/// An app can use more than one [Navigator]. Nesting one [Navigator] below
/// another [Navigator] can be used to create an "inner journey" such as tabbed
/// navigation, user registration, store checkout, or other independent journeys
/// that represent a subsection of your overall application.
///
/// #### Example
///
/// It is standard practice for iOS apps to use tabbed navigation where each
/// tab maintains its own navigation history. Therefore, each tab has its own
/// [Navigator], creating a kind of "parallel navigation."
///
/// In addition to the parallel navigation of the tabs, it is still possible to
/// launch full-screen pages that completely cover the tabs. For example: an
/// on-boarding flow, or an alert dialog. Therefore, there must exist a "root"
/// [Navigator] that sits above the tab navigation. As a result, each of the
/// tab's [Navigator]s are actually nested [Navigator]s sitting below a single
/// root [Navigator].
///
/// In practice, the nested [Navigator]s for tabbed navigation sit in the
/// [WidgetsApp] and [CupertinoTabView] widgets and do not need to be explicitly
/// created or managed.
///
/// {@tool sample}
/// The following example demonstrates how a nested [Navigator] can be used to
/// present a standalone user registration journey.
///
/// Even though this example uses two [Navigator]s to demonstrate nested
/// [Navigator]s, a similar result is possible using only a single [Navigator].
///
/// Run this example with `flutter run --route=/signup` to start it with
/// the signup flow instead of on the home page.
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.0.dart **
/// {@end-tool}
///
/// [Navigator.of] operates on the nearest ancestor [Navigator] from the given
/// [BuildContext]. Be sure to provide a [BuildContext] below the intended
/// [Navigator], especially in large `build` methods where nested [Navigator]s
/// are created. The [Builder] widget can be used to access a [BuildContext] at
/// a desired location in the widget subtree.
///
/// ### Finding the enclosing route
///
/// In the common case of a modal route, the enclosing route can be obtained
/// from inside a build method using [ModalRoute.of]. To determine if the
/// enclosing route is the active route (e.g. so that controls can be dimmed
/// when the route is not active), the [Route.isCurrent] property can be checked
/// on the returned route.
///
/// ## State Restoration
///
/// If provided with a [restorationScopeId] and when surrounded by a valid
/// [RestorationScope] the [Navigator] will restore its state by recreating
/// the current history stack of [Route]s during state restoration and by
/// restoring the internal state of those [Route]s. However, not all [Route]s
/// on the stack can be restored:
///
///  * [Page]-based routes restore their state if [Page.restorationId] is
///    provided.
///  * [Route]s added with the classic imperative API ([push], [pushNamed], and
///    friends) can never restore their state.
///  * A [Route] added with the restorable imperative API ([restorablePush],
///    [restorablePushNamed], and all other imperative methods with "restorable"
///    in their name) restores its state if all routes below it up to and
///    including the first [Page]-based route below it are restored. If there
///    is no [Page]-based route below it, it only restores its state if all
///    routes below it restore theirs.
///
/// If a [Route] is deemed restorable, the [Navigator] will set its
/// [Route.restorationScopeId] to a non-null value. Routes can use that ID to
/// store and restore their own state. As an example, the [ModalRoute] will
/// use this ID to create a [RestorationScope] for its content widgets. ¿ ˛µÉ{ ¿ ˇT¿ ˇ]Äí/// Creates a widget that maintains a stack-based history of child widgets.
///
/// If the [pages] is not empty, the [onPopPage] must not be null.¿ ˇd	¿ ˇk  ¿ ˇs$¿ ˇy  ¿ ˇùÄà¿   ¿ +¿ 1  ¿ BE¿ H  ¿ ç¿ ì  ¿ ß¿ ≠  ¿ ¿D¿ ∆  ¿
'¿  ¿7!¿=  ¿^,¿d  ¿ê¿ñ  ¿Æ¿¥  ¿ÀD¿—  ¿¿  %¿ ˇÄ¿ ˇï¿ ˇñ¿ ˇÜ¿ ˇî¿ ˇá¿ ˇã¿ ˇì¿ ˇå¿ ˇù¿ ˇû¿ ˇ®¿ ¿ ˇ∞¿ ˇ÷¿ a¿ j¿ k¿ ⁄¿ ‡¿ ˘¿¿ ˙¿¿¿,¿K¿O¿P¿o¿à¿â¿u¿á¿v¿§¿Ì¿4Ü"¿QÖ /// The list of pages with which to populate the history.
///
/// Pages are turned into routes using [Page.createRoute] in a manner
/// analogous to how [Widget]s are turned into [Element]s (and [State]s or
/// [RenderObject]s) using [Widget.createElement] (and
/// [StatefulWidget.createState] or [RenderObjectWidget.createRenderObject]).
///
/// When this list is updated, the new list is compared to the previous
/// list and the set of routes is updated accordingly.
///
/// Some [Route]s do not correspond to [Page] objects, namely, those that are
/// added to the history using the [Navigator] API ([push] and friends). A
/// [Route] that does not correspond to a [Page] object is called a pageless
/// route and is tied to the [Route] that _does_ correspond to a [Page] object
/// that is below it in the history.
///
/// Pages that are added or removed may be animated as controlled by the
/// [transitionDelegate]. If a page is removed that had other pageless routes
/// pushed on top of it using [push] and friends, those pageless routes are
/// also removed with or without animation as determined by the
/// [transitionDelegate].
///
/// To use this API, an [onPopPage] callback must also be provided to properly
/// clean up this list if a page has been popped.
///
/// If [initialRoute] is non-null when the widget is first created, then
/// [onGenerateInitialRoutes] is used to generate routes that are above those
/// corresponding to [pages] in the initial history. ¿[Ép¿¬Çø/// This is deprecated and replaced by [onDidRemovePage].
///
/// Called when [pop] is invoked but the current [Route] corresponds to a
/// [Page] found in the [pages] list.
///
/// The `result` argument is the value with which the route is to complete
/// (e.g. the value returned from a dialog).
///
/// This callback is responsible for calling [Route.didPop] and returning
/// whether this pop is successful.
///
/// The [Navigator] widget should be rebuilt with a [pages] list that does not
/// contain the [Page] for the given [Route]. The next time the [pages] list
/// is updated, if the [Page] corresponding to this [Route] is still present,
/// it will be interpreted as a new route to display.¿9¿:¿D¿ß¿J¿n¿–Çî¿UÇM/// Called when the [Route] associated with the given [Page] has been removed
/// from the Navigator.
///
/// This can happen when the route is removed or completed through
/// [Navigator.pop], [Navigator.pushReplacement], or its friends.
///
/// This callback is responsible for removing the given page from the list of
/// [pages].
///
/// The [Navigator] widget should be rebuilt with a [pages] list that does not
/// contain the given page [Page]. The next time the [pages] list
/// is updated, if the given [Page] is still present, it will be interpreted
/// as a new page to display. ¿iÄ€¿2Äû/// The delegate used for deciding how routes transition in or off the screen
/// during the [pages] updates.
///
/// Defaults to [DefaultTransitionDelegate]. ¿IÅÌ¿*Åæ/// The name of the first route to show.
///
/// Defaults to [Navigator.defaultRouteName].
///
/// The value is interpreted according to [onGenerateInitialRoutes], which
/// defaults to [defaultGenerateInitialRoutes].
///
/// Changing the [initialRoute] will have no effect, as it only controls the
/// _initial_ route. To change the route while the application is running, use
/// the static functions on this class, such as [push] or [replace]. ¿;a¿ç;/// Called to generate a route for a given [RouteSettings]. ¿°ÅÆ¿AÅ{/// Called when [onGenerateRoute] fails to generate a route.
///
/// This callback is typically used for error handling. For example, this
/// callback might always generate a "not found" page that describes the route
/// that wasn't found.
///
/// Unknown routes can arise either from errors in the app or from external
/// requests to push routes, such as from Android intents. ¿TU¿†+/// A list of observers for this navigator. ¿ÆÖt¿Ö/// Restoration ID to save and restore the state of the navigator, including
/// its history.
///
/// {@template flutter.widgets.navigator.restorationScopeId}
/// If a restoration ID is provided, the navigator will persist its internal
/// state (including the route history as well as the restorable state of the
/// routes) and restore it during state restoration.
///
/// If no restoration ID is provided, the route history stack will not be
/// restored and state restoration is disabled for the individual routes as
/// well.
///
/// The state is persisted in a [RestorationBucket] claimed from
/// the surrounding [RestorationScope] using the provided restoration ID.
/// Within that bucket, the [Navigator] also creates a new [RestorationScope]
/// for its children (the [Route]s).
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.
///  * [RestorationMixin], which contains a runnable code sample showcasing
///    state restoration in Flutter.
///  * [Navigator], which explains under the heading "state restoration"
///    how and under what conditions the navigator restores its state.
///  * [Navigator.restorablePush], which includes an example showcasing how
///    to push a restorable route onto the navigator.
/// {@endtemplate} ¿'Én¿{É/// Controls the transfer of focus beyond the first and the last items of a
/// focus scope that defines focus traversal of widgets within a route.
///
/// {@template flutter.widgets.navigator.routeTraversalEdgeBehavior}
/// The focus inside routes installed in the top of the app affects how
/// the app behaves with respect to the platform content surrounding it.
/// For example, on the web, an app is at a minimum surrounded by browser UI,
/// such as the address bar, browser tabs, and more. The user should be able
/// to reach browser UI using normal focus shortcuts. Similarly, if the app
/// is embedded within an `<iframe>` or inside a custom element, it should
/// be able to participate in the overall focus traversal, including elements
/// not rendered by Flutter.
/// {@endtemplate} ¿öÅ ¿ÑÄ…/// The name for the default route of the application.
///
/// See also:
///
///  * [dart:ui.PlatformDispatcher.defaultRouteName], which reflects the route that the
///    application was started with.¿ó¿üÉˆ¿!~É≠/// Called when the widget is created to generate the initial list of [Route]
/// objects if [initialRoute] is not null.
///
/// Defaults to [defaultGenerateInitialRoutes].
///
/// The [NavigatorState] and [initialRoute] will be passed to the callback.
/// The callback must return a list of [Route] objects with which the history
/// will be primed.
///
/// When parsing the initialRoute, if there's any chance that it may
/// contain complex characters, it's best to use the
/// [characters](https://pub.dev/packages/characters) API. This will ensure
/// that extended grapheme clusters and surrogate pairs are treated as single
/// characters by the code, the same way that they appear to the user. For
/// example, the string "üë®‚Äçüë©‚Äçüë¶" appears to the user as a single
/// character and `string.characters.length` intuitively returns 1. On the
/// other hand, `string.length` returns 8, and `string.runes.length` returns
/// 5! ¿!öÑx¿%¯Ñ(/// Whether this navigator should report route update message back to the
/// engine when the top-most route changes.
///
/// If the property is set to true, this navigator automatically sends the
/// route update message to the engine when it detects top-most route changes.
/// The messages are used by the web engine to update the browser URL bar.
///
/// If the property is set to true when the [Navigator] is first created,
/// single-entry history mode is requested using
/// [SystemNavigator.selectSingleEntryHistory]. This means this property
/// should not be used at the same time as [PlatformRouteInformationProvider]
/// is used with a [Router] (including when used with [MaterialApp.router],
/// for example).
///
/// If there are multiple navigators in the widget tree, at most one of them
/// can set this property to true (typically, the top-most one created from
/// the [WidgetsApp]). Otherwise, the web engine may receive multiple route
/// update messages from different navigators and fail to update the URL
/// bar.
///
/// Defaults to false. ¿&Äﬂ¿&ÍÄª/// {@macro flutter.material.Material.clipBehavior}
///
/// In cases where clipping is not desired, consider setting this property to
/// [Clip.none].
///
/// Defaults to [Clip.hardEdge]. ¿&˚Å1¿( Å/// Whether or not the navigator and it's new topmost route should request focus
/// when the new route is pushed onto the navigator.
///
/// If [Route.requestFocus] is set on the topmost route, that will take precedence
/// over this value.
///
/// Defaults to true.  ¿(1åÄ¿3ä⁄/// Push a named route onto the navigator that most tightly encloses the given
/// context.
///
/// {@template flutter.widgets.navigator.pushNamed}
/// The route name will be passed to the [Navigator.onGenerateRoute]
/// callback. The returned route will be pushed into the navigator.
///
/// The new route and the previous route (if any) are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPush]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the route.
///
/// To use [pushNamed], an [Navigator.onGenerateRoute] callback must be
/// provided,
/// {@endtemplate}
///
/// {@template flutter.widgets.navigator.pushNamed.returnValue}
/// Returns a [Future] that completes to the `result` value passed to [pop]
/// when the pushed route is popped off the navigator.
/// {@endtemplate}
///
/// {@template flutter.widgets.Navigator.pushNamed}
/// The provided `arguments` are passed to the pushed route via
/// [RouteSettings.arguments]. Any object can be passed as `arguments` (e.g. a
/// [String], [int], or an instance of a custom `MyRouteArguments` class).
/// Often, a [Map] is used to pass key-value pairs.
///
/// The `arguments` may be used in [Navigator.onGenerateRoute] or
/// [Navigator.onUnknownRoute] to construct the route.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _didPushButton() {
///   Navigator.pushNamed(context, '/settings');
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// The following example shows how to pass additional `arguments` to the
/// route:
///
/// ```dart
/// void _showBerlinWeather() {
///   Navigator.pushNamed(
///     context,
///     '/weather',
///     arguments: <String, String>{
///       'city': 'Berlin',
///       'country': 'Germany',
///     },
///   );
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// The following example shows how to pass a custom Object to the route:
///
/// ```dart
/// class WeatherRouteArguments {
///   WeatherRouteArguments({ required this.city, required this.country });
///   final String city;
///   final String country;
///
///   bool get isGermanCapital {
///     return country == 'Germany' && city == 'Berlin';
///   }
/// }
///
/// void _showWeather() {
///   Navigator.pushNamed(
///     context,
///     '/weather',
///     arguments: WeatherRouteArguments(city: 'Berlin', country: 'Germany'),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamed], which pushes a route that can be restored
///    during state restoration.¿3˙¿3˙¿4¿4   ¿4,¿44  ¿4D¿4M  ¿3 ¿3À¿4µáƒ¿;§Üp/// Push a named route onto the navigator that most tightly encloses the given
/// context.
///
/// {@template flutter.widgets.navigator.restorablePushNamed}
/// Unlike [Route]s pushed via [pushNamed], [Route]s pushed with this method
/// are restored during state restoration according to the rules outlined
/// in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed}
///
/// {@template flutter.widgets.Navigator.restorablePushNamed.arguments}
/// The provided `arguments` are passed to the pushed route via
/// [RouteSettings.arguments]. Any object that is serializable via the
/// [StandardMessageCodec] can be passed as `arguments`. Often, a Map is used
/// to pass key-value pairs.
///
/// The arguments may be used in [Navigator.onGenerateRoute] or
/// [Navigator.onUnknownRoute] to construct the route.
/// {@endtemplate}
///
/// {@template flutter.widgets.Navigator.restorablePushNamed.returnValue}
/// The method returns an opaque ID for the pushed route that can be used by
/// the [RestorableRouteFuture] to gain access to the actual [Route] object
/// added to the navigator and its return value. You can ignore the return
/// value of this method, if you do not care about the route object or the
/// route's return value.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _showParisWeather() {
///   Navigator.restorablePushNamed(
///     context,
///     '/weather',
///     arguments: <String, String>{
///       'city': 'Paris',
///       'country': 'France',
///     },
///   );
/// }
/// ```
/// {@end-tool}¿;∏¿;∏¿;–¿;ﬁ  ¿;Í¿;Ú  ¿<¿<  ¿;Ç¿;É¿<}ä,¿Eöàé/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing the route named [routeName] and then disposing
/// the previous route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.pushReplacementNamed}
/// If non-null, `result` will be used as the result of the route that is
/// removed; the future that had been returned from pushing that old route
/// will complete with `result`. Routes such as dialogs or popup menus
/// typically use this mechanism to return the value selected by the user to
/// the widget that created their route. The type of `result`, if provided,
/// must match the type argument of the class of the old route (`TO`).
///
/// The route name will be passed to the [Navigator.onGenerateRoute]
/// callback. The returned route will be pushed into the navigator.
///
/// The new route and the route below the removed route are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is notified once the
/// new route has finished animating (see [Route.didComplete]). The removed
/// route's exit animation is not run (see [popAndPushNamed] for a variant
/// that animates the removed route).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route,
/// and `TO` is the type of the return value of the old route.
///
/// To use [pushReplacementNamed], a [Navigator.onGenerateRoute] callback must
/// be provided.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _switchToBrightness() {
///   Navigator.pushReplacementNamed(context, '/settings/brightness');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacementNamed], which pushes a replacement route that
///    can be restored during state restoration.¿EØ¿EØ¿E¬¿E¬¿E€¿EÈ  ¿Eı¿E˝  ¿F
¿F  ¿F¿F&  ¿Et¿Eu¿F≠Ö?¿J…É≈/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing the route named [routeName] and then disposing
/// the previous route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.restorablePushReplacementNamed}
/// Unlike [Route]s pushed via [pushReplacementNamed], [Route]s pushed with
/// this method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushReplacementNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _switchToAudioVolume() {
///   Navigator.restorablePushReplacementNamed(context, '/settings/volume');
/// }
/// ```
/// {@end-tool}¿JË¿JË¿J˚¿J˚¿K¿K"  ¿K.¿K6  ¿KF
¿KK  ¿KV¿K_  ¿Jß¿J®¿KàÇ¿SmÜ˙/// Pop the current route off the navigator that most tightly encloses the
/// given context and push a named route in its place.
///
/// {@template flutter.widgets.navigator.popAndPushNamed}
/// The popping of the previous route is handled as per [pop].
///
/// The new route's name will be passed to the [Navigator.onGenerateRoute]
/// callback. The returned route will be pushed into the navigator.
///
/// The new route, the old route, and the route below the old route (if any)
/// are all notified (see [Route.didPop], [Route.didComplete],
/// [Route.didPopNext], [Route.didPush], and [Route.didChangeNext]). If the
/// [Navigator] has any [Navigator.observers], they will be notified as well
/// (see [NavigatorObserver.didPop] and [NavigatorObserver.didPush]). The
/// animations for the pop and the push are performed simultaneously, so the
/// route below may be briefly visible even if both the old route and the new
/// route are opaque (see [TransitionRoute.opaque]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route,
/// and `TO` is the return value type of the old route.
///
/// To use [popAndPushNamed], a [Navigator.onGenerateRoute] callback must be provided.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _selectAccessibility() {
///   Navigator.popAndPushNamed(context, '/settings/accessibility');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePopAndPushNamed], which pushes a new route that can be
///    restored during state restoration.¿S}¿S}¿Sê¿Sê¿S©¿S∑  ¿S√¿SÀ  ¿S€
¿S‡  ¿SÎ¿SÙ  ¿SG¿SH¿TvÑΩ¿XÉO/// Pop the current route off the navigator that most tightly encloses the
/// given context and push a named route in its place.
///
/// {@template flutter.widgets.navigator.restorablePopAndPushNamed}
/// Unlike [Route]s pushed via [popAndPushNamed], [Route]s pushed with
/// this method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.popAndPushNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _selectNetwork() {
///   Navigator.restorablePopAndPushNamed(context, '/settings/network');
/// }
/// ```
/// {@end-tool}¿X4¿X4¿XG¿XG¿X`¿Xn  ¿Xz¿XÇ  ¿Xí
¿Xó  ¿X¢¿X´  ¿W¯¿W˘¿Y7äz¿b•à”/// Push the route with the given name onto the navigator that most tightly
/// encloses the given context, and then remove all the previous routes until
/// the `predicate` returns true.
///
/// {@template flutter.widgets.navigator.pushNamedAndRemoveUntil}
/// The predicate may be applied to the same route more than once if
/// [Route.willHandlePopInternally] is true.
///
/// To remove routes until a route with a certain name, use the
/// [RoutePredicate] returned from [ModalRoute.withName].
///
/// To remove all the routes below the pushed route, use a [RoutePredicate]
/// that always returns false (e.g. `(Route<dynamic> route) => false`).
///
/// The removed routes are removed without being completed, so this method
/// does not take a return value argument.
///
/// The new route's name (`routeName`) will be passed to the
/// [Navigator.onGenerateRoute] callback. The returned route will be pushed
/// into the navigator.
///
/// The new route and the route below the bottommost removed route (which
/// becomes the route below the new route) are notified (see [Route.didPush]
/// and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPush] and [NavigatorObserver.didRemove]). The
/// removed routes are disposed, without being notified, once the new route
/// has finished animating. The futures that had been returned from pushing
/// those routes will not complete.
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route.
///
/// To use [pushNamedAndRemoveUntil], an [Navigator.onGenerateRoute] callback
/// must be provided.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _resetToCalendar() {
///   Navigator.pushNamedAndRemoveUntil(context, '/calendar', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamedAndRemoveUntil], which pushes a new route that can
///    be restored during state restoration.¿bΩ¿bΩ¿b’¿b„  ¿bÔ¿b˜  ¿c¿c  ¿c(¿c1  ¿b¿bÄ¿cµÖ4¿g…ÉΩ/// Push the route with the given name onto the navigator that most tightly
/// encloses the given context, and then remove all the previous routes until
/// the `predicate` returns true.
///
/// {@template flutter.widgets.navigator.restorablePushNamedAndRemoveUntil}
/// Unlike [Route]s pushed via [pushNamedAndRemoveUntil], [Route]s pushed with
/// this method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _resetToOverview() {
///   Navigator.restorablePushNamedAndRemoveUntil(context, '/overview', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}¿gÎ¿gÎ¿h¿h  ¿h¿h%  ¿h6¿hF  ¿hV¿h_  ¿gß¿g®¿hÌÑ˝¿myÑ/// Push the given route onto the navigator that most tightly encloses the
/// given context.
///
/// {@template flutter.widgets.navigator.push}
/// The new route and the previous route (if any) are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPush]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the route.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openMyPage() {
///   Navigator.push<void>(
///     context,
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyPage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePush], which pushes a route that can be restored during
///    state restoration.¿m~¿m~¿më¿mü  ¿mß¿m±  ¿mS¿mT¿mÓÜW¿svÖ)/// Push a new route onto the navigator that most tightly encloses the
/// given context.
///
/// {@template flutter.widgets.navigator.restorablePush}
/// Unlike [Route]s pushed via [push], [Route]s pushed with this method are
/// restored during state restoration according to the rules outlined in the
/// "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.push}
///
/// {@template flutter.widgets.Navigator.restorablePush}
/// The method takes a [RestorableRouteBuilder] as argument, which must be a
/// _static_ function annotated with `@pragma('vm:entry-point')`. It must
/// instantiate and return a new [Route] object that will be added to the
/// navigator. The provided `arguments` object is passed to the
/// `routeBuilder`. The navigator calls the static `routeBuilder` function
/// again during state restoration to re-create the route object.
///
/// Any object that is serializable via the [StandardMessageCodec] can be
/// passed as `arguments`. Often, a Map is used to pass key-value pairs.
/// {@endtemplate}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.restorable_push.0.dart **
/// {@end-tool}¿sÖ¿sÖ¿sò¿s¶  ¿sÆ&¿s…  ¿s◊¿s‡  ¿sT¿sU¿tIàä¿|á=/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing the given route and then disposing the previous
/// route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.pushReplacement}
/// If non-null, `result` will be used as the result of the route that is
/// removed; the future that had been returned from pushing that old route will
/// complete with `result`. Routes such as dialogs or popup menus typically
/// use this mechanism to return the value selected by the user to the widget
/// that created their route. The type of `result`, if provided, must match
/// the type argument of the class of the old route (`TO`).
///
/// The new route and the route below the removed route are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is notified once the
/// new route has finished animating (see [Route.didComplete]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route,
/// and `TO` is the type of the return value of the old route.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _completeLogin() {
///   Navigator.pushReplacement<void, void>(
///     context,
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyHomePage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacement], which pushes a replacement route that can
///    be restored during state restoration.¿|¿|¿|.¿|.¿|B¿|P  ¿|X¿|b  ¿|m
¿|r  ¿{Â¿{Ê¿|◊Ñ€¿ÄîÉp/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing a new route and then disposing the previous
/// route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.restorablePushReplacement}
/// Unlike [Route]s pushed via [pushReplacement], [Route]s pushed with this
/// method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushReplacement}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.restorable_push_replacement.0.dart **
/// {@end-tool}¿ÄÆ¿ÄÆ¿Ä¡¿Ä¡¿Ä’¿Ä„  ¿ÄÎ&¿Å  ¿Å
¿Å  ¿Å!¿Å*  ¿Är¿Äs¿Å∂â`¿ä[à/// Push the given route onto the navigator that most tightly encloses the
/// given context, and then remove all the previous routes until the
/// `predicate` returns true.
///
/// {@template flutter.widgets.navigator.pushAndRemoveUntil}
/// The predicate may be applied to the same route more than once if
/// [Route.willHandlePopInternally] is true.
///
/// To remove routes until a route with a certain name, use the
/// [RoutePredicate] returned from [ModalRoute.withName].
///
/// To remove all the routes below the pushed route, use a [RoutePredicate]
/// that always returns false (e.g. `(Route<dynamic> route) => false`).
///
/// The removed routes are removed without being completed, so this method
/// does not take a return value argument.
///
/// The newly pushed route and its preceding route are notified for
/// [Route.didPush]. After removal, the new route and its new preceding route,
/// (the route below the bottommost removed route) are notified through
/// [Route.didChangeNext]). If the [Navigator] has any [Navigator.observers],
/// they will be notified as well (see [NavigatorObserver.didPush] and
/// [NavigatorObserver.didRemove]). The removed routes are disposed of and
/// notified, once the new route has finished animating. The futures that had
/// been returned from pushing those routes will not complete.
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _finishAccountCreation() {
///   Navigator.pushAndRemoveUntil<void>(
///     context,
///     MaterialPageRoute<void>(builder: (BuildContext context) => const MyHomePage()),
///     ModalRoute.withName('/'),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushAndRemoveUntil], which pushes a route that can be
///    restored during state restoration.¿än¿än¿äÅ¿äè  ¿äó¿ä°  ¿ä™¿ä∫  ¿ä5¿ä6¿ãÑø¿é¿ÉY/// Push a new route onto the navigator that most tightly encloses the
/// given context, and then remove all the previous routes until the
/// `predicate` returns true.
///
/// {@template flutter.widgets.navigator.restorablePushAndRemoveUntil}
/// Unlike [Route]s pushed via [pushAndRemoveUntil], [Route]s pushed with this
/// method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.restorable_push_and_remove_until.0.dart **
/// {@end-tool}¿é›¿é›¿é¿é˛  ¿è)¿è!  ¿è1¿èA  ¿èL¿èU  ¿éû¿éü¿è›áe¿ñuÜ5/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route.
///
/// {@template flutter.widgets.navigator.replace}
/// The old route must not be currently visible, as this method skips the
/// animations and therefore the removal would be jarring if it was visible.
/// To replace the top-most route, consider [pushReplacement] instead, which
/// _does_ animate the new route, and delays removing the old route until the
/// new route has finished animating.
///
/// The removed route is removed without being completed, so this method does
/// not take a return value argument.
///
/// The new route, the route below the new route (if any), and the route above
/// the new route, are all notified (see [Route.didReplace],
/// [Route.didChangeNext], and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// This can be useful in combination with [removeRouteBelow] when building a
/// non-linear user experience.
///
/// The `T` type argument is the type of the return value of the new route.
/// {@endtemplate}
///
/// See also:
///
///  * [replaceRouteBelow], which is the same but identifies the route to be
///    removed by reference to the route above it, rather than directly.
///  * [restorableReplace], which adds a replacement route that can be
///    restored during state restoration.¿ñ}¿ñ}¿ñê¿ñû  ¿ñ® ¿ñ¡  ¿ñ ¿ñ›  ¿ñU¿ñV¿óFÉ¨¿ô¬Ç=/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route.
///
/// {@template flutter.widgets.navigator.restorableReplace}
/// Unlike [Route]s added via [replace], [Route]s added with this method are
/// restored during state restoration according to the rules outlined in the
/// "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.replace}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿ô‘¿ô‘¿ôÁ¿ôı  ¿ôˇ ¿ö  ¿ö!2¿öE  ¿öU¿ö^  ¿ô†¿ô°¿öˆá+¿°7Ö‚/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route. The route to be replaced is the one below the
/// given `anchorRoute`.
///
/// {@template flutter.widgets.navigator.replaceRouteBelow}
/// The old route must not be current visible, as this method skips the
/// animations and therefore the removal would be jarring if it was visible.
/// To replace the top-most route, consider [pushReplacement] instead, which
/// _does_ animate the new route, and delays removing the old route until the
/// new route has finished animating.
///
/// The removed route is removed without being completed, so this method does
/// not take a return value argument.
///
/// The new route, the route below the new route (if any), and the route above
/// the new route, are all notified (see [Route.didReplace],
/// [Route.didChangeNext], and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// The `T` type argument is the type of the return value of the new route.
/// {@endtemplate}
///
/// See also:
///
///  * [replace], which is the same but identifies the route to be removed
///    directly.
///  * [restorableReplaceRouteBelow], which adds a replacement route that can
///    be restored during state restoration.¿°I¿°I¿°\¿°j  ¿°t#¿°ç  ¿°ô¿°¨  ¿°¿°¿¢%Ñ:¿•Ç¨/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route. The route to be replaced is the one below the
/// given `anchorRoute`.
///
/// {@template flutter.widgets.navigator.restorableReplaceRouteBelow}
/// Unlike [Route]s added via [restorableReplaceRouteBelow], [Route]s added
/// with this method are restored during state restoration according to the
/// rules outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.replaceRouteBelow}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿•.¿•.¿•A¿•O  ¿•Y#¿•r  ¿•~2¿•¢  ¿•≤¿•ª  ¿§¿§Ò¿¶cÉ/¿®˙Çf/// Whether the navigator that most tightly encloses the given context can be
/// popped.
///
/// {@template flutter.widgets.navigator.canPop}
/// The initial route cannot be popped off the navigator, which implies that
/// this function returns true only if popping the navigator would not remove
/// the initial route.
///
/// If there is no [Navigator] in scope, returns false.
///
/// Does not consider anything that might externally prevent popping, such as
/// [PopEntry].
/// {@endtemplate}
///
/// See also:
///
///  * [Route.isFirst], which returns true for routes for which [canPop]
///    returns false. ¿©¿©   ¿©ñÜâ¿Ø£Ö¶/// Consults the current route's [Route.popDisposition] getter or
/// [Route.willPop] method, and acts accordingly, potentially popping the
/// route as a result; returns whether the pop request should be considered
/// handled.
///
/// {@template flutter.widgets.navigator.maybePop}
/// If the [RoutePopDisposition] is [RoutePopDisposition.pop], then the [pop]
/// method is called, and this method returns true, indicating that it handled
/// the pop request.
///
/// If the [RoutePopDisposition] is [RoutePopDisposition.doNotPop], then this
/// method returns true, but does not do anything beyond that.
///
/// If the [RoutePopDisposition] is [RoutePopDisposition.bubble], then this
/// method returns false, and the caller is responsible for sending the
/// request to the containing scope (e.g. by closing the application).
///
/// This method is typically called for a user-initiated [pop]. For example on
/// Android it's called by the binding for the system's back button.
///
/// The `T` type argument is the type of the return value of the current
/// route. (Typically this isn't known; consider specifying `dynamic` or
/// `Null`.)
/// {@endtemplate}
///
/// See also:
///
///  * [Form], which provides an `onWillPop` callback that enables the form
///    to veto a [pop] initiated by the app's back button.
///  * [ModalRoute], which provides a `scopedWillPopCallback` that can be used
///    to define the route's `willPop` method.¿Ø¨¿Ø¨¿Øø¿ØÕ  ¿Ø◊	¿Ø€  ¿Ø{¿Ø|¿∞#áå¿∑DÜ¶/// Pop the top-most route off the navigator that most tightly encloses the
/// given context.
///
/// {@template flutter.widgets.navigator.pop}
/// The current route's [Route.didPop] method is called first. If that method
/// returns false, then the route remains in the [Navigator]'s history (the
/// route is expected to have popped some internal state; see e.g.
/// [LocalHistoryRoute]). Otherwise, the rest of this description applies.
///
/// If non-null, `result` will be used as the result of the route that is
/// popped; the future that had been returned from pushing the popped route
/// will complete with `result`. Routes such as dialogs or popup menus
/// typically use this mechanism to return the value selected by the user to
/// the widget that created their route. The type of `result`, if provided,
/// must match the type argument of the class of the popped route (`T`).
///
/// The popped route and the route below it are notified (see [Route.didPop],
/// [Route.didComplete], and [Route.didPopNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPop]).
///
/// The `T` type argument is the type of the return value of the popped route.
///
/// The type of `result`, if provided, must match the type argument of the
/// class of the popped route (`T`).
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage for closing a route is as follows:
///
/// ```dart
/// void _close() {
///   Navigator.pop(context);
/// }
/// ```
/// {@end-tool}
///
/// A dialog box might be closed with a result:
///
/// ```dart
/// void _accept() {
///   Navigator.pop(context, true); // dialog returns true
/// }
/// ```¿∑H¿∑H¿∑[¿∑i  ¿∑s	¿∑w  ¿∑$¿∑%¿∑≥É•¿∫ÎÇ˘/// Calls [pop] repeatedly on the navigator that most tightly encloses the
/// given context until the predicate returns true.
///
/// {@template flutter.widgets.navigator.popUntil}
/// The predicate may be applied to the same route more than once if
/// [Route.willHandlePopInternally] is true.
///
/// To pop until a route with a certain name, use the [RoutePredicate]
/// returned from [ModalRoute.withName].
///
/// The routes are closed with null as their `return` value.
///
/// See [pop] for more details of the semantics of popping a route.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _logout() {
///   Navigator.popUntil(context, ModalRoute.withName('/login'));
/// }
/// ```
/// {@end-tool} ¿∫Ù¿ª  ¿ª
¿ª   ¿ª\Ñ€¿ø≈Ñ./// Immediately remove `route` from the navigator that most tightly encloses
/// the given context, and [Route.dispose] it.
///
/// {@template flutter.widgets.navigator.removeRoute}
/// The removed route is removed without being completed, so this method does
/// not take a return value argument. No animations are run as a result of
/// this method call.
///
/// The routes below and above the removed route are notified (see
/// [Route.didChangeNext] and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didRemove]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// The given `route` must be in the history; this method will throw an
/// exception if it is not.
///
/// Ongoing gestures within the current route are canceled.
/// {@endtemplate}
///
/// This method is used, for example, to instantly dismiss dropdown menus that
/// are up when the screen's orientation changes. ¿ø—¿øﬂ  ¿øÁ¿ø˜   ¿¿;Ñ‰¿ƒóÑ%/// Immediately remove a route from the navigator that most tightly encloses
/// the given context, and [Route.dispose] it. The route to be removed is the
/// one below the given `anchorRoute`.
///
/// {@template flutter.widgets.navigator.removeRouteBelow}
/// The removed route is removed without being completed, so this method does
/// not take a return value argument. No animations are run as a result of
/// this method call.
///
/// The routes below and above the removed route are notified (see
/// [Route.didChangeNext] and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didRemove]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// The given `anchorRoute` must be in the history and must have a route below
/// it; this method will throw an exception if it is not or does not.
///
/// Ongoing gestures within the current route are canceled.
/// {@endtemplate} ¿ƒ®¿ƒ∂  ¿ƒæ¿ƒŒ   ¿≈#Öÿ¿«ÓÇå/// The state from the closest instance of this class that encloses the given
/// context.
///
/// Typical usage is as follows:
///
/// ```dart
/// Navigator.of(context)
///   ..pop()
///   ..pop()
///   ..pushNamed('/settings');
/// ```
///
/// If `rootNavigator` is set to true, the state from the furthest instance of
/// this class is given instead. Useful for pushing contents above all
/// subsequent instances of [Navigator].
///
/// If there is no [Navigator] in the given `context`, this function will throw
/// a [FlutterError] in debug mode, and an exception in release mode.
///
/// This method can be expensive (it walks the element tree). ¿«ˆ¿»  ¿»¿»  ¿»'¿ ˇÑz¿ÕˆÇ≥/// The state from the closest instance of this class that encloses the given
/// context, if any.
///
/// Typical usage is as follows:
///
/// ```dart
/// NavigatorState? navigatorState = Navigator.maybeOf(context);
/// if (navigatorState != null) {
///   navigatorState
///     ..pop()
///     ..pop()
///     ..pushNamed('/settings');
/// }
/// ```
///
/// If `rootNavigator` is set to true, the state from the furthest instance of
/// this class is given instead. Useful for pushing contents above all
/// subsequent instances of [Navigator].
///
/// Will return null if there is no ancestor [Navigator] in the `context`.
///
/// This method can be expensive (it walks the element tree). ¿Œ¿Œ  ¿Œ¿Œ%  ¿Œ4¿œ}çI¿“|Ç∆/// Turn a route name into a set of [Route] objects.
///
/// This is the default value of [onGenerateInitialRoutes], which is used if
/// [initialRoute] is not null.
///
/// If this string starts with a `/` character and has multiple `/` characters
/// in it, then the string is split on those characters and substrings from
/// the start of the string up to each such character are, in turn, used as
/// routes to push.
///
/// For example, if the route `/stocks/HOOLI` was used as the [initialRoute],
/// then the [Navigator] would push the following routes on startup: `/`,
/// `/stocks`, `/stocks/HOOLI`. This enables deep linking while allowing the
/// application to maintain a predictable route history. ¿“ô¿“©  ¿“≥¿“ª   ¿‹ =¿‹Â   ¿‹ ¿‹À ¿Ï	U¿Ï,/// Placeholder for a route. ¿ÏB ¿ÏH¿ÏY       ¿Ï`¿ AÃ¿Ïf  ¿ÏîÉq ¿Ïî¿Ïü ¿Ï•
¿Ï´  ¿Ïπ%¿Ï”  ¿ÏÊ¿Ïı  ¿Ì¿Ì  .¿Ì+¿Ì1¿ÌV¿Ì=¿Ì2¿Ì3¿ÌO¿Ì@¿ÌE¿ÌF¿ÌR¿Ìb¿Ìh¿Ó|¿Ó<¿Ó¿Ìœ¿Ìù¿ÌÇ¿Ìu¿ÌÖ¿Ìî¿Ìï¿Ì∏¿Ì´¿Ìª¿Ì ¿ÌÀ¿ÌÍ¿Ì›¿ÌÌ¿Ì¸¿Ì˝¿Ó¿Ó¿Ó ¿Ó/¿Ó0¿ÓW¿ÓJ¿ÓZ¿Ói¿Ój¿Óï¿Óà¿Óó¿	&¿* ¿	¿
¿35¿R  ¿l¿w  ¿ÖÄß¿Òv/// The limit this route entry will attempt to pop in the case of route being
/// remove as a result of a page update.¿Ò)¿Ò1A¿ÒP ¿Ò_¿Òp¿Òq¿Òw¿Òá  ¿Òó<¿Ò™ ¿Ò«¿Ún¿Ú$ ¿ÚC¿ÚP¿Úb¿ÚQ¿Úc¿Úp¿Úd¿Úö8¿Ú≠ ¿Ú∆¿Ú˛¿Û  ¿¿  ¿£$¿® ¿√¿$)¿$ ¿$%
¿ÛLÇw¿ÛÓÄë/// Restoration ID to be used for the encapsulating route when restoration is
/// enabled for it or null if restoration cannot be enabled for it.   ¿bÄó¿k    ¿˝Äï¿    ¿ñU¿ü    ¿ÔÄ¶¿¯    ¿ôÄ´¿¢    ¿#L]¿#a   ¿#L¿#M¿#≠Q¿#¬   ¿#≠¿#Æ¿-NF¿-W    ¿-óÄì¿-õ  ¿-Æ
¿-¥   ¿ı«Ä˚¿ıÃ  ¿ı⁄¿ıÈ   ¿ˆ∆Å⁄¿ˆÀ  ¿ˆ◊!¿ˆ  ¿ˆ˙(¿˜   ¿¯§áP¿¯©  ¿¯∂!¿¯œ  ¿¯Ÿ¿¯Ë  ¿¯Û!¿˘  ¿˘(¿˘0   ¿ˇ¯Ñ_¿ˇ˝  ¿ ¿    ¿[ÑÅ¿èÅ /// Process the to-be-popped route.
///
/// A route can be marked for pop by transition delegate or Navigator.pop,
/// this method actually pops the route by calling Route.didPop.
///
/// Returns true if the route is popped; otherwise, returns false if the route
/// refuses to be popped. ¿õ!¿¥  ¿æ(¿ÿ   ¿‡Ä’¿Â    ¿	πÅÇ¿	æ  ¿	Œ!¿	Á  ¿	Ò(¿
   ¿?ÄÀ¿D  ¿M!¿f  ¿p¿   ¿(w¿- ¿1¿1¿4	¿8   ¿˚Å–¿   ¿	¿  ¿¿Å˝¿ ¿¿¿¿  ¿¿%  ¿1¿ÄÅ¿    ¿àÇA¿9Ä£/// Disposes this route entry and its [route] immediately.
///
/// This method does not wait for the widget subtree of the [route] to unmount
/// before disposing.   ¿Õâë¿Å//// Disposes this route entry and its [route].
///
/// This method waits for the widget subtree of the [route] to unmount before
/// disposing. If subtree is already unmounted, this method calls
/// [forcedDispose] immediately.
///
/// Use [forcedDispose] if the [route] need to be disposed immediately.   ¿ HÅq¿ M  ¿ h¿ y   ¿!ΩE¿!…  ¿!‹¿!È   ¿"o¿"  ¿"9¿"F   ¿"wM¿"É  ¿"ö¿"ß   ¿"»ÄÄ¿"‰  ¿"ı¿#   ¿$/G¿$4    ¿$zÅI¿$ã   ¿$z¿${¿%«ÅF¿%ÿ   ¿%«¿%»¿'É&¿'"  ¿'.¿'7  ¿'¿'¿*;Åò¿*L  ¿*]¿*f  ¿*;¿*<¿+◊Ås¿+Ë   ¿+◊¿+ÿ ¿..ÄÔ¿.=  ¿.WK ¿.W¿.l ¿.r¿.x  ¿.â¿.è   ¿.•!¿.∫  ¿. $¿.‡   ¿.Û(¿.¯  ¿.ˇ¿/    ¿/Å¿/%  ¿/aQ ¿/a¿/z ¿/Ä¿/á  ¿/ò¿/ü     ¿/∂m¿/«  ¿/Œ¿/·  ¿/∂¿/∑ ¿0'Å¿0-  ¿0hP ¿0h¿0Ä ¿0Ü¿0ç  ¿0û¿0•     ¿0ºl¿0Õ  ¿0‘¿0Á  ¿0º¿0Ω ¿1,Å¿12  ¿1pS ¿1p¿1ã ¿1ë¿1ò  ¿1©¿1∞     ¿1«o¿1ÿ  ¿1ﬂ¿1Ú  ¿1«¿1» ¿2:Å#¿2@  ¿2T ¿2¿2õ ¿2°¿2®  ¿2π¿2¿     ¿2◊ÄÑ¿2Ë  ¿2Ô¿3  ¿2◊¿2ÿ ¿3¢Ö˝¿4KÄ¢/// A collection of _RouteEntries representing a navigation history.
///
/// Acts as a ChangeNotifier and notifies after its List of _RouteEntries is
/// mutated. ¿4äÄ£ ¿4≥¿4ª&/// Creates an instance of [_History].  ¿510¿5I ¿5_¿5`¿5R¿5^¿5S¿9P¿9.   ¿9¿9		¿5fj¿5j  ¿5u¿5ä  ¿5ê¿5ï  ¿5ú¿5‘S¿5Ÿ  ¿5›¿5Í   ¿6+Äå¿60  ¿67¿6N   ¿6ªÄé¿6¿    ¿7Mk¿7R  ¿7Y	¿7^  ¿7d¿7q   ¿7ºÄÑ¿7»  ¿7—	¿7÷   ¿8Dz¿8P    ¿8¬B¿8◊  ¿8⁄	¿8ﬂ   ¿9\A¿9o   ¿9\¿9] ¿9°¿(Ë¿:t/// The state for a [Navigator] widget.
///
/// A reference to this class can be obtained by calling [Navigator.of].  ¿:x(¿:ï  ¿:§$¿:≥ ¿:æ¿:∆¿:«¿:ÕÅœ¿<kÅv/// A set for entries that are waiting to dispose until their subtrees are
/// disposed.
///
/// These entries are not considered to be in the _history and will usually
/// remove themselves from this set once they can dispose.
///
/// The navigator keep track of these entries so that, in case the navigator
/// itself is disposed, it can dispose these entries immediately.¿<ö¿<õ¿<ç¿<ô¿<é¿<†@¿<∑ ¿<Œ¿<ﬁ¿<ﬂ¿<‰[¿= ¿=!¿=&¿=<¿='¿==¿=>¿=C[¿=f ¿=Ä¿=Ö¿=õ¿=Ü¿=ú¿=ù¿=£~¿=Û=/// The [FocusNode] for the [Focus] that encloses the routes.¿=ˇ¿>¿> ¿>¿>	¿>¿>&¿>+ ¿>:¿>Ç(¿>í  ¿>Ø0¿>Ã  ¿KﬁS¿K˜ ¿L¿L)¿L-¿L*¿L.¿L0¿L/¿q¬¿qœ  ¿q‰¿qÏ  ¿r¿r ¿r"¿†=¿†B ¿†U¿L$¿L ¿L1¿N*Ä¢¿NíK/// Notifies its listeners if the value of [userGestureInProgress] changes.¿N≤¿Nø¿Nƒ¿N¿¿N≈¿NÀ¿N∆¿T(¿T ¿T2¿T3¿T-¿T1¿T.¿>‰C¿>Ì    ¿L6V¿L>    ¿WQC¿Wi   ¿WQ¿WR¿pêy¿pÂ@/// The overlay this navigator uses for its visual presentation.   ¿qÄ±¿q(    ¿KÀ@¿K”    ¿L6Äù¿L:  ¿LR	¿LW   ¿L◊ÅO¿MÈÄ˙/// Whether a route is currently being manipulated by the user, e.g.
/// as during an iOS back gesture.
///
/// See also:
///
///  * [userGestureInProgressNotifier], which notifies its listeners if
///    the value of [userGestureInProgress] changes.   A¿?+ÑÉ¿?0    ¿C≤Éb¿C∑    ¿GÉâ¿G)   ¿G¿G¿J◊Äƒ¿J‹    ¿Lêâ“¿L°  ¿LÆ¿L¬  ¿LÃ¿L“  ¿Lê¿Lë¿VfÄË¿Vw  ¿Vá¿Võ  ¿Vf¿Vg¿WòÄÚ¿W©   ¿Wò¿Wô¿XéÅJ¿XÀ5/// Dispose all lingering router entries immediately.   ¿Y‹Å¿YË  ¿Y˚¿Z  ¿Z¿Z   ¿Z˘ä¿Z˛  ¿[!¿[%   ¿eÄÚ¿e    ¿fÑê¿f  ¿f%¿f0  ¿f¿f¿jòÅf¿jù    ¿lÄÏ¿l   ¿l¿l¿lÚÅ¿m   ¿lÚ¿lÛ¿m¯Çî¿n	   ¿m¯¿m˘¿r+Æ¿r0    ¿†_öŒ¿†d  ¿†z¿†Ä  ¿†í¿ª1Ç;¿ª6    ¿ΩpÉñ¿Ωu    ¿¡
Ä¨¿¡  ¿¡'	¿¡,  ¿¡2¿¡H   ¿¡∫Ä¶¿¡æ  ¿¡Œ	¿¡”  ¿¡Ÿ¿¡Ô   ¿¬dÄÊ¿¬q  ¿¬Ä	¿¬Ö  ¿¬ã¿¬°   ¿√Nà:¿√Y ¿√e¿√e¿√h¿√p  ¿√w¿√â  ¿√ì¿√ô  ¿√§¿ÀåÇÓ¿Õ‹Ç/// Push a named route onto the navigator.
///
/// {@macro flutter.widgets.navigator.pushNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _aaronBurrSir() {
///   navigator.pushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamed], which pushes a route that can be restored
///    during state restoration.¿ÕÊ¿ÕÊ¿Õ˛¿Œ  ¿Œ¿Œ  ¿ÕΩ¿Õæ¿Œ~Ñ4¿–´ÅÈ/// Push a named route onto the navigator.
///
/// {@macro flutter.widgets.navigator.restorablePushNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openDetails() {
///   navigator.restorablePushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}¿–ø¿–ø¿–◊¿–ﬂ  ¿–Ô¿–¯  ¿–ê¿–ë¿“∂ÉÚ¿’ºÇ¥/// Replace the current route of the navigator by pushing the route named
/// [routeName] and then disposing the previous route once the new route has
/// finished animating in.
///
/// {@macro flutter.widgets.navigator.pushReplacementNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _startBike() {
///   navigator.pushReplacementNamed('/jouett/1781');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacementNamed], which pushes a replacement route that
///  can be restored during state restoration.¿’—¿’—¿’‰¿’‰¿’˝¿÷  ¿÷
¿÷  ¿÷%¿÷.  ¿’ù¿’û¿÷¨Ö)¿ŸÖÇë/// Replace the current route of the navigator by pushing the route named
/// [routeName] and then disposing the previous route once the new route has
/// finished animating in.
///
/// {@macro flutter.widgets.navigator.restorablePushReplacementNamed}
///
/// {@macro flutter.widgets.navigator.pushReplacementNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _startCar() {
///   navigator.restorablePushReplacementNamed('/jouett/1781');
/// }
/// ```
/// {@end-tool}¿Ÿ§¿Ÿ§¿Ÿ∑¿Ÿ∑¿Ÿ–¿Ÿÿ  ¿ŸË
¿ŸÌ  ¿Ÿ¯¿⁄  ¿Ÿj¿Ÿk¿€ŸÉ[¿ﬁdÇ;/// Pop the current route off the navigator and push a named route in its
/// place.
///
/// {@macro flutter.widgets.navigator.popAndPushNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _begin() {
///   navigator.popAndPushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePopAndPushNamed], which pushes a new route that can be
///    restored during state restoration.¿ﬁt¿ﬁt¿ﬁá¿ﬁá¿ﬁ†¿ﬁ®  ¿ﬁ∏
¿ﬁΩ  ¿ﬁ»¿ﬁ—  ¿ﬁE¿ﬁF¿ﬂ8ÉD¿·õÇ/// Pop the current route off the navigator and push a named route in its
/// place.
///
/// {@macro flutter.widgets.navigator.restorablePopAndPushNamed}
///
/// {@macro flutter.widgets.navigator.popAndPushNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _end() {
///   navigator.restorablePopAndPushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}¿·µ¿·µ¿·»¿·»¿··¿·È  ¿·˘
¿·˛  ¿‚	¿‚  ¿·Ä¿·Å¿‚ÄÉÈ¿ÂÄÇ∞/// Push the route with the given name onto the navigator, and then remove all
/// the previous routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.pushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _handleOpenCalendar() {
///   navigator.pushNamedAndRemoveUntil('/calendar', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamedAndRemoveUntil], which pushes a new route that can
///    be restored during state restoration.¿Âò¿Âò¿Â∞¿Â∏  ¿Â…¿ÂŸ  ¿ÂÈ¿ÂÚ  ¿Âa¿Âb¿ÊmÖ&¿ÈAÇé/// Push the route with the given name onto the navigator, and then remove all
/// the previous routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.restorablePushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openCalendar() {
///   navigator.restorablePushNamedAndRemoveUntil('/calendar', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}¿Èc¿Èc¿È{¿ÈÉ  ¿Èî¿È§  ¿È¥¿ÈΩ  ¿È&¿È'¿ÎóÉ¿ÓÇ'/// Push the given route onto the navigator.
///
/// {@macro flutter.widgets.navigator.push}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openPage() {
///   navigator.push<void>(
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyPage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePush], which pushes a route that can be restored during
///    state restoration.¿Ó¿Ó¿Ó(¿Ó2  ¿ÌÒ¿ÌÚ¿Ó¥ÅS¿Óπ  ¿Ó–¿Ó⁄   ¿ÑÅ¿Ú	Åƒ/// Push a new route onto the navigator.
///
/// {@macro flutter.widgets.navigator.restorablePush}
///
/// {@macro flutter.widgets.navigator.push}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator_state.restorable_push.0.dart **
/// {@end-tool}¿Ú¿Ú¿Ú+&¿ÚF  ¿ÚT¿Ú]  ¿ÒÓ¿ÒÔ¿ÙêÅê¿Ùï  ¿Ù†¿Ù≠   ¿ˆ$Ö%¿ˆ)  ¿ˆ:¿ˆK   ¿˚MÑJ¿˛|ÇŸ/// Replace the current route of the navigator by pushing the given route and
/// then disposing the previous route once the new route has finished
/// animating in.
///
/// {@macro flutter.widgets.navigator.pushReplacement}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _doOpenPage() {
///   navigator.pushReplacement<void, void>(
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyHomePage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacement], which pushes a replacement route that can
///    be restored during state restoration.¿˛å¿˛å¿˛ü¿˛ü¿˛≥¿˛Ω  ¿˛»
¿˛Õ  ¿˛]¿˛^¿ˇõÖg¿8Ç_/// Replace the current route of the navigator by pushing a new route and
/// then disposing the previous route once the new route has finished
/// animating in.
///
/// {@macro flutter.widgets.navigator.restorablePushReplacement}
///
/// {@macro flutter.widgets.navigator.pushReplacement}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator_state.restorable_push_replacement.0.dart **
/// {@end-tool}¿R¿R¿e¿e¿y&¿î  ¿£
¿®  ¿Ø¿∏  ¿¿¿Ç¶¿ ¿!¿!¿5¿B  ¿H
¿M   ¿∞ÑR¿
¬Çæ/// Push the given route onto the navigator, and then remove all the previous
/// routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.pushAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _resetAndOpenPage() {
///   navigator.pushAndRemoveUntil<void>(
///     MaterialPageRoute<void>(builder: (BuildContext context) => const MyHomePage()),
///     ModalRoute.withName('/'),
///   );
/// }
/// ```
/// {@end-tool}
///
///
/// See also:
///
///  * [restorablePushAndRemoveUntil], which pushes a route that can be
///    restored during state restoration.¿
’¿
’¿
Ë¿
Ú  ¿
˚¿  ¿
£¿
§¿ÖJ¿ÉÇA/// Push a new route onto the navigator, and then remove all the previous
/// routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.restorablePushAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator_state.restorable_push_and_remove_until.0.dart **
/// {@end-tool}¿†¿†¿≥)¿Œ  ¿ﬁ¿Ó  ¿˘¿  ¿h¿i¿TÇµ¿Y  ¿r¿  ¿Ö¿ï   ¿Ç»¿¬Åá/// Replaces a route on the navigator with a new route.
///
/// {@macro flutter.widgets.navigator.replace}
///
/// See also:
///
///  * [replaceRouteBelow], which is the same but identifies the route to be
///    removed by reference to the route above it, rather than directly.
///  * [restorableReplace], which adds a replacement route that can be
///    restored during state restoration.¿ ¿ ¿ﬂ ¿¯  ¿¿  ¿©¿™¿ŸÑO¿3Å,/// Replaces a route on the navigator with a new route.
///
/// {@macro flutter.widgets.navigator.restorableReplace}
///
/// {@macro flutter.widgets.navigator.replace}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿E¿E¿Z ¿s  ¿|2¿†  ¿∞¿π  ¿¿¿,ÉÑ¿1  ¿?¿L  ¿R¿b   ¿¥É¿ åÅ®/// Replaces a route on the navigator with a new route. The route to be
/// replaced is the one below the given `anchorRoute`.
///
/// {@macro flutter.widgets.navigator.replaceRouteBelow}
///
/// See also:
///
///  * [replace], which is the same but identifies the route to be removed
///    directly.
///  * [restorableReplaceRouteBelow], which adds a replacement route that can
///    be restored during state restoration.¿ û¿ û¿ ≥#¿ Ã  ¿ ÿ¿ Î  ¿ s¿ t¿!…Ñƒ¿#ÄÅá/// Replaces a route on the navigator with a new route. The route to be
/// replaced is the one below the given `anchorRoute`.
///
/// {@macro flutter.widgets.navigator.restorableReplaceRouteBelow}
///
/// {@macro flutter.widgets.navigator.replaceRouteBelow}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿#ú¿#ú¿#±#¿#   ¿#÷2¿#˙  ¿$
¿$  ¿#e¿#f¿&ëÉX¿&ñ  ¿&©¿&∂  ¿&º¿&Ã   ¿)ÌÉ¿*“Äœ/// Whether the navigator can be popped.
///
/// {@macro flutter.widgets.navigator.canPop}
///
/// See also:
///
///  * [Route.isFirst], which returns true for routes for which [canPop]
///    returns false.   ¿,ÙÜ÷¿/GÇ/// Consults the current route's [Route.popDisposition] method, and acts
/// accordingly, potentially popping the route as a result; returns whether
/// the pop request should be considered handled.
///
/// {@macro flutter.widgets.navigator.maybePop}
///
/// See also:
///
///  * [Form], which provides a [Form.canPop] boolean that enables the
///    form to prevent any [pop]s initiated by the app's back button.
///  * [ModalRoute], which provides a `scopedOnPopCallback` that can be used
///    to define the route's `willPop` method.¿/P¿/P¿/e	¿/i  ¿/&¿/'¿3ŒÜ<¿5ÁÅœ/// Pop the top-most route off the navigator.
///
/// {@macro flutter.widgets.navigator.pop}
///
/// {@tool snippet}
///
/// Typical usage for closing a route is as follows:
///
/// ```dart
/// void _handleClose() {
///   navigator.pop();
/// }
/// ```
/// {@end-tool}
/// {@tool snippet}
///
/// A dialog box might be closed with a result:
///
/// ```dart
/// void _handleAccept() {
///   navigator.pop(true); // dialog returns true
/// }
/// ```
/// {@end-tool}¿5Î¿5Î¿6 	¿6  ¿5Œ¿5œ¿:Çè¿;[Å+/// Calls [pop] repeatedly until the predicate returns true.
///
/// {@macro flutter.widgets.navigator.popUntil}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _doLogout() {
///   navigator.popUntil(ModalRoute.withName('/login'));
/// }
/// ```
/// {@end-tool} ¿;d¿;t   ¿<°Ç⁄¿=.ÄÅ/// Immediately remove `route` from the navigator, and [Route.dispose] it.
///
/// {@macro flutter.widgets.navigator.removeRoute} ¿=:¿=J   ¿?ÑD¿@YÄÃ/// Immediately remove a route from the navigator, and [Route.dispose] it. The
/// route to be removed is the one below the given `anchorRoute`.
///
/// {@macro flutter.widgets.navigator.removeRouteBelow} ¿@j¿@z   ¿C«áO¿F@Ç]/// Complete the lifecycle for a route that has been popped off the navigator.
///
/// When the navigator pops a route, the navigator retains a reference to the
/// route in order to call [Route.dispose] if the navigator itself is removed
/// from the tree. When the route is finished with any exit animation, the
/// route should call this function to complete its lifecycle (e.g., to
/// receive a call to [Route.dispose]).
///
/// The given `route` must have already received a call to [Route.didPop].
/// This function may be called directly from [Route.didPop] if [Route.didPop]
/// will return true. ¿FN¿F^   ¿KÄ≠¿K8 ¿KF¿KF¿KI	¿KQ  ¿K¿K¿N—Én¿OùÄº/// The navigator is being controlled by a user gesture.
///
/// For example, called when the user beings an iOS back gesture.
///
/// When the gesture finishes, call [didStopUserGesture].   ¿RCÅ≈¿S ÄØ/// A user gesture completed.
///
/// Notifies the navigator that a gesture regarding which the navigator was
/// previously notified with [didStartUserGesture] has completed.   ¿T9]¿T>  ¿TQ¿Tc   ¿Töb¿Tü  ¿T∏¿T∆   ¿U É"¿U    ¿X&Å¿XÄJ/// Gets first route entry satisfying the predicate, or null if not found. ¿Xú¿X≤   ¿YDÅ5¿YùI/// Gets last route entry satisfying the predicate, or null if not found. ¿Y∏¿YŒ   ¿Z}à
¿Zê  ¿Zñ¿Z§  ¿Z}¿Z~ ¿b¡Üƒ¿b–  ¿bÏ# ¿bÏ¿c ¿c	¿c
   ¿cÄ´¿c1¿c2¿c7 ¿c>¿cO  ¿cX¿cj  ¿cx¿cÜ   ¿c¿Ä‘¿cﬂ¿c‡¿cÈ ¿c5¿d  ¿d+¿d=  ¿dK¿dY   ¿dòÇ¿d∑¿d∏¿dÃ ¿dÕ¿d’   ¿fÆ ¿f   ¿f¿f¯  ¿f“¿f⁄    ¿g¿g    ¿g0v¿g7    ¿g™^¿g»   ¿g™¿g´¿hB¿h(  ¿h4¿hD  ¿h¿h¿hRÅ1¿h^  ¿hk¿h{  ¿hÜ2¿hó  ¿h•¿h¥¿hµ ¿iáÉ¿iç  ¿iŒÄ§ ¿iŒ¿iÍ ¿iÒ¿j   ¿j	¿j  ¿j& ¿j5  ¿jO¿jT¿jp¿jU¿jj¿jk¿jvÅ¿jí¿jì¿jß ¿j®¿j∑  (¿jƒ¿j ¿j⁄¿j◊¿jÀ¿jœ¿j–¿jŸ¿j¯¿jÂ¿k¿k¿j˛¿k ¿j˙¿jˇ¿k¿k¿k¿k#¿k!¿k¿k ¿k¿k¿k&¿k@¿k6¿kB¿kF¿kG¿kV¿kX¿kW¿kc¿kh¿kÑ¿ki¿k~¿k¿lb(¿lx ¿lb¿lc¿lé¿lõ  ¿l£¿l±   ¿käÄ‘¿k£   ¿kä¿kã¿løÄ∂¿l⁄  ¿lÊ¿lˆ  ¿lø¿l¿ ¿myÖÃ¿m  ¿mƒÄ¥ ¿mƒ¿m‰ ¿mÎ¿m˙  ¿n¿n  ¿n( ¿n7  ¿nQ¿nV¿nv¿nW¿nl¿nm¿n|ÅÉ¿nú¿nù¿n± ¿n≤¿n¡  9¿nŒ¿n‘¿n‰¿n·¿n’¿nŸ¿n⁄¿n„¿o¿nÔ¿o¿o¿o¿o
¿o¿o	¿o¿o*¿o¿oà¿oÜ¿o,¿o.¿o/¿o>¿o?¿oT¿oÖ¿oU¿oW¿oX¿of¿og¿ot¿oÑ¿o~¿o|¿oy¿o{¿ou¿oz¿oÅ¿oã¿oµ¿o´¿o∑¿oª¿oº¿oÀ¿oÕ¿oÃ¿oÿ¿o›¿o˝¿oﬁ¿oÛ¿oÙ¿r(¿r4 ¿r¿r¿rJ2¿rp  ¿rÄ¿ré  ¿pÄû¿pâ   ¿p¿p¿p•Åu¿pæ   ¿p•¿p¶¿rúÄß¿r∑  ¿r√¿r”  ¿rú¿rù ¿sGï$¿sM   ¿sﬁ1¿s˙  ¿Ç¯2¿É    ¿àA(¿àV   ¿àA¿àB	¿t$äÛ¿t)  ¿t0¿t:   ¿Å¿   ¿4¿B  ¿M¿[  ¿d'¿Ä  ¿ë¿ü   ¿ÅÅ,¿Å  ¿Å$¿Å@  ¿ÅB¿Å^   ¿Ç?Ä¢¿ÇD    ¿É.ÇÑ¿É@  ¿ÉV¿Éd  ¿Éi¿Éy   ¿Ö⁄S¿Ü   ¿Ö⁄¿Ö€¿Ü1ÅP¿ÜY  ¿Üh¿Üq  ¿Ü1¿Ü2¿áÖj¿áñ  ¿á§!¿á¡  ¿áÖ¿áÜ¿áÛJ¿à   ¿áÛ¿áÙ ¿åqî¿íËÜp/// Gives access to a [Route] object and its return value that was added to a
/// navigator via one of its "restorable" API methods.
///
/// When a [State] object wants access to the return value of a [Route] object
/// it has pushed onto the [Navigator], a [RestorableRouteFuture] ensures that
/// it will also have access to that value after state restoration.
///
/// To show a new route on the navigator defined by the [navigatorFinder], call
/// [present], which will invoke the [onPresent] callback. The [onPresent]
/// callback must add a new route to the navigator provided to it using one
/// of the "restorable" API methods. When the newly added route completes, the
/// [onComplete] callback executes. It is given the return value of the route,
/// which may be null.
///
/// While the route added via [present] is shown on the navigator, it can be
/// accessed via the [route] getter.
///
/// If the property is restored to a state in which [present] had been called on
/// it, but the route has not completed yet, the [RestorableRouteFuture] will
/// obtain the restored route object from the navigator again and call
/// [onComplete] once it completes.
///
/// The [RestorableRouteFuture] can only keep track of one active [route].
/// When [present] has been called to add a route, it may only be called again
/// after the previously added route has completed.
///
/// {@tool dartpad}
/// This example uses a [RestorableRouteFuture] in the `_MyHomeState` to push a
/// new `MyCounter` route and to retrieve its return value.
///
/// ** See code in examples/api/lib/widgets/navigator/restorable_route_future.0.dart **
/// {@end-tool}¿í˛¿í˛¿ì)Ä¨ ¿ìR¿ìg&/// Creates a [RestorableRouteFuture].¿ìn.¿ìt  ¿ì¢¿ì±  ¿ìø¿ì≈  ¿ìÖ¿ìŸÅ
¿î‘Ä÷/// A callback that given the [BuildContext] of the [State] object to which
/// this property is registered returns the [NavigatorState] of the navigator
/// to which the route instantiated in [onPresent] is added. ¿îËÇ:¿óÅ¸/// A callback that add a new [Route] to the provided navigator.
///
/// The callback must use one of the API methods on the [NavigatorState] that
/// have "restorable" in their name (e.g. [NavigatorState.restorablePush],
/// [NavigatorState.restorablePushNamed], etc.) and return the opaque ID
/// returned by those methods.
///
/// This callback is invoked when [present] is called with the `arguments`
/// Object that was passed to that method and the [NavigatorState] obtained
/// from [navigatorFinder]. ¿ó'Ä ¿óÁÄï/// A callback that is invoked when the [Route] added via [onPresent]
/// completes.
///
/// The return value of that route is passed to this method. ¿õS¿õ]  ¿ù¿ù ¿ù¿ö ÄΩ¿ö¢Äí/// Whether the [Route] created by [present] is currently shown.
///
/// Returns true after [present] has been called until the [Route] completes.   ¿ö¡Äè¿õ@j/// The route that [present] added to the Navigator.
///
/// Returns null when currently no route is shown   ¿ù∑H¿ùÃ   ¿ù∑¿ù∏¿û~¿û    ¿óˆÇ¿ô1Å)/// Shows the route created by [onPresent] and invoke [onComplete] when it
/// completes.
///
/// The `arguments` object is passed to [onPresent] and can be used to
/// customize the route. It must be serializable via the
/// [StandardMessageCodec]. Often, a [Map] is used to pass key-value pairs. ¿ô:¿ôC   ¿õh1¿õ|   ¿õh¿õi¿õùu¿õÆ  ¿õº¿õ≈  ¿õù¿õû¿úÄÑ¿ú*   ¿ú¿ú¿úûk¿ú±  ¿ú¿¿ú…  ¿úû¿úü¿ù(Äã¿ù9   ¿ù(¿ù)¿ûÖÅ¶¿ûä  ¿ûü	¿ûß   ¿†/]¿†E  ¿†]¿†k    ¿†êÇÈ¿°ÀÅ4/// A notification that a change in navigation has taken place.
///
/// Specifically, this notification indicates that at least one of the following
/// has occurred:
///
///  * That route stack of a [Navigator] has changed in any way.
///  * The ability to pop has changed, such as controlled by [PopScope]. ¿°˚Äé ¿¢K¿¢aG/// Creates a notification that some change in navigation has happened.¿¢h¿¢w   ¿¢çÄÅ¿£e/// Indicates that the originator of this [Notification] is capable of
/// handling a navigation pop.  ¿£d¿£&   ¿£¿£  è◊É@ê¿Ä„/// Indicates whether the current route should be popped.
///
/// Used as the return value for [Route.willPop].
///
/// See also:
///
///  * [WillPopScope], a widget that hooks into the route's [Route.willPop]
///    mechanism.  êÿÄûësÄí/// Pop the route.
///
/// If [Route.willPop] or [Route.popDisposition] return [pop] then the back
/// button will actually pop the current route. ë{ÄõíÄä/// Do not pop the route.
///
/// If [Route.willPop] or [Route.popDisposition] return [doNotPop] then the
/// back button will be ignored. íÄ˘ìÄË/// Delegate this to the next level of navigation.
///
/// If [Route.willPop] or [Route.popDisposition] return [bubble] then the back
/// button will be handled by the [SystemNavigator], which will usually close
/// the application.    ¿ÂÜæ¿Â   ¿Â ¿Â   ¿Â°¿Â°  ¿Ê¿Ê  ¿Êù¿Êù  ¿Êˆ¿Êˆ  ¿Á]¿Á]  ¿Á°¿Á°  ¿Ë¿Ë  ¿Ëª¿Ëª  ¿Ëﬂ¿Ëﬂ  ¿È¿È  ¿ÈÆ¿ÈÆ  ¿Í¿Í  ¿Í±¿Í±  ¿ÍÂ	¿ÍÂ  ¿Îú¿Îú     ¿bã4¿bê   ¿b™¿b™  ¿b≥	¿b≥          ÜÄ˘Ü»Ä∞/// Creates a route for the given route settings.
///
/// Used by [Navigator.onGenerateRoute].
///
/// See also:
///
///  * [Navigator], which is where all the [Route]s end up.  ÜÜˇ   á
Ä…ás`/// Creates a series of one or more routes.
///
/// Used by [Navigator.onGenerateInitialRoutes].  á§á¥  áæá∆   á’ÇóäÇ7/// Creates a [Route] that is to be added to a [Navigator].
///
/// The route can be configured with the provided `arguments`. The provided
/// `context` is the `BuildContext` of the [Navigator] to which the route is
/// added.
///
/// Used by the restorable methods of the [Navigator] that add anonymous routes
/// (e.g. [NavigatorState.restorablePush]). For this use case, the
/// [RestorableRouteBuilder] must be static function annotated with
/// `@pragma('vm:entry-point')`. The [Navigator] will call it again during
/// state restoration to re-create the route.ä,ä, äCäQ  äYäb   än|äµ>/// Signature for the [Navigator.popUntil] predicate argument.  ä‘ä‰   äÏÅzå<Ä€/// Signature for a callback that verifies that it's OK to call [Navigator.pop].
///
/// Used by [Form.onWillPop], [ModalRoute.addScopedWillPopCallback],
/// [ModalRoute.removeScopedWillPopCallback], and [WillPopScope].   ã»ã…ã”å2ã◊ã¸åhÅ›çˇÅé/// Signature for the [Navigator.onPopPage] callback.
///
/// This callback must call [Route.didPop] on the specified route and must
/// properly update the pages list the next time it is passed into
/// [Navigator.pages] so that it no longer includes the corresponding [Page].
/// (Otherwise, the page will be interpreted as a new page to show when the
/// [Navigator.pages] list is next updated.)  éé/  é5é>   éGÅéèõÅK/// Signature for the [Navigator.onDidRemovePage] callback.
///
/// This must properly update the pages list the next time it is passed into
/// [Navigator.pages] so that it no longer includes the input `page`.
/// (Otherwise, the page will be interpreted as a new page to show when the
/// [Navigator.pages] list is next updated.)  è¡è–   ¿Î«@¿Îœ   ¿ÎÙ¿Ï   ¿3_A¿3g   ¿3ã¿3ò   ¿àmÅ¿â7Ä¡/// A callback that given a [BuildContext] finds a [NavigatorState].
///
/// Used by [RestorableRouteFuture.navigatorFinder] to determine the navigator
/// to which a new route should be added.  ¿âi¿âw   ¿âÅÅ—¿ä˘Åo/// A callback that given some `arguments` and a `navigator` adds a new
/// restorable route to that `navigator` and returns the opaque ID of that
/// new route.
///
/// Usually, this callback calls one of the imperative methods on the Navigator
/// that have "restorable" in the name and returns their return value.
///
/// Used by [RestorableRouteFuture.onPresent].  ¿ã%¿ã5  ¿ã?¿ãH   ¿ãTÅ¿å:Ä›/// A callback to handle the result of a completed [Route].
///
/// The return value of the route (which can be null for e.g. void routes) is
/// passed to the callback.
///
/// Used by [RestorableRouteFuture.onComplete].¿åR¿åR ¿åe¿åh    Ñ∑MÑ∆ ÑÈÑÒÖÑ˛ÑÚÖ ¿  gÄÈ¿ À
ÄÜ/// The default value of [Navigator.routeTraversalEdgeBehavior].
///
/// {@macro flutter.widgets.navigator.routeTraversalEdgeBehavior}¿ À/¿ ÀD¿ ÀE   ÄÆ  package:flutter/cupertino.dart  Äﬂ  package:flutter/material.dart  Å  app.dart  Å.  	form.dart  ÅJ  
pages.dart  Åg  pop_scope.dart  Åà  router.dart  Å¶  will_pop_scope.dart ò* <ÄÜÄ§Ä•Ä÷ÅÅ
Å%ÅAÅ^ÅÅùÅ√ÅÃÅÕÅ‚Å¸ÇÇ9ÇQÇRÇ|Ç•ÇŒÇˆÇ˜ÉÉ#É@É[ÉzÉìÉ©ÉŒÉÂÑ Ñ&Ñ<Ñ[Ñ\Ñ∑ÖÖÖÖCÖhÖŒÖÜÜÜAÜEÜnÜrÜÄÜÑÜ¿á	á
á6á:áká‘á’àààaàÆàπàΩââPâîâﬂäämänä≠äÎäÏã=ãAãÜã»ã’ã˙å2å4ågåhåûå¢åÌç0ç~ç ç˜éFéGéÉéáé‘èèfèìè÷è◊êêêGêKêYê]ê©êªê÷êÎêÒë?ëqëxëyëïëõëÈííííNíTí•íıìììììSìWì¢ìÒî@îdîhîÆî◊î€ï*ïLïPïüïÂñ2ñzñ óóóGóóó∫óÓòòò_òsòyòÀòﬂòÈôôôTôzô¶ôÂöö7öMöVö\ö`öaö∫ö¿õõiõÜõáõπõËúúú*ú0úWú]ú®úÂùù
ùZù•ùÔû9û]ûàû£û§û⁄û€ü,ü>üDüêü¶ü¨ü˚†K†ô†È°8°k°µ¢¢	¢=¢a¢Ä¢û¢§¢®¢©¢Û£(£W£[£\£Ö£ã£⁄§§§k§z§Ä§Ã§Ò•4•5•q•w•…¶¶b¶¶å¶ù¶≤¶≥¶˝ßßKßQßûßﬂßÂ®4®c®p®Å®ú®÷®©-©5©=©A©B©â©è©€™™™e™î™°™≤™ƒ™‹´-´{´ ¨¨:¨C¨ó¨Í≠9≠k≠ü≠ÒÆDÆñÆÊØ8ØàØπØƒ∞∞b∞ï∞“∞‹∞‚∞Ê∞Á±6±<±ã±∫±«±ÿ≤≤	≤Y≤Å≤á≤◊≤ı≤˚≥F≥≥ ¥¥e¥¢¥®¥Ëµµµ`µéµîµ§µ™µı∂	∂V∂l∂{∂û∂ÿ∂‹∑∑W∑[∑\∑¨∑‘∑⁄∏*∏i∏ö∏†∏Îπ$πoπª∫
∫G∫M∫ç∫∞∫∂ªª3ª9ªIªOªòªËº*ºUºmº©º√ºº¯º˛ΩIΩMΩNΩzΩÄΩŒææTæcæìæŒæ“æˆæ˜ø:øfølø∫¿ @
¿ @@¿ @U¿ @f¿ @û¿ @∂¿ @Ê¿ A¿ A¿ A¿ A¿ AM¿ Az¿ A{¿ A≈¿ B¿ B¿ B\¿ BÉ¿ B£¿ B§¿ BÔ¿ Bı¿ CD¿ Cì¿ C®¿ CŸ¿ D¿ D¿ DL¿ DM¿ Dî¿ D‡¿ E-¿ Ey¿ Eï¿ Eõ¿ EË¿ F6¿ FÜ¿ F—¿ G!¿ G:¿ G@¿ Gê¿ G‡¿ H¿ H"¿ Hq¿ Hä¿ Hõ¿ H∂¿ Hœ¿ H‡¿ H‰¿ HÂ¿ I3¿ I9¿ Im¿ I∫¿ J¿ J(¿ J.¿ J{¿ JÃ¿ K¿ K¿ KR¿ K†¿ KÒ¿ L9¿ LF¿ LW¿ Lw¿ L¨¿ L∞¿ L±¿ L˙¿ M¿ M¿ M`¿ Mx¿ MÖ¿ Mñ¿ M∆¿ M«¿ N	¿ N¿ N_¿ NØ¿ Nı¿ O¿ O¿ On¿ Oç¿ Oö¿ O´¿ Oﬂ¿ O‡¿ P&¿ P,¿ Px¿ P»¿ Q¿ Q3¿ Q9¿ QÜ¿ Q©¿ Q∂¿ Q«¿ R¿ R¿ RG¿ RM¿ Ró¿ RË¿ S9¿ Sr¿ Sx¿ Sà¿ Sé¿ Sÿ¿ T¿ T#¿ T4¿ TV¿ TW¿ T£¿ T¿ Tˆ¿ U+¿ U|¿ Uø¿ V¿ VF¿ Vç¿ V ¿ V–¿ W¿ Wb¿ W©¿ W‚¿ WË¿ X,¿ XF¿ XL¿ X\¿ Xb¿ X≤¿ Xœ¿ X‹¿ XÌ¿ Y¿ Y¿ YA¿ YG¿ Yò¿ Y…¿ Yœ¿ Z¿ Z.¿ Z4¿ ZÅ¿ Zœ¿ [¿ [/¿ [<¿ [O¿ [f¿ [â¿ [´¿ [◊¿ \%¿ \+¿ \/¿ \0¿ \q¿ \w¿ \¨¿ \√¿ \·¿ \ı¿ \˚¿ ]n¿ ]ì¿ ]ß¿ ]≠¿ ]Ÿ¿ ]›¿ ]ﬁ¿ ^)¿ ^/¿ ^¿ ^∑¿ ^Ã¿ ^Í¿ ^˛¿ _¿ _x¿ _ù¿ _±¿ _∑¿ _„¿ _Á¿ _Ë¿ `0¿ `=¿ `^¿ `|¿ `ê¿ `ñ¿ `“¿ `Û¿ a	¿ a¿ aD¿ aY¿ aa¿ ag¿ ay¿ a}¿ a~¿ a¨¿ a≤¿ b¿ bR¿ bé¿ bî¿ bÊ¿ c:¿ cë¿ cß¿ d¿ d¿ d¿ d¿ dS¿ d^¿ dt¿ d°¿ dπ¿ d»¿ d‹¿ d‚¿ d„¿ e¿ e¿ eA¿ eW¿ eX¿ eÇ¿ eà¿ eÿ¿ eÛ¿ eÙ¿ f ¿ fx¿ fz¿ f{¿ f©¿ f≠¿ fˆ¿ g=¿ gA¿ gÖ¿ gâ¿ gù¿ gÈ¿ g˝¿ h¿ hI¿ hY¿ h]¿ hk¿ ho¿ h¿¿ h–¿ hˇ¿ i:¿ iI¿ iW¿ ig¿ i|¿ iî¿ i¨¿ iﬂ¿ iÂ¿ iÊ¿ j/¿ j0¿ jY¿ j_¿ jü¿ j∂¿ j∑¿ k¿ k¿ k¿ kn¿ kt¿ kÑ¿ kä¿ k◊¿ kÈ¿ l¿ l	¿ lG¿ lM¿ lù¿ l„¿ m¿ m¿ mY¿ m°¿ mÒ¿ n+¿ na¿ nb¿ n£¿ n©¿ nÙ¿ o¿ o¿ oa¿ o≠¿ o⁄¿ oÔ¿ o¿ p.¿ p4¿ pÉ¿ pê¿ p∏¿ pÁ¿ q¿ q¿ q	¿ qB¿ qH¿ qû¿ q©¿ q◊¿ qÿ¿ q‰¿ r<¿ r>¿ r?¿ r}¿ ró¿ r”¿ s	¿ s
¿ sR¿ s°¿ s€¿ t¿ tc¿ t´¿ tˆ¿ u@¿ u`¿ u∞¿ u±¿ u◊¿ u›¿ v(¿ vI¿ vë¿ ví¿ v∏¿ væ¿ w¿ w%¿ wl¿ wm¿ wî¿ wö¿ wÂ¿ x¿ x¿ x\¿ xß¿ x˜¿ y¿ y`¿ ya¿ yú¿ yÍ¿ yÎ¿ z¿ z¿ zf¿ zµ¿ zˆ¿ z¸¿ {L¿ {ù¿ {Ë¿ |;¿ |<¿ |~¿ |Ñ¿ |”¿ }¿ }b¿ }c¿ }†¿ }¶¿ }‚¿ ~¿ ~¿ ~¿ ~8¿ ~<¿ ~Ö¿ ~”¿  ¿ $¿ s¿ √¿ Ä¿ ÄX¿ Äå¿ Ä√¿ Ä·¿ Ä¿ Å¿ Å7¿ Å=¿ Å>¿ Åè¿ Åú¿ Åø¿ ÅŒ¿ ÅË¿ Ç¿ Ç¿ Ç@¿ Çd¿ Çe¿ Ç±¿ ÇŸ¿ Çﬂ¿ É!¿ É`¿ Éf¿ Év¿ É|¿ ÉÀ¿ Ñ¿ Ñ;¿ Ñ§¿ Ñ¡¿ Ñ≈¿ Ñ∆¿ Ö¿ Ö"¿ Ö(¿ Öx¿ Öú¿ Ö¢¿ Ö‰¿ Ü¿ Ü¿ Ü(¿ Ü.¿ Üz¿ Üæ¿ ÜÒ¿ á*¿ á:¿ áZ¿ áv¿ áŒ¿ á¯¿ àM¿ àü¿ à¿ â%¿ âI¿ âa¿ âl¿ ât¿ âá¿ âë¿ â©¿ â≠¿ âÆ¿ â∫¿ âı¿ ä$¿ ä(¿ ä*¿ ä+¿ äz¿ äƒ¿ äÎ¿ ã¿ ã,¿ ã-¿ ã~¿ ãÑ¿ ã‘¿ å¿ åC¿ ål¿ åm¿ åΩ¿ å√¿ ç¿ ç]¿ çÅ¿ ç©¿ ç™¿ ç‡¿ çÊ¿ é3¿ éô¿ éË¿ é˛¿ éˇ¿ è7¿ è=¿ èä¿ è¿ êA¿ êV¿ êW¿ êç¿ êì¿ êﬂ¿ ë0¿ ëN¿ ës¿ ët¿ ë∞¿ ë∂¿ í¿ íO¿ íù¿ í«¿ í»¿ ì¿ ì¿ ìT¿ ì¢¿ ìﬂ¿ ì˜¿ ì˘¿ ì˙¿ îK¿ îs¿ îw¿ î∆¿ ï¿ ï¿ ïh¿ ïl¿ ïÄ¿ ïœ¿ ñ¿ ñ?¿ ñC¿ ñO¿ ñö¿ ñ™¿ ñ⁄¿ ó¿ ó|¿ ó·¿ óÏ¿ ò;¿ ò?¿ òå¿ òƒ¿ òË¿ òÙ¿ ô¿ ô¿ ô$¿ ôÜ¿ ôƒ¿ ôÒ¿ ö]¿ öÜ¿ ö◊¿ õ¿ õ¿ õ#¿ õ/¿ õX¿ õ\¿ õf¿ õ~¿ õÜ¿ õå¿ õê¿ õò¿ õ®¿ õ¨¿ õ∫¿ õæ¿ ú	¿ ú&¿ úu¿ ú´¿ ú“¿ ù¿ ù:¿ ù;¿ ùk¿ ù©¿ û¿ ûf¿ ûm¿ û™¿ û⁄¿ ü¿ üT¿ ü[¿ üù¿ ü§¿ üø¿ †¿ † ¿ †m¿ †î¿ †‚¿ °	¿ °X¿ °©¿ °∆¿ °’¿ °‹¿ ¢¿ ¢¿ ¢G¿ ¢N¿ ¢|¿ ¢Ã¿ ¢Ì¿ ¢Ù¿ £?¿ £å¿ £ú¿ £˜¿ §]¿ §ù¿ §Ì¿ •,¿ •s¿ •ﬂ¿ ¶¿ ¶+¿ ¶5¿ ¶=¿ ¶é¿ ¶º¿ ¶Ë¿ ¶È¿ ß;¿ ß†¿ ß≠¿ ßı¿ ®?¿ ®K¿ ®Ö¿ ®µ¿ ®∆¿ ®Û¿ ®˝¿ ©¿ ©¿ ©¿ ©Z¿ ©}¿ ©Õ¿ ™¿ ™¿ ™2¿ ™<¿ ™=¿ ™Q¿ ™U¿ ™V¿ ™°¿ ™Ì¿ ™Û¿ ´D¿ ´å¿ ´…¿ ¨¿ ¨b¿ ¨≥¿ ¨›¿ ¨„¿ ≠/¿ ≠}¿ ≠…¿ Æ¿ Æc¿ Æ¨¿ Æ˚¿ Ø1¿ Ø}¿ Ø»¿ ∞¿ ∞0¿ ∞a¿ ∞∞¿ ∞¸¿ ±L¿ ±ö¿ ±È¿ ≤7¿ ≤U¿ ≤[¿ ≤©¿ ≤¯¿ ≥G¿ ≥r¿ ≥x¿ ≥»¿ ¥¿ ¥P¿ ¥õ¿ ¥‰¿ µ3¿ µu¿ µ{¿ µ´¿ µ±¿ µŸ¿ µﬂ¿ ∂¿ ∂¿ ∂B¿ ∂H¿ ∂s¿ ∂ø¿ ∂‹¿ ∂‚¿ ∑¿ ∑¿ ∑X¿ ∑°¿ ∑ß¿ ∑∑¿ ∑Ω¿ ∏¿ ∏4¿ ∏Ñ¿ ∏≠¿ ∏¸¿ π"¿ πn¿ π∫¿ ∫
¿ ∫L¿ ∫õ¿ ∫›¿ ª	¿ ªG¿ ª£¿ º¿ º
¿ º¿ º¿ º^¿ ºû¿ º¢¿ ºÛ¿ ΩA¿ Ωñ¿ Ω”¿ æ¿ æY¿ æÜ¿ æµ¿ æ∂¿ æ¬¿ æÓ¿ ø,¿ øà¿ øÈ¿ ø¿ ¿;¿ ¿ã¿ ¿Ÿ¿ ¡¿ ¡g¿ ¡√¿ ¡È¿ ¡˘¿ ¬¿ ¬;¿ ¬ö¿ √¿ √F¿ √ì¿ √§¿ √ˆ¿ ƒ ¿ ƒ ¿ ƒã¿ ƒŸ¿ ≈(¿ ≈t¿ ≈√¿ ∆ ¿ ∆T¿ ∆°¿ ∆∏¿ «
¿ «¿ «(¿ «4¿ «>¿ «F¿ «k¿ «l¿ «¿¿ «Ù¿ «˙¿ «˚¿ »2¿ »m¿ »n¿ »∑¿ …¿ …5¿ …ä¿ …≠¿ …æ¿ …‡¿ …Í¿ …Ú¿  ¿  F¿  L¿  `¿  d¿  f¿  g¿  ®¿  ¨¿  Ó¿ ÀR¿ ÀS¿ Àù¿ À°¿ À¿ Ã?¿ Ãç¿ Ã‚¿ Õ3¿ Õp¿ Õt¿ Õè¿ Õì¿ Õ„¿ Œ2¿ ŒÅ¿ Œ—¿ œ¿ œk¿ œç¿ œë¿ œ‡¿ –-¿ –e¿ –â¿ –ç¿ –◊¿ –€¿ –˙¿ –˛¿ —G¿ —ç¿ —”¿ “¿ “d¿ “é¿ “í¿ “›¿ ”'¿ ”u¿ ”¿¿ ‘
¿ ‘U¿ ‘§¿ ‘Ì¿ ’¿ ’¿ ’8¿ ’<¿ ’ä¿ ’⁄¿ ÷(¿ ÷A¿ ÷E¿ ÷ì¿ ÷„¿ ◊	¿ ◊¿ ◊¿ ◊+¿ ◊_¿ ◊e¿ ◊m¿ ◊q¿ ◊¥¿ ◊˛¿ ÿ-¿ ÿ1¿ ÿ=¿ ÿr¿ ÿö¿ ÿ≥¿ ÿÎ¿ Ÿ¿ Ÿ"¿ ŸJ¿ Ÿh¿ Ÿê¿ Ÿ°¿ Ÿ∞¿ ŸΩ¿ Ÿ»¿ Ÿ—¿ ŸŸ¿ Ÿ·¿ ŸÂ¿ ⁄+¿ ⁄n¿ ⁄•¿ ⁄©¿ ⁄Û¿ €¿ €"¿ €.¿ €J¿ €R¿ €V¿ €°¿ €Ï¿ ‹-¿ ‹t¿ ‹î¿ ‹ò¿ ‹Ω¿ ‹¡¿ ›¿ ›H¿ ›¿ ›∂¿ ›∫¿ ›ﬂ¿ ﬁ)¿ ﬁq¿ ﬁª¿ ﬁø¿ ﬁÀ¿ ﬁ›¿ ﬁ˜¿ ﬂ7¿ ﬂa¿ ﬂ∞¿ ﬂˇ¿ ‡N¿ ‡Y¿ ‡c¿ ‡i¿ ‡q¿ ‡u¿ ‡í¿ ‡ñ¿ ‡¢¿ ‡ ¿ ‡“¿ ‡÷¿ ‡¯¿ ‡¸¿ ·E¿ ·{¿ ·¿ ·Õ¿ ‚¿ ‚(¿ ‚,¿ ‚u¿ ‚¥¿ ‚∏¿ ‚ƒ¿ „¿ „5¿ „L¿ „n¿ „ì¿ „À¿ „ÿ¿ „„¿ „Î¿ „Û¿ „˚¿ „ˇ¿ ‰G¿ ‰ë¿ ‰≠¿ ‰±¿ ‰˝¿ Â9¿ ÂÑ¿ Â’¿ Â‰¿ ÂË¿ Â˝¿ Ê¿ ÊM¿ Êû¿ ÊÌ¿ Á¿ Á¿ Á\¿ Á•¿ ÁÍ¿ Ë.¿ Ëe¿ Ëi¿ Ë∫¿ È¿ ÈR¿ ÈV¿ Èl¿ Èp¿ È¿¿ Í¿ Í^¿ Íë¿ Íï¿ Í·¿ Î/¿ ÎÄ¿ ÎÕ¿ Î—¿ Î›¿ Ï¿ Ï&¿ ÏY¿ Ïì¿ Ïú¿ ÏÔ¿ Ì¿ Ì,¿ ÌQ¿ Ìú¿ Ì∂¿ Ì√¿ ÌŒ¿ Ì÷¿ Ìﬁ¿ ÌÊ¿ ÌÍ¿ Ó'¿ Óo¿ ÓΩ¿ Ô¿ ÔN¿ Ôd¿ Ôh¿ Ô∑¿ Ôÿ¿ Ô‹¿ Ô˜¿ Ô˚¿ G¿ ó¿ Ë¿ Ò%¿ Ò)¿ Ò:¿ Ò>¿ Òã¿ ÒŸ¿ Ú¿ Ú¿ Úh¿ Úµ¿ Û¿ ÛQ¿ Û†¿ Û∂¿ Û∫¿ Ù¿ ÙU¿ Ùm¿ Ùq¿ ÙÑ¿ Ù”¿ ı¿ ı¿ ıT¿ ı§¿ ı®¿ ıÒ¿ ˆ"¿ ˆ&¿ ˆp¿ ˆÄ¿ ˆÑ¿ ˆ”¿ ˜¿ ˜m¿ ˜Ω¿ ˜Î¿ ˜Ô¿ ¯¿ ¯¿ ¯d¿ ¯Æ¿ ¯˚¿ ˘L¿ ˘g¿ ˘k¿ ˘Ñ¿ ˘à¿ ˘”¿ ˙¿ ˙i¿ ˙∑¿ ˙Ÿ¿ ˙›¿ ˚'¿ ˚8¿ ˚à¿ ˚∑¿ ¸¿ ¸U¿ ¸ü¿ ¸Ì¿ ˝9¿ ˝`¿ ˝d¿ ˝®¿ ˝ˆ¿ ˛B¿ ˛ä¿ ˛≥¿ ˇ¿ ˇ¿ ˇL¿ ˇ`¿ ˇo¿ ˇô¿ ˇ™¿ ˇ–¿ ¿ ¿ '¿ >¿ â¿ £¿ º¿¿3¿Z¿å¿™¿«¿¿+¿1¿2¿n¿t¿º¿	¿B¿í¿ò¿‚¿¿!¿q¿æ¿¿^¿Ö¿ã¿÷¿&¿t¿∂¿“¿ÿ¿)¿]¿c¿Æ¿˛¿5¿X¿Y¿ï¿õ¿Á¿	¿	¿	b¿	ë¿	ó¿	„¿
	¿
¿
`¿
Ø¿
ˇ¿7¿F¿j¿•¿©¿Õ¿Œ¿¿8¿>¿É¿«¿Õ¿¿,¿2¿É¿«¿¿6¿f¿g¿∑¿Ÿ¿ﬂ¿¿F¿G¿r¿x¿®¿Æ¿˚¿-¿3¿Ç¿”¿¿8¿9¿w¿û¿ü¿ﬁ¿‰¿0¿Å¿ö¿†¿Ó¿+¿Q¿R¿Ä¿´¿¨¿˚¿¿¿S¿¢¿Ú¿)¿/¿{¿…¿’¿€¿¿j¿∫¿·¿Á¿˜¿˝¿J¿\¿™¿—¿¿e¿≥¿Î¿ ¿$¿%¿s¿Ω¿√¿
¿T¿ü¿Ô¿>¿å¿Ÿ¿)¿H¿]¿ó¿ò¿—¿◊¿Á¿Ì¿G¿n¿ú¿ù¿Ì¿¿ ¿R¿X¿¶¿ˆ¿¿¿Y¿ê¿ﬁ¿ .¿ {¿ ¿¿!¿!\¿!e¿!ó¿!ò¿!‰¿"¿"¿"e¿"∂¿#¿#	¿#U¿#à¿#”¿$#¿$q¿$Ö¿$ã¿$⁄¿%(¿%v¿%¡¿%Ã¿%“¿%Î¿&¿&¿&K¿&Q¿&°¿&¥¿&∫¿&›¿&¯¿&˘¿'L¿'É¿'â¿'ﬁ¿'ı¿'˚¿(¿(.¿(/¿(Ä¿(è¿(ï¿(À¿)¿)X¿)^¿)§¿)Ò¿*1¿*U¿*[¿*¨¿*∫¿*¿¿+
¿+¿+Z¿+j¿+¿+Ö¿+«¿,¿,N¿,c¿,i¿,ü¿,·¿-2¿-¿-µ¿-ª¿-ˇ¿.8¿.M¿.S¿.i¿.o¿.í¿.ò¿.¶¿.ƒ¿.˜¿.ˇ¿/	¿/¿/!¿/7¿/=¿/â¿/ñ¿/ú¿/™¿/Ã¿/È¿/¸¿0¿09¿0W¿0y¿0Ü¿0ë¿0ô¿0£¿0µ¿0ª¿0—¿0◊¿1#¿1)¿17¿1[¿1©¿1ƒ¿1‚¿1Ë¿2¿2F¿2P¿2X¿2^¿2z¿2ó¿2™¿2¿¿3¿3¿3#¿3-¿3?¿3E¿3U¿3[¿3•¿3»¿3‹¿4¿4(¿4@¿4W¿4^¿4Æ¿4≤¿4≥¿5¿5¿5¿5Y¿5®¿5Ù¿6-¿6B¿6H¿6{¿6Å¿6À¿7¿7V¿7¶¿7≈¿7À¿8¿8F¿8[¿8a¿8≠¿8¸¿9J¿9ó¿9‰¿: ¿:¿:¿:1¿:7¿:Z¿:`¿:n¿:è¿:∂¿:…¿:ﬂ¿;¿;#¿;D¿;Q¿;\¿;d¿;n¿;Ä¿;î¿;Ã¿;Ê¿;˛¿<¿<¿<v¿<z¿<{¿<À¿=¿=`¿=f¿=ß¿=Û¿>@¿>â¿>ÿ¿?&¿?o¿?u¿?º¿@¿@¿@T¿@°¿@·¿A/¿A}¿A ¿AÚ¿A¯¿BI¿BW¿B]¿B´¿BÏ¿BÚ¿CC¿CV¿Ck¿Cq¿C∞¿C∂¿CÈ¿CÔ¿D¿D¿D.¿D4¿DB¿De¿DÆ¿D∂¿D¿¿D“¿Dÿ¿DË¿DÓ¿E?¿Er¿EÜ¿E◊¿EÒ¿F	¿F¿F0¿F7¿F¶¿F™¿F´¿F˚¿GI¿Gê¿Gñ¿G·¿H/¿H~¿H¿¿H’¿H€¿I¿I¿If¿Il¿Iµ¿Iª¿I—¿I◊¿I˙¿J ¿J¿J2¿JÅ¿Jâ¿Jì¿J•¿Jπ¿K¿K*¿KB¿KR¿Ki¿Kp¿KÈ¿KÌ¿KÓ¿L;¿Lt¿Lz¿L∂¿L˜¿L˝¿MJ¿Mê¿Mñ¿MÂ¿N&¿Nt¿N√¿O¿O^¿OÆ¿OÂ¿OÎ¿P<¿PJ¿PP¿Pû¿Pÿ¿Pﬁ¿Q7¿QL¿QR¿Që¿Qó¿Q ¿Q–¿QÊ¿QÏ¿R¿R¿R#¿RG¿Ré¿Rñ¿R†¿R≤¿R∏¿R»¿RŒ¿S¿SE¿SY¿S•¿Sø¿S◊¿SÁ¿S˛¿T¿To¿Ts¿Tt¿T¡¿T˙¿U ¿UF¿Uè¿Uﬁ¿V ¿V5¿V;¿Vt¿Vz¿V¡¿V«¿W¿W¿W,¿W2¿WU¿W[¿Wi¿Wá¿W“¿W⁄¿W‰¿Wˆ¿X
¿X\¿Xv¿Xé¿Xû¿Xµ¿Xº¿Y0¿Y4¿Y5¿YÉ¿Y”¿Y˜¿Y˝¿ZA¿Zà¿Z∑¿ZΩ¿Zˇ¿[;¿[A¿[è¿[Ÿ¿[ﬂ¿\,¿\Y¿\_¿\û¿\Ï¿]¿]¿]X¿]ß¿]‰¿^$¿^n¿^º¿_
¿_0¿_6¿_á¿_ï¿_õ¿_È¿_Ô¿`?¿`W¿`l¿`r¿`±¿`∑¿`Í¿`¿a¿a¿a/¿a5¿aC¿ac¿aæ¿a∆¿a–¿a‚¿aË¿a¯¿a˛¿bN¿b}¿bë¿b—¿bÎ¿c¿c$¿c;¿cB¿cÆ¿c≤¿c≥¿d¿dQ¿du¿d{¿d…¿e¿ei¿e´¿e¿¿e∆¿f¿f¿fT¿fZ¿f£¿f©¿fø¿f≈¿fË¿fÓ¿f¸¿g¿gÅ¿gâ¿gì¿g•¿gπ¿gˇ¿h¿h2¿hR¿hi¿hp¿hÊ¿hÍ¿hÎ¿i8¿iM¿iS¿iÑ¿i ¿j¿jW¿j{¿jÅ¿j“¿j‡¿jÊ¿k0¿kE¿kK¿kä¿kê¿k¶¿k¨¿kœ¿k’¿k„¿k˛¿l¿l/¿lR¿lë¿lû¿l©¿l±¿lª¿lÕ¿l”¿l„¿lÈ¿m5¿mQ¿me¿mπ¿mÁ¿mÎ¿mÏ¿n5¿nJ¿nP¿nã¿nŸ¿o(¿oZ¿oo¿ou¿o£¿o©¿o‰¿p3¿p¿pÀ¿q¿qZ¿qû¿q§¿q¿r;¿rP¿rV¿rü¿r•¿rª¿rﬁ¿r‰¿s@¿sR¿sf¿sÌ¿tB¿tF¿tG¿tó¿tÊ¿u ¿u&¿ub¿uÆ¿v ¿vN¿vû¿vÏ¿w*¿w0¿w|¿w…¿x	¿xW¿xô¿xü¿x¿x˛¿y¿yR¿yì¿y®¿yÆ¿yÌ¿yÛ¿z	¿z¿z2¿z8¿zF¿zd¿zì¿z¶¿z…¿{¿{¿{$¿{,¿{6¿{H¿{N¿{^¿{d¿{¥¿{„¿{˜¿|}¿|–¿|‘¿|’¿}%¿}p¿}™¿}∞¿}ˆ¿~D¿~é¿~–¿~Â¿~Î¿$¿*¿b¿h¿±¿∑¿Õ¿¿ˆ¿Ä^¿Äp¿ÄÑ¿Å8¿ÅØ¿Å≥¿Å¥¿Ç¿ÇH¿Çh¿Çn¿Ç≠¿ÇÙ¿É#¿É)¿Ék¿Éß¿É≠¿É˚¿ÑE¿ÑK¿Ñò¿Ñ≈¿ÑÀ¿Ö¿Öb¿Ö¨¿Ö¸¿ÜE¿Üí¿Ü‚¿á#¿á)¿áz¿áà¿áé¿á‹¿áÒ¿á˜¿à6¿à<¿àR¿àX¿à{¿àÅ¿àè¿àµ¿à·¿àÙ¿âN¿âr¿â}¿âÖ¿âè¿â°¿âß¿â∑¿âΩ¿ä¿ä3¿äG¿ä∆¿ã¿ã¿ã¿ãa¿ã®¿ã»¿ãŒ¿å¿åh¿å≤¿åÙ¿ç	¿ç¿çK¿çQ¿çâ¿çè¿çÿ¿çﬁ¿çÙ¿é¿é¿éä¿éú¿é∞¿èb¿è÷¿è⁄¿è€¿ê(¿êH¿êN¿êÇ¿êŒ¿ë¿ël¿ëº¿ë‰¿ëÍ¿í:¿íb¿íh¿íπ¿í¯¿ìH¿ìê¿ì›¿î.¿îG¿îM¿îù¿îø¿î≈¿ï¿ï(¿ï.¿ï>¿ïD¿ïì¿ïﬁ¿ñ'¿ñS¿ñg¿ñÍ¿ó?¿óC¿óD¿óë¿ó±¿ó∑¿óı¿òD¿òì¿ò≈¿ò⁄¿ò‡¿ô¿ô¿ôO¿ôU¿ôû¿ô≤¿öl¿öÔ¿öÛ¿öÙ¿õA¿õè¿õ™¿õ∞¿õÓ¿ú8¿úá¿ú÷¿ù&¿ùN¿ùT¿ù§¿ùÃ¿ù“¿û#¿ûb¿û≤¿û˙¿üG¿üò¿ü±¿ü∑¿†¿†¿† ¿†0¿†6¿†É¿†ñ¿†Ê¿°¿°)¿°π¿¢¿¢"¿¢#¿¢p¿¢æ¿¢Ÿ¿¢ﬂ¿£'¿£u¿£√¿§¿§ ¿§&¿§a¿§g¿§ü¿§•¿§Ó¿•¿•…¿¶\¿¶`¿¶a¿¶±¿¶ø¿¶≈¿¶¯¿ßG¿ßó¿ß∞¿ß∂¿ß¿ßˆ¿®F¿®X¿®m¿®s¿®É¿®â¿®‘¿®Ï¿©¿©[¿©è¿©ì¿©î¿©ÿ¿™$¿™r¿™Å¿™á¿™º¿´¿´]¿´t¿´z¿´ ¿¨¿¨¿¨_¿¨©¿¨Ú¿¨¯¿≠I¿≠ê¿≠ñ¿≠·¿Æ,¿Æ;¿ÆP¿ÆV¿Æf¿Æl¿Æ∫¿Æ˜¿ØH¿Øy¿Øç¿ØÊ¿∞¿∞ ¿∞!¿∞o¿∞Ñ¿∞ä¿∞∫¿±
¿±X¿±ù¿±Í¿±¿≤<¿≤ä¿≤”¿≥"¿≥p¿≥ª¿≥¡¿¥¿¥`¿¥†¿¥√¿¥…¿µ¿µ ¿µm¿µî¿µ©¿µØ¿µ≈¿µÀ¿∂¿∂¿∂¿∂,¿∂L¿∂T¿∂^¿∂p¿∂v¿∂®¿∂Æ¿∂º¿∂”¿∑¿∑¿∑"¿∑6¿∑Ç¿∑¨¿∑∞¿∑±¿∑˛¿∏4¿∏:¿∏o¿∏∂¿∏Â¿∏Î¿π4¿π_¿πe¿π§¿π™¿π¿∫¿∫¿∫!¿∫'¿∫J¿∫P¿∫^¿∫u¿∫π¿∫¡¿∫À¿∫›¿ª&¿ªU¿ªY¿ªZ¿ª©¿ª⁄¿ª‡¿º¿ºh¿ºµ¿ºÕ¿º”¿Ω¿Ωg¿ΩØ¿Ω˚¿æL¿æe¿æk¿æµ¿æ”¿æŸ¿ø¿ø,¿ø2¿øÉ¿ø∑¿øˇ¿¿4¿¿8¿¿9¿¿à¿¿ÿ¿¡¿¡¿¡D¿¡î¿¡·¿¡˘¿¡ˇ¿¬D¿¬ì¿¬€¿√'¿√x¿√ë¿√ó¿√Ë¿ƒ0¿ƒ6¿ƒt¿ƒâ¿ƒ‹¿≈¿≈ ¿≈!¿≈q¿≈Ä¿≈Ü¿≈©¿≈Ø¿≈Ω¿≈Ÿ¿≈È¿≈˘¿∆¿∆%¿∆+¿∆|¿∆≈¿∆¿∆ˆ¿«H¿«ê¿«ñ¿«÷¿«Ú¿»¿».¿»5¿»T¿»ô¿»≤¿»∏¿»π¿»◊¿…$¿…n¿…o¿…¿…û¿…∫¿ ¿ q¿ ±¿ º¿ ƒ¿ ◊¿ ·¿ ¯¿ ¸¿ ˝¿ÀM¿Àd¿Àj¿Àç¿Àì¿À°¿À‰¿Ã¿Ã¿Ã1¿ÃC¿Ãg¿Ão¿Ãy¿Ã¿Ã–¿Õ¿ÕD¿ÕJ¿Õó¿Õù¿Õ›¿Õˇ¿Œ¿Œ;¿ŒB¿Œa¿Œ¶¿Œø¿Œ≈¿Œ∆¿Œﬂ¿œ,¿œv¿œz¿œ{¿œ≤¿œ∏¿–¿–)¿–/¿–Ä¿–Œ¿—¿—2¿—8¿—à¿—‘¿“#¿“^¿“Œ¿”¿”W¿”§¿”’¿”˙¿‘¿‘N¿‘c¿‘o¿‘ﬂ¿’"¿’K¿’j¿’ö¿’ª¿’—¿’˛¿÷¿÷'¿÷ä¿÷î¿÷ú¿÷Ω¿÷—¿÷ı¿◊¿◊/¿◊h¿◊Ø¿ÿ!¿ÿv¿ÿÖ¿ÿí¿ÿ©¿ÿ∑¿ÿÌ¿Ÿ	¿Ÿ¿Ÿ+¿Ÿ3¿Ÿt¿Ÿﬂ¿⁄!¿⁄á¿⁄ç¿⁄Ã¿⁄”¿€¿€o¿€∏¿€ÿ¿‹¿‹4¿‹ì¿‹ô¿‹√¿‹«¿‹»¿‹‘¿›¿›
¿›¿›B¿›E¿›w¿›ú¿›¡¿›Á¿ﬁ¿ﬁ;¿ﬁb¿ﬁà¿ﬁ∏¿ﬁË¿ﬂ¿ﬂH¿ﬂx¿ﬂ®¿ﬂ‹¿‡¿‡;¿‡i¿‡ñ¿‡¬¿‡Ì¿·¿·9¿·c¿·ë¿·π¿·‡¿‚¿‚0¿‚X¿‚Ä¿‚®¿‚–¿‚˘¿„¿„H¿„m¿„ñ¿„ª¿„‡¿‰¿‰A¿‰D¿‰ê¿‰∑¿Â¿Â¿Âw¿Â|¿Âö¿Âü¿Ê¿Êp¿Êõ¿ÊÙ¿Á[¿Áü¿Ë¿Ë$¿Ë)¿ËK¿ËP¿Ëπ¿Ë›¿È¿ÈD¿È¨¿Í¿Íg¿ÍØ¿Í„¿Î.¿Î{¿Îö¿Îƒ¿Î∆¿Î«¿Ï¿Ï	¿Ï&¿Ï@¿Ï]¿Ï_¿Ï`¿Ïí¿Ï°¿Ï≥¿Ï‡¿Ïˇ¿Ì"¿ÌY¿Ìj¿Ì†¿Ì“¿Ó¿Ó?¿Ós¿Ó¿Ó¶¿ÓÊ¿Ô¿ÔJ¿Ôâ¿Ô∫¿Ô›¿ÔÛ¿Ô¸¿¿¿¿¿1¿j¿Ç¿É¿”¿˛¿Ò.¿Ò/¿Òt¿Òu¿Òï¿Ú¿Úò¿Ú¸¿ÛI¿ÛJ¿Ûö¿Û‡¿Û˛¿ÙN¿Ùñ¿Ù´¿ÙÌ¿ı9¿ı?¿ıi¿ı©¿ıØ¿ı¿¿ıƒ¿ı≈¿ı¿ˆ
¿ˆ¿ˆ$¿ˆ:¿ˆN¿ˆT¿ˆô¿ˆø¿ˆ√¿ˆƒ¿˜(¿˜Y¿˜}¿˜£¿˜≈¿˜⁄¿¯¿¯2¿¯]¿¯ñ¿¯ù¿¯°¿¯¢¿˘D¿˘–¿˘Ù¿˙ ¿˙ ¿˙m¿˙ï¿˙ú¿˙‘¿˙ˆ¿˚¿˚8¿˚ó¿˚œ¿˚˝¿¸)¿¸`¿¸è¿¸∫¿˝¿˝.¿˝w¿˝Å¿˝ã¿˝ò¿˝œ¿˝Ò¿˛¿˛"¿˛8¿˛Y¿˛_¿˛`¿˛ƒ¿˛Ò¿ˇ/¿ˇ8¿ˇE¿ˇz¿ˇß¿ˇ‚¿ˇÎ¿ˇÒ¿ˇı¿ˇˆ¿ ,¿ O¿ û¿ ø¿ Ú¿;¿d¿ã¿Ì¿I¿•¿Ÿ¿#¿â¿¨¿¿&¿:¿D¿N¿T¿X¿Y¿¿Ö¿“¿¿¿l¿à¿Ï¿¿;¿g¿í¿‹¿"¿;¿`¿s¿y¿°¿Ã¿‡¿Ê¿¿2¿t¿®¿Æ¿»¿Ÿ¿›¿ﬁ¿¯¿	¿	8¿	á¿	≤¿	∂¿	∑¿
¿
C¿
n¿
õ¿
ø¿
Ï¿)¿2¿8¿<¿=¿ç¿°¿ ¿‡¿¿¿¿¿%¿&¿A¿X¿t¿ú¿†¿°¿…¿ ¿˘¿&¿2¿c¿≥¿¿¿F¿T¿Z¿q¿ù¿»¿Ã¿Õ¿ ¿<¿H¿y¿…¿¿¿\¿j¿p¿á¿≥¿œ¿¸¿ ¿¿¿U¿Å¿Ö¿Ü¿√¿…¿¿2¿K¿å¿Ã¿¿0¿~¿Ñ¿±¿∆¿ ¿À¿¸¿¿R¿ñ¿π¿ø¿	¿¿^¿å¿ç¿›¿*¿l¿ª¿¿¿z¿{¿ù¿¥¿¬¿»¿…¿Ú¿¿C¿|¿≥¿’¿Î¿¿(¿;¿c¿¿Õ¿¿h¿∑¿‹¿È¿1¿j¿í¿›¿+¿K¿ë¿ß¿µ¿Ù¿¿¿)¿2¿U¿[¿_¿`¿{¿∫¿ˆ¿˙¿˚¿¿S¿è¿ì¿î¿Ï¿Ì¿¿U¿í¿ñ¿ó¿√¿ ¿ A¿ E¿ F¿ Ö¿ ∂¿!¿!@¿!N¿!i¿!Ø¿!∂¿!∫¿!ª¿"¿"u¿"≈¿"∆¿#¿#E¿#I¿#J¿#V¿#™¿#´¿#∑¿#ˇ¿$,¿$-¿$w¿$x¿$Ñ¿$õ¿$ß¿$Î¿%=¿%ê¿%ó¿%¿¿%ƒ¿%≈¿%—¿%Á¿%Û¿&7¿&à¿&€¿&‚¿'
¿'¿'¿'¿'A¿'M¿'û¿'Ô¿(C¿(J¿(é¿(£¿(œ¿(›¿(Í¿)¿)4¿)A¿)ì¿)ú¿)œ¿)È¿)Í¿)¿*
¿*4¿*8¿*9¿*E¿*p¿*|¿*Õ¿+¿+r¿+Ä¿+á¿+¶¿+–¿+‘¿+’¿+·¿+˙¿,¿,W¿,¶¿,˙¿-¿-¿-¿-G¿-K¿-L¿-ï¿-º¿-È¿.'¿.+¿.-¿..¿.U¿.n¿.Ö¿.û¿.£¿.»¿.¿.Ò¿/¿/¿/¿/_¿/|¿/î¿/Æ¿/≥¿/¥¿/¿¿/Ï¿0 ¿0$¿0&¿0'¿0f¿0Ç¿0ö¿0¥¿0π¿0∫¿0∆¿0Ú¿1%¿1)¿1+¿1,¿1n¿1ç¿1•¿1ø¿1ƒ¿1≈¿1—¿1˝¿23¿27¿29¿2:¿2}¿2ù¿2µ¿2œ¿2‘¿2’¿2·¿3¿3X¿3\¿3^¿3_¿3°¿3¢¿3Á¿3Î¿48¿4E¿4à¿4±¿4¿¿4Ï¿5$¿5*¿5.¿5/¿5c¿5d¿5¢¿5Õ¿5—¿5“¿5Ù¿6¿6$¿6(¿6)¿6Y¿6v¿6ï¿6Æ¿6¥¿6∏¿6π¿6 ¿6˘¿7¿7'¿7@¿7F¿7J¿7K¿7{¿7û¿7µ¿7π¿7∫¿7ﬁ¿8¿8+¿8=¿8A¿8B¿8_¿8í¿8©¿8ª¿8ø¿8¿¿8Á¿9¿9¿9¿9¿99¿9U¿9Y¿9Z¿9f¿9|¿9ö¿9û¿9†¿9°¿9…¿9Õ¿:¿:v¿:¢¿: ¿:À¿;¿;(¿;.¿;|¿;π¿;ø¿<¿<R¿<û¿<‚¿=A¿=†¿=°¿=·¿>#¿>$¿>¿>Ä¿>¨¿>≠¿>·¿>‚¿?(¿?)¿?J¿?u¿?î¿?∞¿@¿@:¿@á¿@î¿@≤¿@∏¿A ¿A7¿A>¿AÄ¿A∏¿AÊ¿B¿B.¿B\¿Bã¿Bπ¿C¿C!¿C5¿CA¿Ck¿C•¿C´¿CØ¿C∞¿Cÿ¿CÛ¿D¿D¿D,¿DL¿Di¿Då¿DÃ¿DÛ¿E ¿E%¿EJ¿EU¿E^¿EØ¿Eœ¿EÏ¿F¿F^¿Fè¿Fú¿F¡¿FÊ¿FÒ¿F˙¿G ¿G¿G¿G¿G"¿G7¿GN¿Gz¿Gª¿GÂ¿H¿H!¿HM¿HN¿Hõ¿H–¿I¿IS¿I{¿I∑¿I∏¿IÂ¿J¿J¿J¿Jm¿Jû¿J¢¿J£¿J’¿J¿KJ¿Kò¿Kú¿Kù¿K‹¿L3¿L4¿Lç¿Lé¿Lö¿L„¿M)¿Mf¿Mg¿M™¿Mœ¿MÌ¿N¿N¿NR¿Nü¿N‘¿O¿O$¿O=¿Oh¿Oq¿O¿O•¿Oı¿PD¿PM¿Ph¿P∏¿Pæ¿Pø¿Q¿Q6¿Qh¿Qä¿Qø¿Q«¿QÈ¿R¿R,¿R>¿R}¿R¥¿R…¿RÈ¿S¿S\¿Sç¿Sª¿Sﬁ¿T%¿T7¿TO¿T^¿Tk¿Tv¿T~¿TÑ¿TÖ¿Të¿T¨¿T¯¿UF¿Uì¿U∞¿U∑¿U“¿V
¿V&¿V_¿Vc¿Vd¿Vp¿Vß¿VÕ¿VÁ¿W¿W!¿WE¿WK¿WO¿W[¿Wï¿Wñ¿W¢¿W√¿WÊ¿X'¿XW¿XÅ¿Xá¿Xã¿Xå¿Xƒ¿XÌ¿Y3¿YP¿Yc¿Yk¿Yç¿Yœ¿Y’¿YŸ¿Y⁄¿Z*¿Zt¿Zë¿Zó¿Z´¿Z¬¿Zœ¿ZÏ¿ZÚ¿Zˆ¿Z˜¿[9¿[r¿[ô¿[Ó¿\¿\Q¿\°¿\“¿]¿]V¿]ß¿]¯¿^;¿^†¿^”¿_&¿_u¿_ô¿_’¿`¿`*¿`Y¿`Ø¿a¿a&¿aP¿a•¿a˜¿b.¿bG¿bx¿b©¿b¿¿b’¿bÁ¿b˜¿c=¿cI¿c`¿cn¿cØ¿c∑¿d¿d ¿dY¿d¢¿d™¿dﬁ¿e¿e¿e¿e¿e1¿e]¿eº¿e…¿e˜¿e˝¿f¿f¿f¿f<¿fb¿fé¿f¡¿g¿g?¿gG¿gä¿g∂¿gÓ¿gˆ¿h¿h¿h]¿ho¿hì¿h∑¿hÿ¿hˇ¿iC¿ij¿i{¿i§¿iÕ¿i‹¿iÈ¿iÛ¿j¿j¿j*¿j0¿j1¿ja¿jã¿jë¿jï¿jñ¿jø¿jœ¿j˛¿k5¿k]¿kx¿k©¿kÃ¿k÷¿kﬁ¿kÒ¿k˚¿kˇ¿l ¿l¿l"¿lf¿lú¿l¢¿l”¿lÎ¿lÔ¿l¿l¸¿m¿m&¿mG¿mã¿mµ¿mÎ¿mÒ¿mı¿mˆ¿n¿n¿n0¿n@¿n[¿nn¿nx¿n°¿n¬¿n€¿o ¿o2¿oV¿oÉ¿o’¿p	¿p!¿p6¿po¿pâ¿pç¿pé¿p—¿q
¿q¿qB¿q]¿qç¿q¥¿qª¿qø¿q¿¿q‚¿r¿r¿r)¿rA¿rQ¿rt¿rõ¿rº¿rœ¿rŸ¿r⁄¿s¿sh¿s≤¿s˘¿t ¿t/¿tO¿t¢¿t—¿u¿uD¿uë¿u‚¿u„¿v5¿vä¿vΩ¿w¿wT¿w°¿w¬¿x¿x.¿xr¿xÇ¿xΩ¿y¿y,¿yh¿yÆ¿y˝¿z¿ze¿zÄ¿zŒ¿z˙¿{4¿{5¿{]¿{y¿{ó¿{∆¿{Û¿{Ù¿|.¿|û¿|ü¿|∆¿|Ú¿}"¿}a¿}¢¿}Î¿~
¿~+¿~É¿~®¿~…¿~‘¿~˙¿¿+¿3¿]¿l¿t¿∂¿‰¿Û¿˚¿Ä'¿ÄV¿Äv¿Äë¿ÄÆ¿Ä¥¿Äµ¿Ä˚¿ÅM¿Å]¿Å≤¿ÅÓ¿Ç/¿ÇP¿ÇÄ¿Çú¿ÇÆ¿Ç∂¿Çı¿É#¿É2¿É:¿É;¿Éí¿É∏¿ÉÈ¿Ñ¿Ñ-¿Ñp¿Ñ{¿Ñ•¿Ñ≠¿ÑÆ¿Ñ»¿Ñ‡¿ÑÊ¿Ö!¿ÖW¿ÖX¿Ö™¿Ö›¿Ü1¿Ü~¿Üñ¿Ü”¿á	¿áN¿áq¿á¿á∫¿á√¿à¿à!¿àB¿àT¿à\¿à]¿à®¿à∆¿àÿ¿à‡¿à·¿â¿â,¿â>¿âF¿â~¿â≠¿â≥¿â¥¿â€¿ä¿äJ¿äe¿äp¿äê¿ä»¿ã
¿ã¿ãd¿ãØ¿ãœ¿å¿å*¿åE¿åv¿åÅ¿åß¿å∑¿åÊ¿ç8¿çâ¿çî¿ç∂¿ç≈¿é¿éc¿éö¿é—¿é¯¿è ¿è¿è¿èY¿èÊ¿ê¿êc¿êÄ¿êÅ¿ê∞¿ê„¿ë.¿ëF¿ëm¿ëê¿ëù¿ë—¿í?¿í|¿íÜ¿íò¿í†¿í°¿ì¿ì[¿ìß¿ìÀ¿ì˙¿î@¿î}¿î’¿ï¿ïO¿ïå¿ïñ¿ïû¿ïÿ¿ïﬁ¿ïﬂ¿ñ¿ñ7¿ñf¿ñë¿ñ∫¿ó¿ó)¿ó9¿óh¿óò¿ó ¿ò¿ò+¿òX¿ò`¿òj¿òk¿òè¿ò‰¿ô#¿ôd¿ôÖ¿ô∏¿ö¿ö¿ö@¿öc¿ön¿öî¿ö¶¿öÆ¿ö⁄¿õ¿õK¿õz¿õö¿õ∑¿õ“¿õÿ¿õŸ¿ú'¿úÉ¿ú≥¿ú‘¿ù¿ù4¿ùt¿ù≤¿ùœ¿ù’¿ùÎ¿û$¿û[¿ûî¿ûö¿û ¿ûÊ¿ü!¿ü^¿üf¿ül¿ü©¿ü·¿ü˝¿†6¿†:¿†;¿†\¿†]¿†õ¿†Ã¿†È¿°8¿°á¿°ÿ¿¢¿¢D¿¢[¿¢Ö¿¢…¿£F¿£¨¿§¿§H¿§a¿§Ü¿§®¿§Ã¿§Á¿•¿•d¿•q¿•±¿•≈¿•Í¿¶¿¶4¿¶S¿¶{¿¶ä¿¶ ¿¶‡¿¶Ï¿ß¿ß9¿ß_¿ßÉ¿ßü¿ßº¿ß„¿®C¿®i¿®v¿®¥¿®˘¿©:¿©v¿©å¿©ò¿©¿™,¿™]¿™i¿™é¿™±¿™Ì¿´¿´*¿´O¿´°¿´ﬁ¿´ˇ¿¨!¿¨A¿¨b¿¨»¿≠¿≠¿≠*¿≠O¿≠v¿≠©¿≠∑¿≠ﬁ¿≠Í¿Æ¿Æá¿Æî¿Æ”¿Ø ¿ØA¿ØW¿Øc¿Ø§¿Ø≈¿ØÎ¿∞'¿∞8¿∞_¿∞Å¿∞¡¿∞’¿∞˙¿±¿±F¿±y¿±á¿±ß¿±≥¿±“¿±Ô¿≤O¿≤\¿≤û¿≤≤¿≤Ÿ¿≥
¿≥E¿≥X¿≥d¿≥Ö¿≥÷¿≥‚¿¥¿¥.¿¥T¿¥¶¿¥‹¿¥Ù¿µ¿µC¿µi¿µÇ¿µä¿µú¿µ∞¿µ»¿∂¿∂¿∂?¿∂b¿∂c¿∂Ø¿∂≈¿∂‰¿∂Â¿∑D¿∑É¿∑…¿∏¿∏¿∏!¿∏D¿∏h¿∏ï¿∏’¿π¿πh¿πï¿πù¿π£¿π§¿πÚ¿πˇ¿∫3¿∫d¿∫j¿∫Ü¿∫π¿∫ø¿∫Ÿ¿ª¿ª¿ª*¿ª.¿ª/¿ªV¿ª}¿ª§¿ªÀ¿ªŸ¿ªﬂ¿º¿ºf¿ºù¿º£¿º§¿º’¿Ω,¿Ωc¿Ωi¿Ωm¿Ωn¿Ωë¿Ω∂¿Ωœ¿æ ¿æ,¿æ@¿æR¿æZ¿æ ¿æÀ¿ø¿øA¿øs¿ø}¿ø±¿øπ¿¿.¿¿o¿¿ß¿¿„¿¿Î¿¿˝¿¡¿¡¿¡¿¡T¿¡É¿¡≥¿¡∑¿¡∏¿¡˚¿¬3¿¬E¿¬K¿¬]¿¬a¿¬b¿¬≠¿¬Ú¿√¿√
¿√G¿√K¿√L¿√Ø¿√ ¿ƒ¿ƒ¿ƒ¿ƒ*¿ƒV¿ƒr¿ƒ–¿≈-¿≈{¿≈¢¿≈√¿≈ÿ¿≈„¿≈Î¿≈˛¿∆¿∆:¿∆L¿∆h¿∆o¿∆∑¿∆ﬁ¿∆¿«¿«W¿«√¿«·¿»@¿»o¿»~¿»ı¿…¿…¿…"¿….¿…l¿…~¿…õ¿…’¿ @¿ ï¿À¿À¿À$¿À9¿ÀE¿ÀK¿Às¿ÀÖ¿Àâ¿Àä¿À∑¿ÀΩ¿À¿Àˆ¿Ã5¿Ã;¿Ãn¿Ãt¿Ãä¿Ãê¿Ã≥¿Ãπ¿Ã«¿Ã‰¿Õ¿Õ¿Õ ¿Õ2¿Õ8¿ÕH¿ÕN¿Õò¿Õª¿Õœ¿Õ˙¿Œ¿Œ)¿Œ0¿Œw¿Œ{¿Œ|¿Œ©¿ŒØ¿ŒÏ¿ŒÚ¿œ%¿œ+¿œr¿œx¿œ¡¿œ«¿œ›¿œ„¿–¿–¿–¿–6¿–j¿–r¿–|¿–é¿–¢¿–”¿–Î¿—¿—	¿—é¿—À¿—‚¿—˛¿“9¿“w¿“é¿“Ø¿“≥¿“¥¿” ¿”O¿”l¿”r¿”∞¿”∂¿”ı¿”˚¿‘.¿‘4¿‘J¿‘P¿‘s¿‘y¿‘á¿‘°¿‘Ÿ¿‘·¿‘Î¿‘˝¿’¿’¿’¿’j¿’õ¿’Ø¿’˘¿÷¿÷!¿÷8¿÷?¿÷•¿÷©¿÷™¿÷ˆ¿◊E¿◊b¿◊h¿◊∞¿◊∂¿◊Ù¿◊˙¿ÿA¿ÿG¿ÿê¿ÿñ¿ÿ¨¿ÿ≤¿ÿ’¿ÿ€¿ÿÈ¿Ÿ¿ŸD¿ŸL¿ŸV¿Ÿh¿Ÿ|¿ŸÃ¿Ÿ‰¿ŸÙ¿⁄¿⁄¿⁄ó¿⁄‘¿⁄Î¿€¿€B¿€á¿€±¿€“¿€÷¿€◊¿‹#¿‹0¿‹6¿‹o¿‹u¿‹¥¿‹∫¿‹Ì¿‹Û¿›	¿›¿›2¿›8¿›F¿›\¿›å¿›î¿›û¿›∞¿›∂¿›∆¿›Ã¿ﬁ¿ﬁC¿ﬁW¿ﬁú¿ﬁ¥¿ﬁƒ¿ﬁ€¿ﬁ‚¿ﬁ˜¿ﬂ1¿ﬂ5¿ﬂ6¿ﬂÇ¿ﬂè¿ﬂï¿ﬂÿ¿ﬂﬁ¿‡¿‡¿‡d¿‡j¿‡≥¿‡π¿‡œ¿‡’¿‡¯¿‡˛¿·¿· ¿·Z¿·b¿·l¿·~¿·í¿·›¿·ı¿‚¿‚¿‚#¿‚8¿‚y¿‚}¿‚~¿‚œ¿„¿„¿„T¿„Z¿„ô¿„ü¿„“¿„ÿ¿„Ó¿„Ù¿‰¿‰¿‰+¿‰N¿‰†¿‰®¿‰≤¿‰ƒ¿‰ ¿‰⁄¿‰‡¿Â0¿Â_¿Âs¿Â¨¿Â≈¿ÂÂ¿Â¸¿Ê¿Êf¿Êj¿Êk¿Êº¿Ê˙¿Á ¿ÁK¿ÁQ¿Áí¿Áò¿Áﬂ¿ÁÂ¿Ë.¿Ë4¿ËJ¿ËP¿Ës¿Ëy¿Ëá¿Ë§¿È ¿È¿È¿È$¿È8¿Èw¿Èê¿È∞¿È«¿ÈŒ¿ÍS¿Íê¿Í™¿Í∆¿Î¿Î?¿Îo¿Îê¿Îî¿Îï¿Îƒ¿Î ¿Î¯¿Î˛¿Ï=¿ÏC¿ÏY¿Ï_¿ÏÇ¿Ïà¿Ïñ¿ÏØ¿ÏÕ¿Ï¿Ì/¿Ì<¿ÌG¿ÌO¿ÌY¿Ìk¿Ìq¿ÌÅ¿Ìá¿Ì”¿ÌÔ¿Ó¿Ó:¿Óî¿Ó≠¿Ó±¿Ó≤¿ÓÂ¿Ó˛¿Ô¿ÔÉ¿Ô‘¿ÔÁ¿ÔÒ¿¿¿	¿4¿:¿r¿x¿¶¿¨¿‰¿Í¿Ò3¿Ò9¿ÒO¿Òr¿Òx¿Ò⁄¿ÒÏ¿Ú ¿Új¿Ú‘¿ÛY¿Ûö¿Ûº¿Ûÿ¿Ù¿ÙQ¿Ùh¿Ùâ¿Ùç¿Ùé¿Ùµ¿Ù–¿Ù‡¿Ù˚¿ı¿ı¿ıD¿ı|¿ıï¿ı±¿ı¡¿ı›¿ı¿ı˙¿ˆ¿ˆ!¿ˆ"¿ˆS¿ˆl¿ˆº¿˜¿˜K¿˜L¿˜w¿˜í¿˜ø¿˜¿¿˜‚¿¯¿¯U¿¯â¿¯ö¿¯º¿¯∆¿¯˙¿¯˚¿˘2¿˘|¿˘ù¿˘®¿˘“¿˙¿˙(¿˙`¿˙m¿˙w¿˙≠¿˙µ¿˙∂¿˙˘¿˚¿˚#¿˚)¿˚F¿˚J¿˚K¿˚õ¿˚„¿˚˜¿˚˝¿¸6¿¸<¿¸{¿¸Å¿¸ó¿¸ù¿¸¿¿¸∆¿¸‘¿¸Ô¿˝¿˝A¿˝Ñ¿˝ë¿˝ú¿˝§¿˝Æ¿˝¿¿˝∆¿˝÷¿˝‹¿˛,¿˛[¿˛o¿˛ÿ¿ˇ¿ˇx¿ˇî¿ˇò¿ˇô¿ˇÂ¿ -¿ A¿ G¿ ä¿ ê¿ …¿ œ¿¿¿V¿\¿r¿ï¿õ¿	¿¿/¿∆¿0¿µ¿ˆ¿¿4¿o¿¥¿ﬁ¿ˇ¿¿¿V¿q¿Å¿ú¿Ø¿π¿Â¿¿n¿≠¿¿!¿=¿M¿i¿|¿Ü¿©¿≠¿Æ¿˛¿/¿5¿q¿w¿∂¿º¿“¿ÿ¿˚¿	¿	¿	0¿	\¿	∂¿	⁄¿	Â¿	Ì¿	˜¿
	¿
¿
¿
%¿
+¿
u¿
°¿
µ¿¿@¿m¿„¿ˇ¿¿¿P¿Å¿á¿Õ¿”¿¿¿M¿S¿ú¿¢¿∏¿€¿·¿T¿f¿z¿¿|¿¿B¿g¿É¿æ¿¸¿,¿M¿Q¿R¿°¿º¿Ã¿Á¿˙¿¿0¿`¿ò¿Ω¿÷¿¿;¿]¿e¿w¿}¿ô¿ö¿™¿∆¿Ÿ¿„¿¿
¿¿E¿K¿|¿Ç¿í¿ò¿Á¿2¿{¿ß¿ª¿!¿<¿e¿“¿÷¿◊¿¿¿R¿X¿â¿è¿«¿Õ¿¿*¿«¿¿]¿‚¿#¿H¿d¿ü¿‡¿¿%¿)¿*¿m¿à¿´¿π¿ø¿œ¿Í¿˝¿¿B¿n¿¡¿¿Ç¿≤¿Ÿ¿¿#¿3¿O¿b¿l¿Ç¿ß¿≠¿±¿≤¿¸¿5¿;¿v¿|¿å¿í¿ﬂ¿Ú¿ B¿ q¿ Ö¿ ¯¿!!¿!M¿!¬¿!∆¿!«¿"¿"J¿"P¿"ï¿"õ¿"÷¿"‹¿#¿#¿#c¿#w¿$!¿$M¿$∫¿%?¿%Ä¿%•¿%¡¿%¸¿&=¿&i¿&ä¿&é¿&è¿&⁄¿&ı¿'-¿'â¿'Â¿(\¿(}¿(ñ¿(Ω¿(Ã¿(‘¿(Ê¿(Ï¿)<¿)c¿)ë¿)≠¿)Ê¿)Í¿)Î¿*¿*¿*L¿*R¿*b¿*h¿*≥¿*À¿*›¿+A¿+a¿+ï¿+©¿+Ø¿+È¿,)¿,<¿,B¿,b¿,î¿,®¿,Æ¿,Ì¿,Ò¿,Ú¿-=¿-ã¿-ø¿-≈¿-˜¿-˝¿.¿.¿.\¿.§¿.Û¿/$¿/8¿/z¿/Ÿ¿/ˆ¿0
¿0¿0@¿0A¿0é¿0√¿1¿1!¿1'¿1;¿1}¿1ê¿1ñ¿1ó¿1˘¿2¿2q¿2Ñ¿2ä¿2ã¿2π¿2‡¿2ˆ¿3¿3/¿3D¿3m¿3¨¿3¡¿3«¿3À¿3Ã¿3¸¿4¿4/¿45¿4K¿4Q¿4à¿4é¿4ú¿4∏¿4—¿4Ÿ¿4„¿4ı¿5¿5¿5C¿5I¿5W¿5t¿5®¿5∞¿5∫¿5Ã¿5‡¿6¿6*¿6:¿6U¿6h¿6r¿6ƒ¿6˚¿7i¿7∏¿7Ô¿8!¿8)¿8a¿8n¿8ä¿8ƒ¿8 ¿8ˇ¿94¿9:¿9õ¿9´¿9«¿9⁄¿9‰¿:¿:¿:¿:K¿:Q¿:É¿:â¿:ü¿:•¿:»¿:Œ¿:‹¿:ı¿;0¿;8¿;B¿;T¿;Ä¿;Ÿ¿;˘¿<!¿<1¿<9¿<F¿<î¿<ö¿<û¿<ü¿<Ï¿<Ú¿='¿=R¿=m¿=}¿=ò¿=´¿=µ¿=€¿>¿>`¿>t¿>ß¿>∑¿>”¿>Ê¿>¿?¿?¿?i¿?r¿?x¿?|¿?}¿?Œ¿@¿@¿@R¿@à¿@£¿@≥¿@Œ¿@·¿@Î¿A¿As¿Aœ¿BF¿Bg¿BÄ¿Bß¿B∂¿Bæ¿B–¿B÷¿C&¿CD¿Cw¿Cá¿C£¿C∂¿C¿¿Cƒ¿C≈¿D¿D¿Dl¿Dº¿E	¿ES¿E}¿EÉ¿E–¿F!¿F9¿Ff¿F≤¿G ¿G¿G2¿Gâ¿G÷¿H&¿HV¿H°¿HÃ¿I¿I™¿I∑¿IÙ¿I˙¿J¿JX¿Jw¿Jî¿J…¿Jœ¿J–¿K¿K¿K¿K,¿KV¿Kƒ¿K»¿K…¿L¿L4¿L_¿Lâ¿L–¿L‘¿L’¿M¿MA¿MG¿MW¿M]¿Mß¿Mﬁ¿N'¿N(¿Nv¿NŒ¿Nœ¿O
¿O¿OT¿OZ¿Oñ¿Oµ¿O◊¿Oˇ¿P-¿PJ¿Pv¿P¿Pæ¿P„¿Q!¿QJ¿Qd¿Qí¿Q§¿Q¨¿QÚ¿R.¿R6¿R<¿R@¿RA¿Ra¿Rg¿Rµ¿R˘¿S¿S@¿Sb¿Sä¿S–¿S˜¿Sˇ¿T¿T	¿T
¿T6¿T7¿Tk¿Tì¿Tó¿Tò¿TŒ¿T˘¿T˝¿T˛¿U¿Uã¿U÷¿V¿Vf¿Vï¿W¿W(¿WL¿Wõ¿W¬¿WÃ¿W“¿X¿X#¿X$¿Xq¿Xπ¿XÎ¿Y¿Y¿Y&¿Y,¿Y=¿YA¿YB¿Yé¿Y’¿YÓ¿Z ¿Z;¿ZU¿Z]¿Zc¿Zv¿Zz¿Z{¿Zá¿ZÆ¿Z…¿ZÍ¿ZÎ¿[9¿[á¿[ö¿[ø¿[˙¿\:¿\â¿\—¿]	¿]#¿]/¿]¿]∫¿^¿^,¿^9¿^g¿^~¿^â¿^¢¿^œ¿_ ¿_5¿_U¿_´¿_”¿`¿`+¿`Q¿`r¿`ó¿`¿¿`Ú¿a¿a6¿a\¿aì¿b¿b)¿b<¿bM¿b\¿bi¿bt¿b}¿bÑ¿bà¿bä¿bã¿b®¿b±¿bæ¿b¿¿b¡¿bÍ¿c¿c:¿cT¿ct¿cô¿cæ¿cÏ¿d'¿dG¿dl¿dï¿dñ¿d‹¿e¿e3¿eã¿eü¿e«¿f¿fH¿f°¿fß¿f´¿f¨¿f–¿fÓ¿g¿g¿g-¿g.¿gO¿gÑ¿g£¿gß¿g®¿gπ¿g‰¿h¿h	¿h
¿h¿hO¿hP¿hΩ¿hˆ¿i¿i¿i3¿iU¿iy¿iÄ¿iÑ¿iÜ¿iá¿iÃ¿iÌ¿j¿j"¿jH¿js¿jt¿jº¿j›¿k¿k.¿k[¿ká¿kà¿kî¿kø¿k¸¿l¿l"¿l?¿lS¿l[¿l_¿l`¿ll¿lå¿l°¿lº¿lΩ¿l…¿m¿m`¿mr¿mv¿mx¿my¿m¬¿mÁ¿n¿n$¿nJ¿ny¿nz¿n∆¿nÁ¿o¿o£¿o–¿p ¿p¿p¿p~¿p¢¿p£¿pØ¿p⁄¿pÙ¿qN¿qj¿qß¿q¡¿qﬁ¿q˚¿r¿r¿r¿r¿r(¿rH¿r~¿rô¿rö¿r¶¿rﬂ¿s-¿s@¿sD¿sF¿sG¿sò¿s‹¿t¿t¿t!¿t"¿tD¿t^¿tü¿tœ¿u¿u%¿u\¿uπ¿u›¿uﬁ¿v'¿vr¿vs¿v¢¿vŒ¿v¯¿w
¿w¿w¿w@¿w]¿w“¿x&¿xC¿x}¿x¥¿x÷¿y¿y5¿yö¿y´¿y·¿z¿z!¿z3¿z;¿z<¿z\¿zƒ¿z˘¿{¿{F¿{ê¿{∆¿|!¿|Q¿|°¿|˚¿}0¿}8¿}>¿}Ø¿}ˇ¿~ ¿~H¿~I¿~∞¿~±¿~œ¿~ı¿¿¿¿¿0¿I¿`¿ç¿≠¿≥¿ﬂ¿Ä¿Ä8¿Är¿Ä´¿Ä◊¿Å¿Å¿Å¿Å¿Åb¿Åò¿Å¨¿Å≤¿Å⁄¿Ç¿Ç¿Ç!¿Ç'¿Ç8¿Ç<¿Ç=¿ÇN¿Çh¿Çë¿Çü¿Ç•¿Ç«¿Çﬁ¿Ç‚¿Ç„¿Çı¿Çˆ¿É+¿É,¿ÉÖ¿Éü¿ÉÀ¿Ñ¿ÑZ¿Ño¿Ñu¿ÑÀ¿ÑÌ¿Ö¿Ö¿Ö8¿Öñ¿Öú¿ÖØ¿Ö≥¿Ö¥¿Ö◊¿Öÿ¿Ö‰¿Ü¿Ü*¿Ü.¿Ü/¿Ü;¿Üx¿Ü¡¿á/¿áE¿áv¿á~¿áÇ¿áÉ¿áè¿á…¿áÏ¿á¿áÒ¿á˝¿à¿à:¿à>¿à?¿àK¿àj¿àl¿àm¿à≤¿à∂¿â¿â/¿âÄ¿âÅ¿â…¿ä¿ä#¿ä'¿äw¿äæ¿ä¬¿äÒ¿ãS¿ãT¿ãê¿ãî¿ã‚¿ã˛¿å¿å2¿åp¿åq¿åø¿åˆ¿å˙¿çI¿çò¿ç‹¿ç‡¿é0¿é{¿é«¿è¿èe¿è|¿èÄ¿èÕ¿èÚ¿èˆ¿êG¿êï¿ê‹¿ë ¿ë¿ëO¿ëû¿ë“¿ë÷¿ëÍ¿í:¿ív¿íz¿í“¿í‚¿ì'¿ìP¿ìj¿ìû¿ìª¿ì–¿ì÷¿ì◊¿î%¿îu¿î¥¿îÂ¿îÊ¿ï)¿ï/¿ï¿ïÃ¿ñ¿ñ8¿ñ>¿ñã¿ñŸ¿ñ˜¿ó$¿ó%¿óm¿ó~¿óÑ¿ó√¿óÛ¿óÙ¿òA¿òR¿òX¿ò°¿ò‹¿ô*¿ôP¿ôh¿ôÇ¿ôø¿ô‚¿ô˘¿ô˝¿ô˛¿öA¿öG¿öó¿öæ¿öø¿öˆ¿ö¸¿õ0¿õQ¿õe¿õf¿õr¿õö¿õõ¿õß¿õÕ¿õÊ¿ú	¿ú¿ú¿ú¿ú ¿ú;¿úV¿úk¿úó¿úõ¿úú¿ú®¿ú–¿úÍ¿ù¿ù
¿ù¿ù%¿ù&¿ù2¿ùE¿ùZ¿ùö¿ù∞¿ù¥¿ùµ¿ù¡¿û ¿û¿û#¿ûh¿û~¿ûÇ¿ûÉ¿û¨¿û⁄¿ûˆ¿ü2¿ü\¿üs¿üÉ¿üã¿üÕ¿ü‚¿ü˚¿† ¿†(¿†,¿†-¿†ç¿†è¿†ê¿†–¿†‘¿°%¿°7¿°;¿°|¿°≈¿°˘¿¢C¿¢d¿¢Ñ¿¢ä¿¢ã¿¢‘¿¢ı¿£¿£¿£¿£3¿£t¿£x¿£z     _kAndroidRefocusingDelayDurationRoutePopDispositionRouteRouteSettingsPageNavigatorObserverHeroControllerScopeRouteTransitionRecordTransitionDelegateDefaultTransitionDelegate"kDefaultRouteTraversalEdgeBehavior	Navigator_RouteLifecycle_RoutePlaceholder_RouteEntry_NavigatorObservation_NavigatorPushObservation_NavigatorPopObservation_NavigatorRemoveObservation_NavigatorReplaceObservation_HistoryNavigatorState_RouteRestorationType_RestorationInformation_NamedRestorationInformation _AnonymousRestorationInformation_HistoryPropertyRestorableRouteFutureNavigationNotification (\