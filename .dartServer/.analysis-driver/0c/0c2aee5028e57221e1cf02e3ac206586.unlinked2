ÄÏ_tokeninstance__getRootIsolateToken	_instance_configurationonPlatformConfigurationChanged_onPlatformConfigurationChanged#_onPlatformConfigurationChangedZonedisplays	_displaysviews_viewsviewimplicitView_debugLastImplicitView_debugRecordedLastImplicitViewonMetricsChanged_onMetricsChanged_onMetricsChangedZone_addView_removeView_updateDisplays_updateWindowMetricsonViewFocusChange_onViewFocusChange_onViewFocusChangeZonerequestViewFocusChangeonBeginFrame_onBeginFrame_onBeginFrameZone_beginFrameonDrawFrame_onDrawFrame_onDrawFrameZone
_drawFrameonPointerDataPacket_onPointerDataPacket_onPointerDataPacketZone_dispatchPointerDataPacket_kPointerDataFieldCount_unpackPointerDataPacket_keyDataListener	onKeyData
_onKeyData_kKeyDataFieldCount_unpackKeyDataonReportTimings_onReportTimings_onReportTimingsZone_setNeedsReportTimings_nativeSetNeedsReportTimings__nativeSetNeedsReportTimings_reportTimingssendPlatformMessage_sendPlatformMessage__sendPlatformMessagesendPortPlatformMessage_sendPortPlatformMessage__sendPortPlatformMessageregisterBackgroundIsolate__registerBackgroundIsolateonPlatformMessage_onPlatformMessage_onPlatformMessageZone_respondToPlatformMessage__respondToPlatformMessage%_zonedPlatformMessageResponseCallback_dispatchPlatformMessagesetIsolateDebugName_setIsolateDebugNamerequestDartPerformanceMode_requestDartPerformanceModegetPersistentIsolateData_getPersistentIsolateDatascheduleFrame_scheduleFramescheduleWarmUpFrame_endWarmUpFrameaccessibilityFeaturesonAccessibilityFeaturesChanged_onAccessibilityFeaturesChanged#_onAccessibilityFeaturesChangedZone_updateAccessibilityFeaturesupdateSemantics_updateSemanticslocalelocalescomputePlatformResolvedLocale_computePlatformResolvedLocale__computePlatformResolvedLocaleonLocaleChanged_onLocaleChanged_onLocaleChangedZone_updateLocales_localeClosureinitialLifecycleState_initialLifecycleState_initialLifecycleStateAccessed_updateInitialLifecycleStatealwaysUse24HourFormattextScaleFactoronTextScaleFactorChanged_onTextScaleFactorChanged_onTextScaleFactorChangedZonenativeSpellCheckServiceDefined_nativeSpellCheckServiceDefined supportsShowingSystemContextMenu!_supportsShowingSystemContextMenubrieflyShowPassword_brieflyShowPasswordplatformBrightnessonPlatformBrightnessChanged_onPlatformBrightnessChanged _onPlatformBrightnessChangedZonesystemFontFamilyonSystemFontFamilyChanged_onSystemFontFamilyChanged_onSystemFontFamilyChangedZone_updateUserSettingsDatasemanticsEnabledonSemanticsEnabledChanged_onSemanticsEnabledChanged_onSemanticsEnabledChangedZone_updateSemanticsEnabledonSemanticsActionEvent_onSemanticsActionEvent_onSemanticsActionEventZone_updateFrameData	frameData
_frameDataonFrameDataChanged_onFrameDataChanged_onFrameDataChangedZone_dispatchSemanticsAction_onError_onErrorZoneonError_dispatchErrordefaultRouteName_defaultRouteNamescaleFontSize_cachedFontSizes_scaleAndMemoize_getScaledFontSizecopyWithconfigurationId	displayIddevicePixelRatiosize
viewInsetsviewPaddingsystemGestureInsetspaddinggestureSettingsdisplayFeaturestoString
vsyncStart
buildStartbuildFinishrasterStartrasterFinishrasterFinishWallTimelayerCacheCountlayerCacheBytespictureCacheCountpictureCacheBytesframeNumber_dataLengthtimestampInMicroseconds_rawDuration_rawInfobuildDurationrasterDurationvsyncOverhead	totalSpanlayerCacheMegabytespictureCacheMegabytes_data	_formatMSdetachedresumedinactivehiddenpausedexitcancel
cancelablerequiredlefttoprightbottomzerominWidthmaxWidth	minHeight	maxHeightisSatisfiedByisTight/==hashCodeboundstypestateunknownfoldhingecutoutpostureFlatpostureHalfOpenedlanguageCode_languageCode_deprecatedLanguageSubtagMap
scriptCodecountryCode_countryCode_deprecatedRegionSubtagMap_cachedLocale_cachedLocaleStringtoLanguageTag_rawToStringbalancedlatency
throughputmemoryviewIdnodeId	arguments_noArgumentPlaceholder	direction	unfocusedfocused	undefinedforwardbackward$VoidCallbackFrameCallbackTimingsCallbackPointerDataPacketCallbackKeyDataCallbackSemanticsActionEventCallbackPlatformMessageResponseCallbackPlatformMessageCallback_SetNeedsReportTimingsFuncErrorCallback_kUnsetGestureSetting_kFlutterKeyDataChannel_wrapUnmodifiableByteDataRootIsolateTokenPlatformDispatcher_PlatformConfiguration_ViewConfiguration
FramePhase_FrameTimingInfoFrameTimingAppLifecycleStateAppExitResponseAppExitTypeViewPaddingWindowPaddingViewConstraintsDisplayFeatureDisplayFeatureTypeDisplayFeatureStateLocaleDartPerformanceModeSemanticsActionEventViewFocusChangeCallbackViewFocusEventViewFocusStateViewFocusDirectionÅ3dartuivoidonBeginFrameDateTimeDurationonReportTimingsListonPointerDataPacketPointerDataPacket	onKeyDataboolKeyDataonSemanticsActionEventsendPlatformMessageonPlatformMessageByteDataChannelBufferssetListener
DeprecatedStringonErrorObject
StackTracedoublepragmaasUnmodifiableViewint_NativeInt64symbolconfigurationinstanceZonerootcurrentFlutterViewdisplayIterableDisplayvaluesMapidViewofBuildContextviews_implicitViewId	identicalViewConfigurationWidgetsBindingObserver
MediaQuerycontainsKey_invokeremoveclear_viewConfigurationfocusedforward	unfocused	undefinedviewIdSceneBuilderrenderscheduleFrame_invoke1microsecondsGestureBinding	Int64ListbytesPerElementlengthInBytesPointerDataiadd
embedderIdgetInt64_kFakeHostEndian	timeStampchangePointerChangekindPointerDeviceKind
signalKindPointerSignalKinddevicepointerIdentifier	physicalX
getFloat64	physicalYphysicalDeltaXphysicalDeltaYbuttonsobscuredsynthesizedpressurepressureMinpressureMaxdistancedistanceMaxsizeradiusMajorradiusMinor	radiusMin	radiusMaxorientationtiltplatformDatascrollDeltaXscrollDeltaYpanXpanY	panDeltaX	panDeltaYscalerotationdataChannelCallbackkeyData	Uint8Listcallbackbuffer
asByteDatapacketchannelBuffersclearListener	getUint64utf8decoderconvertasUint8ListtypeKeyEventTypephysicallogical	characterSchedulerBindingaddTimingsCallbackbuildDurationrasterDuration	totalSpanTimelineVoidBoollength_dataLengthsublist	ExceptionHandleSendPort
nativePortDartPluginRegistrantensureInitialized_tokenIntPtrrunUnaryGuardedkControlChannelNamehandleMessage_invoke3responseDatapushindexIntscheduleWarmUpFrameTimerrun
beginFrame	drawFrameAccessibilityFeaturesaccessibilityFeaturescopyWithSemanticsUpdate_NativeSemanticsUpdatePointerisEmptyfromSubtagsfirstlocaleslanguageCodecountryCode
scriptCode
isNotEmptylocaleIndextoStringlifecycleStateshowTimePickeralwaysUse24HourFormattextScaleFactorEditableTextStateSpellCheckConfigurationAdaptiveTextSelectionToolbarEditableTextobscureText
BrightnesslightplatformBrightnesssystemFontFamilyjsondecodenumtoDoubledark
StateErrorvalueconfigurationIdsemanticsEnabled	FrameDataframeNumberSemanticsAction	fromIndexnodeId	arguments	runBinaryhandleUncaughtErroresrunApp	NavigatorSystemChannels
navigationtextScalerOfisFinitefloorceillowerupper_getScaledFontSize	errorCodeDoubledefaultRouteNameSizezeroGestureSettings	_displaysboundshingecutoutfoldstateoverrideruntimeTypevsyncOverhead
vsyncStart
buildStartbuildFinishrasterStartrasterFinishrasterFinishWallTime
timestampslayerCacheCountlayerCacheBytespictureCacheCountpictureCacheByteslastinMicrosecondsdetachedresumedinactivepausedAppLifecycleListenerdidChangeAppLifecycleStateUIKitactivityAppKithiddenonDrawFrameonExitRequesteddidRequestAppExitServicesBindingexitApplicationWidgetsBindingexitrequiredcancel
viewInsetspadding
EdgeInsetsScaffoldlefttoprightbottomBoxConstraintswidthheightinfinityminWidthmaxWidth	minHeight	maxHeighthashtoStringAsFixedpostureFlatpostureHalfOpenedunknownRectUnicodeIANAlocalekeepToStringStringBufferwriteSemanticsNodeSemanticsBindingperformSemanticsActiononViewFocusChangeViewFocusChange ÁfN4DúÎˆ≥ﬂdï˙»Ì   ¿:Ü ¿…Çä» <ÄÜÄ§ÄµÄ∂Ä¸Å$Å%ÅZÅ^Å´ÅÒÇ7Ç;ÇàÇ’É	ÉCÉDÉ|ÉÄÉ≠ÉÚÑ>ÑÖÑ‘Ö ÖlÖ∫ÖÈÖ¸Ü@ÜAÜ}Ü ÜÀÜ˝ááNáÇáπá∫á˘àLàMààÉàÀà˜â@âAâÇâÜâ¿âÕää:ä<äµä∂äﬂãã ãPãTã°ã ãŒåålå¢åÚåÛç@çkçlçßç™çÎé%é&é@é{éüé†éÃéÂèè	èWèkèlèºêê9êhê¢ê©ê™ëë4ë6ë7ë`ëdë´ëØë˚íííkíöíûí‚ììì\ì•ìıîBîQîlî∑îÏïïBïFïGïqïwïªññXñ^ñØñ˝óKóïóÊòòòcò¥ò‡ô0ô~ôóôŒööö_ö`öñöúöÍö˘õPõÅõπõ¯ú(ú`údúeúâúèúﬂúÂù.ù4ùÑù“ùÏùÚû<ûãû◊ü"ü<üòü‡††N†O†ù†¥†∫°
°>°{°|°»°Ÿ¢¢¢\¢ì¢ô¢Ê£1£o£u£ø§	§P§v§|§√••\•™•˘¶G¶å¶í¶¢¶®¶€ß(ßAßcßúß€®®7®ì®€©	©©E©©´©È©¯™!™P™X™k™u™à™å™≥™‚™„´3´J´P´†´‡¨¨
¨X¨g¨m¨µ¨ ¨–¨‡¨Ê≠0≠h≠£≠ﬁÆÆ+Æ\Æ~Æ®Æ¨Æ≠ÆŸÆﬁØØØjØïØ’∞∞V∞å∞ê∞ë∞Ω∞¬∞‚∞Á±4±\±y± ±Î±˘±ˇ≤B≤Y≤è≤ì≤î≤¡≤∆≤Î≥≥3≥a≥à≥é≥ƒ≥»≥…≥ı≥˙¥4¥Ñ¥Ãµµ>µBµCµüµ•µı∂H∂ü∂Ó∑?∑c∑i∑ª∏	∏^∏•∏´∏˛πTπª∫"∫H∫N∫†∫¥∫∫ªª?ªEªìªôª©ªØº(ºlº≥ΩΩKΩzΩ‹ææDægæíæñæóæ‹æ‚ø8øñøæøƒ¿ @¿ @<¿ @B¿ @í¿ @¬¿ @»¿ @ÿ¿ @ﬁ¿ A1¿ AQ¿ Aj¿ Aç¿ A∏¿ Aø¿ B¿ B¿ B¿ BL¿ BR¿ Bõ¿ BÍ¿ C¿ C¿ Cd¿ C•¿ CÚ¿ D¿ DG¿ Dg¿ Dç¿ Dª¿ DŸ¿ Dˇ¿ E¿ E¿ E0¿ EW¿ Eo¿ EÉ¿ Eú¿ E»¿ Eœ¿ E”¿ E‘¿ F¿ F]¿ Fc¿ FÆ¿ F¯¿ G)¿ GG¿ Gl¿ Gò¿ Gµ¿ G⁄¿ Gﬁ¿ Gﬂ¿ H¿ H!¿ HM¿ HQ¿ HR¿ Hì¿ Hô¿ HÍ¿ H˘¿ Hˇ¿ I¿ I¿ Ib¿ Is¿ I¡¿ IÙ¿ J!¿ Jb¿ Já¿ J¥¿ J∏¿ Jπ¿ JÂ¿ K¿ KA¿ Kd¿ KÅ¿ K£¿ KÕ¿ K÷¿ K‹¿ K‡¿ K·¿ L,¿ L{¿ L¨¿ L≠¿ LÙ¿ M'¿ Mo¿ M¥¿ M˜¿ N+¿ NR¿ NÇ¿ Nû¿ NÂ¿ O0¿ Oí¿ OÔ¿ PN¿ P≥¿ P˙¿ QL¿ Qò¿ Q‰¿ R5¿ RÜ¿ RŒ¿ S¿ Sm¿ S∏¿ T¿ TT¿ Tü¿ TÌ¿ U4¿ UÇ¿ U–¿ V¿ Vh¿ V∂¿ V˝¿ WJ¿ Wô¿ WË¿ X/¿ Xv¿ X¬¿ Y¿ YV¿ Y°¿ YË¿ YÚ¿ Z-¿ Z3¿ Z]¿ Za¿ Zb¿ Zµ¿ Z¯¿ [¿ [-¿ [`¿ [ì¿ [º¿ [Ó¿ [˘¿ \¿ \(¿ \1¿ \8¿ \9¿ \v¿ \|¿ \Õ¿ \‹¿ \‚¿ ]1¿ ]g¿ ]ó¿ ]∂¿ ]„¿ ]˛¿ ^¿ ^¿ ^å¿ ^…¿ ^œ¿ ^”¿ ^‘¿ _!¿ _&¿ _N¿ _y¿ _•¿ _¶¿ _Â¿ `¿ `K¿ `L¿ ``¿ `µ¿ a¿ ab¿ ac¿ aà¿ aÈ¿ bA¿ bâ¿ b–¿ bÏ¿ c<¿ cC¿ cD¿ cX¿ c\¿ c]¿ c¶¿ cø¿ c≈¿ d¿ db¿ dÉ¿ dâ¿ d’¿ e"¿ eU¿ e[¿ e¨¿ e˘¿ f:¿ f@¿ fl¿ fr¿ fø¿ g	¿ gY¿ gÜ¿ g¬¿ gÁ¿ h¿ hC¿ h¿ hØ¿ hµ¿ h÷¿ hˇ¿ i¿ i¿ i>¿ i?¿ iò¿ iô¿ i˘¿ j;¿ j<¿ jh¿ jì¿ jŒ¿ k
¿ kR¿ k™¿ k∞¿ kÛ¿ k˜¿ k¯¿ l-¿ l3¿ lÄ¿ lÀ¿ m¿ mR¿ mX¿ m©¿ m∑¿ n¿ n6¿ në¿ n™¿ n»¿ nŒ¿ n“¿ n”¿ o=¿ op¿ oq¿ o„¿ p\¿ p]¿ p£¿ p©¿ p˘¿ qI¿ qö¿ qÈ¿ r6¿ rU¿ ru¿ rÜ¿ rö¿ rÆ¿ r√¿ r›¿ s(¿ sA¿ s_¿ se¿ si¿ sj¿ s«¿ t¿ t¿ tÖ¿ tÒ¿ tÚ¿ u>¿ uá¿ u°¿ u‹¿ v
¿ v9¿ v=¿ v¢¿ vÈ¿ vÍ¿ w-¿ w3¿ w|¿ wú¿ w¢¿ wÚ¿ x@¿ xV¿ x\¿ x≠¿ x¸¿ y¿ y¿ yg¿ yv¿ yÖ¿ yª¿ yˆ¿ y˙¿ zB¿ zq¿ zú¿ z´¿ z·¿ {¿ { ¿ {]¿ {Ä¿ {´¿ {Ø¿ {∞¿ {‹¿ |N¿ |O¿ |º¿ }¿ }¿ }[¿ }ü¿ }¿ ~¿ ~%¿ ~A¿ ~T¿ ~Z¿ ~[¿ ~ú¿ ~Ã¿ ~Õ¿ ~Î¿ #¿ *¿ .¿ /¿ q¿ w¿ ∏¿ Ä¿ Ä¿ Äi¿ Äü¿ Ä´¿ Äÿ¿ ÄÍ¿ Å¿ Å'¿ ÅS¿ Åó¿ Å≤¿ Å“¿ Å‡¿ ÅÓ¿ Ç¿ ÇP¿ Ç[¿ Çd¿ Çq¿ Ç≤¿ ÇÔ¿ Ç˘¿ Çˇ¿ É¿ É¿ ÉM¿ É\¿ Éb¿ É≥¿ Éı¿ É˚¿ ÑJ¿ Ñü¿ Ñ‰¿ Ö+¿ Ö,¿ Öå¿ Ö∆¿ Ö«¿ Ü*¿ Ü0¿ Üí¿ Üƒ¿ Ü ¿ á ¿ á^¿ áã¿ áè¿ áê¿ áÛ¿ à0¿ à1¿ àÄ¿ à≤¿ à∏¿ â	¿ âZ¿ âà¿ âé¿ â◊¿ â˚¿ äB¿ äC¿ ä§¿ ä›¿ äﬁ¿ ã/¿ ãY¿ ã_¿ ão¿ ãu¿ ã¿¿ ãﬂ¿ å-¿ å>¿ åj¿ åk¿ åø¿ åË¿ åÈ¿ ç8¿ çÄ¿ çÜ¿ ç’¿ é%¿ él¿ éπ¿ è
¿ è¿ è"¿ èX¿ èÜ¿ èå¿ è⁄¿ ê%¿ ê+¿ ê;¿ êA¿ êé¿ ê≈¿ ë¿ ëS¿ ëµ¿ ë˚¿ í¿ í)¿ í<¿ íU¿ í]¿ ía¿ íb¿ í∑¿ í·¿ í‚¿ ì/¿ ìä¿ ìã¿ ì÷¿ ìÂ¿ ìÎ¿ î<¿ îK¿ î¢¿ î”¿ ï¿ ïJ¿ ïz¿ ï≤¿ ï∂¿ ï∑¿ ï„¿ ñ¿ ñd¿ ñ≠¿ ñÛ¿ ó¿ ó¿ ó<¿ óf¿ óm¿ ó¿¿ ò¿ ò¿ ò¿ òa¿ òg¿ ò∂¿ ô ¿ ô¿ ô¿ ôd¿ ôì¿ ô•¿ ôÛ¿ ö=¿ ö>¿ öç¿ ö›¿ ö˘¿ õ ¿ õf¿ õg¿ õ ¿ ú¿ ú¿ úK¿ úQ¿ ú°¿ ú‡¿ úÊ¿ ù4¿ ùl¿ ùr¿ ùæ¿ û¿ û7¿ ûå¿ ûç¿ ûÕ¿ û”¿ ü#¿ üb¿ üh¿ üπ¿ †¿ †¿ †¿ †f¿ †l¿ †|¿ †Ç¿ †Õ¿ †˜¿ °-¿ °.¿ °d¿ °j¿ °ú¿ °¢¿ °Ô¿ °ı¿ ¢5¿ ¢t¿ ¢Ω¿ ¢˘¿ £-¿ £b¿ £ñ¿ £…¿ £œ¿ £–¿ §&¿ §'¿ §D¿ §e¿ §Ü¿ §ø¿ §¯¿ §˛¿ •¿ •¿ •¿ •†¿ •°¿ ¶¿ ¶q¿ ¶r¿ ¶¥¿ ¶∫¿ ß¿ ß¿ ß ¿ ß0¿ ß6¿ ßÅ¿ ß±¿ ßÍ¿ ®¿ ®5¿ ®e¿ ®Ü¿ ®Ø¿ ®≥¿ ®¥¿ ®‡¿ ©¿ ©2¿ ©q¿ ©∫¿ ©Í¿ ™7¿ ™Ä¿ ™Œ¿ ´¿ ´¿ ´E¿ ´Ñ¿ ´√¿ ´ˇ¿ ¨	¿ ¨n¿ ¨å¿ ¨î¿ ¨ö¿ ¨¥¿ ¨¬¿ ¨»¿ ≠¿ ≠d¿ ≠ò¿ ≠ú¿ ≠ù¿ ≠…¿ ≠˘¿ ≠˙¿ ÆC¿ ÆI¿ Æã¿ Æë¿ Æ‚¿ Ø¿ Ø2¿ Ø]¿ ØÄ¿ ØÑ¿ ØÖ¿ Ø´¿ Ø¨¿ Ø˝¿ ∞K¿ ∞c¿ ∞í¿ ∞ì¿ ∞ø¿ ∞Û¿ ±F¿ ±a¿ ±å¿ ±≤¿ ±∏¿ ±º¿ ±Ω¿ ≤¿ ≤¿ ≤!¿ ≤P¿ ≤ö¿ ≤õ¿ ≤¡¿ ≤«¿ ≥¿ ≥F¿ ≥L¿ ≥ò¿ ≥ß¿ ≥≠¿ ≥Ω¿ ≥√¿ ¥¿ ¥8¿ ¥x¿ ¥y¿ ¥ƒ¿ ¥ ¿ µ¿ µ*¿ µ0¿ µ@¿ µF¿ µë¿ µ¡¿ ∂¿ ∂7¿ ∂i¿ ∂¢¿ ∂Ã¿ ∂˛¿ ∑¿ ∑¿ ∑O¿ ∑U¿ ∑î¿ ∑◊¿ ∑Î¿ ∏9¿ ∏i¿ ∏j¿ ∏∫¿ ∏¿¿ π¿ π_¿ πk¿ πΩ¿ πÔ¿ π¿ ∫=¿ ∫i¿ ∫o¿ ∫¿ ∫Ö¿ ∫”¿ ∫Ï¿ ª$¿ ªH¿ ªI¿ ªò¿ ª‚¿ ª¸¿ ºF¿ ºG¿ ºï¿ ºõ¿ ºÏ¿ º˚¿ Ω¿ Ω¿ Ω¿ Ωb¿ Ωí¿ Ω„¿ æ¿ æF¿ æÇ¿ æØ¿ æ‰¿ æË¿ æÈ¿ ø4¿ øw¿ øx¿ øƒ¿ ø ¿ ¿¿ ¿*¿ ¿0¿ ¿@¿ ¿F¿ ¿ë¿ ¿¡¿ ¡¿ ¡:¿ ¡m¿ ¡ß¿ ¡“¿ ¬¿ ¬	¿ ¬
¿ ¬6¿ ¬h¿ ¬Ω¿ ¬’¿ ¬„¿ ¬È¿ ¬Í¿ √;¿ √ä¿ √Ï¿ ƒ¿ ƒf¿ ƒs¿ ƒ¢¿ ƒ®¿ ƒ©¿ ≈¿ ≈C¿ ≈è¿ ≈ú¿ ≈Õ¿ ≈”¿ ≈‘¿ ≈Û¿ ∆?¿ ∆f¿ ∆ò¿ ∆û¿ ∆Ó¿ «¿ «K¿ «ß¿ «Æ¿ «¯¿ »:¿ »É¿ »Ó¿ …P¿ …ƒ¿  )¿  ¬¿  –¿  ÷¿ À¿ À3¿ Àg¿ Àï¿ Àø¿ ÀÁ¿ ÀÓ¿ Ã@¿ Ãb¿ ÃÅ¿ Ã…¿ Ãœ¿ ÃÙ¿ ÕB¿ ÕH¿ Õk¿ Õµ¿ Õª¿ Õø¿ Õ¿¿ Œ¿ Œ8¿ Œ>¿ Œã¿ Œö¿ Œ⁄¿ Œ€¿ œ*¿ œ0¿ œx¿ œê¿ œ›¿ –	¿ –<¿ –v¿ –°¿ –‘¿ –ÿ¿ –Ÿ¿ —¿ —4¿ —}¿ —∫¿ —»¿ —Œ¿ “¿ “$¿ “+¿ “}¿ “≈¿ “…¿ “ ¿ ”¿ ”;¿ ”A¿ ”ç¿ ”‘¿ ”⁄¿ ‘"¿ ‘:¿ ‘ë¿ ‘ ¿ ‘˙¿ ’A¿ ’i¿ ’ô¿ ’ù¿ ’û¿ ’ ¿ ’ı¿ ÷ ¿ ÷O¿ ÷]¿ ÷c¿ ÷õ¿ ÷’¿ ÷Ÿ¿ ÷⁄¿ ◊¿ ◊7¿ ◊e¿ ◊f¿ ◊∞¿ ◊Ô¿ ÿ¿ ÿ@¿ ÿs¿ ÿó¿ ÿ√¿ ÿ«¿ ÿ»¿ ÿÙ¿ Ÿ>¿ Ÿb¿ ŸÄ¿ Ÿ£¿ Ÿø¿ ŸÒ¿ ⁄	¿ ⁄K¿ ⁄d¿ ⁄m¿ ⁄t¿ ⁄x¿ ⁄y¿ ⁄î¿ ⁄™¿ ⁄´¿ ⁄˜¿ €¿ €¿ €[¿ €¨¿ €ı¿ ‹%¿ ‹+¿ ‹z¿ ‹À¿ ›¿ ›*¿ ›0¿ ›¿ ›œ¿ ﬁ¿ ﬁ:¿ ﬁc¿ ﬁ|¿ ﬁù¿ ﬁ°¿ ﬁ¢¿ ﬁﬂ¿ ﬁ˚¿ ﬂ¿ ﬂ¿ ﬂ7¿ ﬂ8¿ ﬂi¿ ﬂî¿ ﬂ°¿ ﬂ≠¿ ‡¿ ‡$¿ ‡U¿ ‡k¿ ‡s¿ ‡y¿ ‡}¿ ‡~¿ ‡À¿ ‡€¿ ‡·¿ ·+¿ ·1¿ ·B¿ ·H¿ ·b¿ ·’¿ ‚&¿ ‚v¿ ‚¿¿ „¿ „O¿ „∫¿ „¿¿ „Õ¿ „”¿ „È¿ ‰q¿ ‰¬¿ Â¿ Â`¿ Âá¿ Âç¿ Âù¿ Â£¿ Âÿ¿ Ê"¿ ÊG¿ Ê}¿ Ê~¿ Ê◊¿ Á¿ Á¿ ÁW¿ ÁÅ¿ Áá¿ Á◊¿ Ë%¿ Ëw¿ Ë¡¿ Ë’¿ Ë€¿ È-¿ Èu¿ Èƒ¿ È ¿ Í¿ Ím¿ Í∏¿ Í«¿ Í˘¿ Î¿ ÎC¿ ÎD¿ Îf¿ ÎÖ¿ Îã¿ Îå¿ Îƒ¿ Î˙¿ Ï#¿ Ïe¿ Ïπ¿ Ïø¿ Ì1¿ Ì2¿ Ìä¿ Ì‡¿ ÓP¿ ÓW¿ Ó[¿ Ó\¿ Óö¿ Ó¿¿ Ó˙¿ Ô-¿ Ôn¿ Ôë¿ Ô›¿ Ô˘¿ ¿ ¿ W¿ v¿ ñ¿ ∞¿ ∂¿ ∑¿ ˛¿ Òj¿ ÒÉ¿ Ò’¿ Ò€¿ ÒÛ¿ Ú¿ ÚN¿ Úâ¿ Ú‡¿ Û¿ ÛV¿ Û\¿ Ûm¿ Ûq¿ Ûr¿ Ûª¿ Û‘¿ ÛŸ¿ Ù ¿ Ùl¿ Ù∫¿ ı¿ ıX¿ ı©¿ ı˘¿ ˆ6¿ ˆÖ¿ ˆ¢¿ ˆß¿ ˆ˜¿ ˜G¿ ˜ò¿ ˜Ë¿ ¯¿ ¯Ñ¿ ¯ﬂ¿ ¯·¿ ¯‚¿ ˘¿ ˘	¿ ˘C¿ ˘b¿ ˘É¿ ˘∆¿ ˘Ó¿ ˙¿ ˙A¿ ˙a¿ ˙Ü¿ ˙°¿ ˙º¿ ˙÷¿ ˙‹¿ ˙›¿ ˚¿ ˚3¿ ˚T¿ ˚p¿ ˚î¿ ˚±¿ ˚Ã¿ ˚Í¿ ¸¿ ¸"¿ ¸)¿ ¸L¿ ¸û¿ ¸¿ ˝3¿ ˝|¿ ˝º¿ ˝‰¿ ˛'¿ ˛j¿ ˛™¿ ˛±¿ ˛µ¿ ˛∂¿ ˇ¿ ˇ8¿ ˇ9¿ ˇâ¿ ˇó¿ ˇª¿ ˇº¿ 	¿ 4¿ S¿ T¿ £¿ Ì¿¿.¿/¿U¿u¿v¿∂¿‘¿’¿"¿2¿T¿U¿Ñ¿¶¿ß¿‰¿Í¿8¿Ö¿—¿¿_¿e¿±¿¿P¿†¿Í¿¿<¿>¿?¿d¿¿ú¿Ω¿ÿ¿ ¿)¿Z¿¿≥¿Ë¿ ¿¿¿<¿b¿y¿z¿©¿ ¿À¿	¿	¿	¿	h¿	π¿
¿
¿
\¿
ß¿
«¿
»¿¿f¿±¿ ¿¿¿d¿≤¿Ú¿¯¿G¿í¿≥¿¥¿¿P¿à¿é¿Ÿ¿!¿_¿à¿â¿ÿ¿'¿r¿¡¿“¿ÿ¿'¿r¿è¿ê¿⁄¿‡¿-¿v¿ë¿∫¿ª¿ ¿¿Q¿u¿{¿Õ¿&¿z¿Ã¿¿o¿«¿Õ¿¿e¿õ¿…¿ ¿÷¿Ï¿¿¿¿¿Y¿]¿´¿Ω¿¿
¿6¿D¿E¿w¿}¿©¿∑¿∏¿Ï¿Ú¿¿-¿.¿g¿m¿ö¿©¿™¿Â¿Î¿¿(¿)¿q¿w¿ƒ¿˘¿¿¿¿,¿{¿é¿è¿◊¿Í¿Î¿;¿P¿Q¿î¿©¿™¿œ¿ﬁ¿‡¿·¿¿¿R¿£¿›¿%¿z¿ì¿ó¿„¿4¿É¿•¿π¿¸¿ ¿ P¿ é¿ î¿ ’¿ Ì¿!
¿!'¿!E¿!c¿!Ç¿!©¿!∆¿!„¿"¿"!¿";¿"B¿"b¿"t¿"Ü¿"ô¿"¨¿"¿¿"‹¿"Û¿#
¿##¿#<¿#O¿#W¿#[¿#\¿#ü¿#•¿#Ê¿$¿$¿$W¿$≠¿$¿$Ò¿%M¿%N¿%û¿%Ë¿&/¿&0¿&â¿&ä¿&·¿&‚¿'¿' ¿'o¿'æ¿'Î¿(#¿()¿(g¿(m¿(Ø¿(˘¿)¿)"¿)Y¿)ê¿)•¿*¿*¿*R¿*X¿*ó¿*À¿+:¿+;¿+ã¿+ò¿,¿,¿,>¿,D¿,î¿,Ø¿,„¿,È¿-/¿-ò¿-ô¿-·¿-Á¿.6¿.¿.Ä¿.œ¿.’¿/;¿/Ñ¿/Ö¿/ÿ¿/ﬁ¿0@¿0á¿0à¿0“¿0ÿ¿1%¿1r¿1s¿1ƒ¿1 ¿20¿2}¿2~¿2”¿2Ÿ¿3;¿3Ü¿3á¿3√¿3Ë¿3È¿4C¿4D¿4ï¿4ñ¿4¢¿4∏¿4ˇ¿58¿5o¿5û¿5Ã¿5˙¿6,¿6^¿6Ö¿6â¿6ã¿6å¿6…¿6Õ¿7¿7`¿7í¿7ñ¿7‚¿81¿8Q¿8U¿8¶¿8Ò¿9¿9Ä¿9ƒ¿:$¿:t¿:≠¿:±¿:Ë¿;8¿;z¿;©¿;È¿;Ì¿<>¿<B¿<å¿<÷¿=%¿=q¿=u¿=É¿=á¿=’¿> ¿>O¿>m¿>â¿?¿?!¿?;¿?ö¿?Ø¿?Œ¿@5¿@J¿@c¿@≤¿@»¿@Œ¿A¿Aq¿AÅ¿Aá¿A‘¿A‡¿AÊ¿B;¿BÄ¿Bå¿Bç¿BŸ¿C*¿C9¿C?¿Cé¿D¿Db¿DØ¿Dø¿E ¿EF¿EÀ¿E¯¿F[¿Fo¿Fu¿F√¿F◊¿F‚¿F„¿G.¿Gj¿Gp¿Gø¿G˚¿H¿HK¿H¿HÖ¿H‹¿I+¿I|¿I ¿IÊ¿IÏ¿J=¿JV¿Jπ¿J˜¿K\¿K©¿Kˆ¿LD¿Lî¿L‡¿M1¿M7¿MÉ¿M¨¿M∏¿Mπ¿N	¿NY¿N©¿Nı¿N˚¿OH¿Oó¿OÂ¿P2¿PÇ¿P†¿P™¿P´¿P˙¿Q¿Q¿Q_¿Q¨¿QΩ¿Q√¿Q¯¿R¿R¿R¿RF¿RJ¿Rö¿RÊ¿S!¿S8¿Sc¿Sk¿Sü¿S©¿S´¿S¨¿SÂ¿T¿T¿Tl¿T∑¿U ¿UP¿U°¿UØ¿U∞¿U˚¿V3¿V9¿Vâ¿V⁄¿W*¿Wz¿Wâ¿Wï¿Wó¿Wò¿WÂ¿X3¿X¿X ¿Xﬂ¿X„¿Y1¿YI¿YM¿Y[¿Y_¿Y©¿Yÿ¿Z(¿Zv¿Zã¿Zü¿[¿[¿[d¿[y¿[z¿[–¿[‰¿[Â¿\=¿\S¿\T¿\≠¿\ƒ¿\≈¿\¯¿]W¿]X¿]d¿]z¿]Ã¿]–¿]“¿]”¿^¿^¿^6¿^C¿^a¿^ô¿^õ¿^¿¿^¡¿^ˆ¿^˙¿_I¿_{¿_¿_Æ¿_‡¿_‰¿`!¿`%¿``¿`ù¿`°¿`ﬁ¿`‚¿a-¿aI¿aa¿aú¿a∂¿aœ¿aÙ¿b¿b4¿b:¿b;¿bÑ¿bß¿bƒ¿b·¿c ¿c¿c ¿cX¿cq¿cr¿c™¿c∞¿c“¿cÎ¿cÏ¿d%¿d?¿d@¿dy¿d¿d°¿dª¿dº¿dÙ¿e¿eY¿eû¿e¢¿e£¿eÎ¿f1¿f2¿f}¿f™¿f∆¿fÈ¿g¿g1¿gV¿g]¿ga¿gb¿gn¿gë¿g≥¿g∆¿gÃ¿g¯¿h¿h¿h6¿h\¿hÇ¿h™¿h”¿h◊¿hÿ¿h‰¿i1¿i2¿i>¿iT¿iõ¿iƒ¿i ¿j¿j<¿jk¿jq¿j´¿j√¿jÙ¿j¸¿kG¿kM¿kâ¿k»¿k˜¿k˚¿k˝¿k˛¿lD¿lH¿lo¿ls¿lƒ¿m¿mh¿ml¿m¬¿n)¿nW¿n[¿nﬂ¿n„¿oe¿oi¿oÔ¿oÛ¿p@¿pè¿pﬁ¿q,¿qw¿qé¿q˚¿r¿r8¿rR¿rj¿rÉ¿r¿rÒ¿sR¿sX¿s´¿t¿tX¿tè¿tï¿t“¿tÿ¿u"¿up¿uÖ¿uÜ¿uø¿u‡¿u·¿v1¿v7¿vp¿vì¿vî¿v†¿v√¿vÂ¿v¯¿v˛¿w*¿w>¿wD¿wg¿wâ¿wß¿w»¿wÃ¿wÕ¿wŸ¿x¿x¿x¿x4¿x|¿xÄ¿xÇ¿xÉ¿x“¿x¿xÙ¿y?¿yç¿yÃ¿z¿z
¿zV¿zù¿zÙ¿{¿{#¿{ß¿{´¿|-¿|1¿|∑¿|—¿}¿}¿}Y¿}_¿}π¿}¡¿~¿~¿~j¿~t¿~v¿~w¿~∆¿~·¿~Â¿.¿n¿»¿Ã¿Ä¿Ä0¿Äz¿Ä£¿Äæ¿Å¿Å2¿Å=¿Åk¿Åq¿ÅØ¿Åæ¿Ç¿Ç¿Çe¿Ç≤¿Ç«¿Ç…¿Ç ¿É¿É¿ÉE¿Éò¿É·¿ÉÂ¿Ñ5¿ÑO¿Ñ≤¿Ñˇ¿ÖL¿Ö}¿ÖÅ¿Öè¿Öì¿ÖÁ¿Ö¯¿Ü¿ÜD¿ÜÇ¿Ü™¿Ü∞¿Ü√¿Ü…¿Ü◊¿á¿áD¿áN¿áT¿áù¿áÍ¿à(¿à.¿àx¿à´¿â¿âk¿â∫¿â˝¿ä@¿äï¿ä™¿ä∞¿ä˙¿ã¿ã¿ã$¿ã*¿ãp¿ãÑ¿ãî¿ãÆ¿ã≈¿ãÈ¿å¿å¿å'¿å-¿ål¿år¿å√¿å‰¿çD¿ç£¿é¿éG¿éM¿éú¿éÍ¿è.¿è4¿èÅ¿è‘¿è⁄¿ê$¿ê8¿êU¿êv¿êã¿ê§¿ê«¿êÏ¿ë¿ë/¿ëR¿ëS¿ëÖ¿ëã¿ë”¿ëŸ¿í%¿íâ¿íŸ¿í˜¿í˝¿ìM¿ìë¿ì€¿î,¿îO¿îU¿î£¿î∂¿ï¿ï¿ï'¿ï-¿ïy¿ïî¿ïÔ¿ñ¿ñ¿ñL¿ñì¿ñÁ¿ó¿óM¿ó¿ó≤¿ó¿ò%¿òU¿òç¿ò≈¿ò˛¿ô5¿ôk¿ô°¿ô‹¿ö¿öE¿öÅ¿öµ¿öÈ¿õ¿õ_¿õö¿õœ¿õˇ¿ú2¿úd¿úñ¿ú«¿ú˚¿ù=¿ùt¿ù•¿ùÂ¿û¿ûK¿û¿ûª¿ûˆ¿ü+¿ü]¿üç¿üÀ¿ü˛¿†9¿†n¿†¢¿†‘¿°¿°>¿°q¿°¶¿°·¿¢¿¢B¿¢u¿¢¨¿¢ﬁ¿£¿£I¿£É¿£≥¿£Ê¿§¿§Q¿§Ü¿§¡¿§˜¿•7¿•i¿•§¿•ÿ¿¶¿¶A¿¶u¿¶®¿¶Ë¿ß¿ßI¿ßN¿ßO¿ßw¿ß}¿ß ¿ß–¿®¿®C¿®ú¿®¢¿®≤¿®∏¿©¿©¿©;¿©<¿©d¿©j¿©∑¿©Ω¿™	¿™m¿™ª¿™Ÿ¿™ﬂ¿´-¿´~¿´«¿¨¿¨:¿¨@¿¨P¿¨V¿¨¢¿¨Ω¿≠¿≠2¿≠3¿≠q¿≠∏¿Æ
¿Æ:¿Æ¿ÆΩ¿ÆÚ¿Ø-¿Ø]¿Øb¿Øc¿Øo¿Øí¿Ø¥¿Ø«¿ØÕ¿ØÈ¿Ø˝¿∞¿∞4¿∞l¿∞ö¿∞ﬂ¿±.¿±ç¿±Ó¿±Ú¿±Û¿±ˇ¿≤d¿≤e¿≤Ö¿≤´¿≤¨¿≤‹¿≤‚¿≥.¿≥~¿≥∆¿≥÷¿≥‚¿≥¯¿¥#¿¥?¿¥n¿¥t¿¥ï¿¥ô¿¥ö¿¥ﬂ¿¥Â¿µ/¿µz¿µâ¿µ∏¿µπ¿µ„¿∂¿∂T¿∂~¿∂Ñ¿∂≤¿∂Î¿∑¿∑#¿∑>¿∑B¿∑D¿∑E¿∑å¿∑ê¿∑Î¿∏M¿∏h¿∏ü¿∏´¿∏¨¿∏˝¿πI¿πó¿πµ¿π¿¿π¡¿∫¿∫\¿∫j¿∫k¿∫Ω¿∫ﬂ¿∫È¿∫Î¿∫Ï¿ª9¿ªä¿ªõ¿ªü¿ª÷¿ªÛ¿º¿º:¿ºR¿ºl¿ºÜ¿ºö¿º†¿º°¿ºÀ¿ºÈ¿ºÍ¿Ω:¿ΩQ¿Ωe¿Ωf¿Ω≤¿Ω∆¿Ω«¿Ω¿æ¿æ¿æE¿æF¿æñ¿æ¶¿æ»¿æ„¿æÙ¿ø¿ø5¿ø<¿ø]¿ø|¿ø°¿ø∆¿¿¿¿ ¿¿$¿¿&¿¿'¿¿a¿¿±¿¿≤¿¿¸¿¡ ¿¡V¿¡d¿¡Å¿¡§¿¡Ω¿¡◊¿¡¿¬¿¬¿¬¿¬W¿¬k¿¬l¿¬é¿¬¨¿¬≠¿¬”¿¬˘¿¬˙¿√¿√¿√p¿√t¿√v¿√w¿√∞¿√¥¿ƒ
¿ƒ¿ƒd¿ƒh¿ƒë¿ƒï¿ƒ”¿≈¿≈¿≈#¿≈'¿≈i¿≈¿¿≈÷¿∆¿∆¿∆¿∆N¿∆Y¿∆[¿∆\¿∆∞¿∆¥¿∆¬¿∆∆¿«¿«r¿«å¿«À¿«—¿»#¿»=¿»J¿»K¿»ñ¿»ú¿»’¿»‡¿»·¿…-¿…3¿…t¿…Ä¿…Ç       é†Çïé“+/// A token that represents a root isolate. éÁ é˜é¯é˘ é˙è    è^ècK/// An enumeration representing the root isolate (0 if not a root isolate). ènÅ9ê)Äó/// The token for the root isolate that is executing this Dart code.  If this
/// Dart code is not executing on a root isolate [instance] will be null.ê4ê§ê•ê¶ ê¨Äáë   ê¨ê≠ê≥êƒê∫ê¥ê¬ê√ê≈ëêÃê∆êŒ ë7¿ Á©îWÉ/// Platform event dispatcher singleton.
///
/// The most basic interface to the host operating system's interface.
///
/// This is the central entry point for platform messages and configuration
/// events from the platform.
///
/// It exposes the core scheduler API, the input event callback, the graphics
/// drawing API, and other such core services.
///
/// It manages the list of the application's [views] as well as the
/// [configuration] of various platform attributes.
///
/// Consider avoiding static references to this singleton through
/// [PlatformDispatcher.instance] and instead prefer using a binding for
/// dependency resolution such as `WidgetsBinding.instance.platformDispatcher`.
/// See [PlatformDispatcher.instance] for more information about why this is
/// preferred. înÄ◊ï ïï{/// Private constructor, since only dart:ui is supposed to create one of
/// these. Use [instance] to access the singleton.  3ô–Bô ô¸öööööFö. ö?öEö[ö\õR-õ`  õÉ4õà õÆõ≤õ≥†4†0 †J†K†<†I†=†B°@9°\ °w°x°e°v°f°k™é#™õ  ™µ+™∫ ™€≠‡≠Ó  Æ&Æ Æ Æ$Æ%ΩM+Ωf  Ωﬁ'Ω„ Ω¸æ æ¿ DI¿ DX  ¿ Di"¿ Dn ¿ DÇ¿ DÜ¿ Dá¿ G+¿ G9  ¿ GI!¿ GN ¿ Ga¿ Ge¿ Gf¿ I√/¿ Iﬁ  ¿ Iˆ)¿ I˚ ¿ J¿ J¿ J¿ L}-¿ Lé ¿ L®¿ ]ô¿ ]™  ¿ _{(¿ _å ¿ _¢¿ gƒ!¿ g’  ¿ gÈ%¿ gÓ ¿ h¿ h	¿ h
¿ i6¿ i&  ¿ zD+¿ z]  ¿ zs'¿ zx ¿ zë¿ zï¿ zñ¿ î§-¿ î≤  ¿ î’4¿ î⁄ ¿ ï ¿ ï¿ ï¿ ßÏ¿ ß˙  ¿ ®%¿ ® ¿ ®*¿ ®.¿ ®/¿ Øá"¿ Øì  ¿ ØÆÄ‚¿ ∞jÄ∞/// Tracks if the initial state has been accessed. Once accessed, we will stop
/// updating the [initialLifecycleState], as it is not the preferred way to
/// access the state.¿ ∞ã¿ ∂'¿ ∂  ¿ ∂9.¿ ∂> ¿ ∂^¿ ∂b¿ ∂c¿ ∏;,¿ ∏@ ¿ ∏b¿ πø.¿ πƒ ¿ πË¿ ª& ¿ ª+ ¿ ªB¿ ΩÂ*¿ ΩÛ  ¿ æ1¿ æ ¿ æ;¿ æ?¿ æ@¿ ¡(¿ ¡  ¿ ¡</¿ ¡A ¿ ¡b¿ ¡f¿ ¡g¿ œﬂ(¿ œÌ  ¿ –/¿ – ¿ –1¿ –5¿ –6¿ ‘ì5¿ ‘±  ¿ ‘Ã,¿ ‘— ¿ ‘Ô¿ ‘Û¿ ‘Ù¿ ◊9*¿ ◊C ¿ ◊P¿ ◊V¿ ◊_¿ ◊`¿ ◊a¿ ◊b¿ ◊Ò!¿ ◊ˇ  ¿ ÿ(¿ ÿ ¿ ÿ5¿ ÿ9¿ ÿ:¿ ⁄{¿ ⁄ä  ¿ ⁄ñ¿ ⁄ú  ¿ Óú"¿ ÓÆ  6ïIÑÑô∑Ñ)/// The [PlatformDispatcher] singleton.
///
/// Consider avoiding static references to this singleton through
/// [PlatformDispatcher.instance] and instead prefer using a binding for
/// dependency resolution such as `WidgetsBinding.instance.platformDispatcher`.
///
/// Static access of this object means that Flutter has few, if any options to
/// fake or mock the given object in tests. Even in cases where Dart offers
/// special language constructs to forcefully shadow such properties, those
/// mechanisms would only be reasonable for tests and they would not be
/// reasonable for a future of Flutter where we legitimately want to select an
/// appropriate implementation at runtime.
///
/// The only place that `WidgetsBinding.instance.platformDispatcher` is
/// inappropriate is if access to these APIs is required before the binding is
/// initialized by invoking `runApp()` or
/// `WidgetsFlutterBinding.instance.ensureInitialized()`. In that case, it is
/// necessary (though unfortunate) to use the [PlatformDispatcher.instance]
/// object statically.   öbÄÌõÄê/// Called when the platform configuration changes.
///
/// The engine invokes this callback in the same zone in which the callback
/// was set.   õªÄ®õø  õﬁõÌ   úgÉÆü¯Ç∏/// The current list of displays.
///
/// If any of their configurations change, [onMetricsChanged] will be called.
///
/// To get the display for a [FlutterView], use [FlutterView.display].
///
/// Platforms may limit what information is available to the application with
/// regard to secondary displays and/or displays that do not have an active
/// application window.
///
/// Presently, on Android and Web this collection will only contain the
/// display that the current window is on. On iOS, it will only contains the
/// main display on the phone or tablet. On Desktop, it will contain only
/// a main display with a valid refresh rate but invalid size and device
/// pixel ratio values.   †QÄÏ°&Ä≤/// The current list of views, including top level platform windows used by
/// the application.
///
/// If any of their configurations change, [onMetricsChanged] will be called.   ¢àyßTÑ˛/// The [FlutterView] provided by the engine if the platform is unable to
/// create windows, or, for backwards compatibility.
///
/// If the platform provides an implicit view, it can be used to bootstrap
/// the framework. This is common for platforms designed for single-view
/// applications like mobile devices with a single display.
///
/// Applications and libraries must not rely on this property being set
/// as it may be null depending on the engine's configuration. Instead,
/// consider using [View.of] to lookup the [FlutterView] the current
/// [BuildContext] is drawing into.
///
/// While the properties on the referenced [FlutterView] may change,
/// the reference itself is guaranteed to never change over the lifetime
/// of the application: if this property is null at startup, it will remain
/// so throughout the entire lifetime of the application. If it points to a
/// specific [FlutterView], it will continue to point to the same view until
/// the application is shut down (although the engine may replace or remove
/// the underlying backing surface of the view at its discretion).
///
/// See also:
///
/// * [View.of], for accessing the current view.
/// * [PlatformDispatcher.views] for a list of all [FlutterView]s provided
///   by the platform.   ™ÂÇ¯≠∑Çõ/// A callback that is invoked whenever the [ViewConfiguration] of any of the
/// [views] changes.
///
/// For example when the device is rotated or when the application is resized
/// (e.g. when showing applications side-by-side on Android),
/// `onMetricsChanged` is called.
///
/// The engine invokes this callback in the same zone in which the callback
/// was set.
///
/// The framework registers with this callback and updates the layout
/// appropriately.
///
/// See also:
///
/// * [WidgetsBindingObserver], for a mechanism at the widgets layer to
///   register for notifications when this is called.
/// * [MediaQuery.of], a simpler mechanism for the same.   Æ-~Æ1  ÆBÆQ   µEàΩ"á{/// A callback invoked immediately after the focus is transitioned across [FlutterView]s.
///
/// When the platform moves the focus from one [FlutterView] to another, this
/// callback is invoked indicating the new view that has focus and the direction
/// in which focus was received. For example, if focus is moved to the [FlutterView]
/// with ID 2 in the forward direction (could be the result of pressing tab)
/// the callback receives a [ViewFocusEvent] with [ViewFocusState.focused] and
/// [ViewFocusDirection.forward].
///
/// Typically, receivers of this event respond by moving the focus to the first
/// focusable widget inside the [FlutterView] with ID 2. If a view receives
/// focus in the backward direction (could be the result of pressing shift + tab),
/// typically the last focusable widget inside that view is focused.
///
/// The platform may remove focus from a [FlutterView]. For example, on the web,
/// the browser can move focus to another element, or to the browser's built-in UI.
/// On desktop, the operating system can switch to another window (e.g. using Alt + Tab on Windows).
/// In scenarios like these, [onViewFocusChange] will be invoked with [ViewFocusState.unfocused] and
/// [ViewFocusDirection.undefined].
///
/// Receivers typically respond to this event by removing all focus indications
/// from the app.
///
/// Apps can also programmatically request to move the focus to a desired
/// [FlutterView] by calling [requestViewFocusChange].
///
/// The callback is invoked in the same zone in which the callback was set.
///
/// See also:
///
///   * [requestViewFocusChange] to programmatically instruct the platform to move focus to a different [FlutterView].
///   * [ViewFocusState] for a list of allowed focus transitions.
///   * [ViewFocusDirection] for a list of allowed focus directions.
///   * [ViewFocusEvent], which is the event object provided to the callback.   æ	Äåæ  æ!æ9   ¿ BÇ/¿ D(ÅÈ/// A callback invoked when any view begins a frame.
///
/// A callback that is invoked to notify the application that it is an
/// appropriate time to provide a scene using the [SceneBuilder] API and the
/// [FlutterView.render] method.
///
/// When possible, this is driven by the hardware VSync signal of the attached
/// screen with the highest VSync rate. This is only called if
/// [PlatformDispatcher.scheduleFrame] has been called since the last time
/// this callback was invoked.   ¿ Dès¿ Dì  ¿ D†¿ D∞   ¿ E÷ÅR¿ GÅ/// A callback that is invoked for each frame after [onBeginFrame] has
/// completed and after the microtask queue has been drained.
///
/// This can be used to implement a second phase of frame rendering that
/// happens after any deferred work queued by the [onBeginFrame] phase.   ¿ Gno¿ Gr  ¿ G~¿ Gç   ¿ HTÅl¿ IîÅ/// A callback that is invoked when pointer data is available.
///
/// The framework invokes this callback in the same zone in which the callback
/// was set.
///
/// See also:
///
///  * [GestureBinding], the Flutter framework class which manages pointer
///    events.   ¿ J#Äî¿ J'  ¿ J;#¿ JW   ¿ \;Å[¿ ]~Å/// A callback that is invoked when key data is available.
///
/// The framework invokes this callback in the same zone in which the callback
/// was set.
///
/// The callback should return true if the key event has been handled by the
/// framework and should not be propagated further.   ¿ ]∏Å¿ ]º  ¿ ]∆¿ ]ÿ   ¿ c_Ñb¿ gùÉ˛/// A callback that is invoked to report the [FrameTiming] of recently
/// rasterized frames.
///
/// It's preferred to use [SchedulerBinding.addTimingsCallback] than to use
/// [onReportTimings] directly because [SchedulerBinding.addTimingsCallback]
/// allows multiple callbacks.
///
/// This can be used to see if the application has missed frames (through
/// [FrameTiming.buildDuration] and [FrameTiming.rasterDuration]), or high
/// latencies (through [FrameTiming.totalSpan]).
///
/// Unlike [Timeline], the timing information here is available in the release
/// mode (additional to the profile and the debug mode). Hence this can be
/// used to monitor the application's performance in the wild.
///
/// {@macro dart.ui.TimingsCallback.list}
///
/// If this is null, no additional work will be done. If this is not null,
/// Flutter spends less than 0.1ms every 1 second to report the timings
/// (measured on iPhone6S). The 0.1ms is about 0.6% of 16ms (frame budget for
/// 60fps), or 0.01% CPU usage per second.   ¿ hÄ¿ h  ¿ h&¿ h8   ¿ vÏÉU¿ zÇm/// Deprecated. Migrate to [ChannelBuffers.setListener] instead.
///
/// Called whenever this platform dispatcher receives a message from a
/// platform-specific plugin.
///
/// The `name` parameter determines which plugin sent the message. The `data`
/// parameter is the payload and is typically UTF-8 encoded JSON but can be
/// arbitrary data.
///
/// Message handlers must call the function given in the `callback` parameter.
/// If the handler does not need to respond, the handler should pass null to
/// the callback.
///
/// The framework invokes this callback in the same zone in which the callback
/// was set.  ¿ yx¿ yy¿ yÉ¿ y¯¿ yâ¿ yø¿ zûÅ¿ {&  ¿ {8!¿ {R  ¿ zû¿ zü¿ z©¿ {¿ zØ¿ zÂ¿ í‰Ä•¿ ìKJ/// Additional accessibility features that may be enabled by the platform.   ¿ ìçÅ¿ î_Äµ/// A callback that is invoked when the value of [accessibilityFeatures]
/// changes.
///
/// The framework invokes this callback in the same zone in which the callback
/// was set.   ¿ ïÄ®¿ ï  ¿ ï0¿ ï?   ¿ úÇv¿ ûDÇ/// The system-reported default locale of the device.
///
/// This establishes the language and formatting conventions that application
/// should, if possible, use to render their user interface.
///
/// This is the first locale selected by the user and is the user's primary
/// locale (the locale the device UI is displayed in)
///
/// This is equivalent to `locales.first`, except that it will provide an
/// undefined (using the language tag "und") non-null locale if the [locales]
/// list has not been set or is empty.   ¿ ûèÇù¿ °
ÇK/// The full system-reported supported locales of the device.
///
/// This establishes the language and formatting conventions that application
/// should, if possible, use to render their user interface.
///
/// The list is ordered in order of priority, with lower-indexed locales being
/// preferred over higher-indexed ones. The first element is the primary
/// [locale].
///
/// The [onLocaleChanged] callback is called whenever this value changes.
///
/// See also:
///
///  * [WidgetsBindingObserver], for a mechanism at the widgets layer to
///    observe when this value changes.   ¿ ¶tÅu¿ ß≈Å,/// A callback that is invoked whenever [locale] changes value.
///
/// The framework invokes this callback in the same zone in which the callback
/// was set.
///
/// See also:
///
///  * [WidgetsBindingObserver], for a mechanism at the widgets layer to
///    observe when this callback is invoked.   ¿ ®7{¿ ®;  ¿ ®K¿ ®Z   ¿ ≠¸Åá¿ ØÅ/// The lifecycle state immediately after dart isolate initialization.
///
/// This property will not be updated as the lifecycle changes.
///
/// It is used to initialize [SchedulerBinding.lifecycleState] at startup with
/// any buffered lifecycle state events.   ¿ ±øÄ⁄¿ ≤[Ää/// The setting indicating whether time should always be shown in the 24-hour
/// format.
///
/// This option is used by [showTimePicker].   ¿ ≤ùÅ⁄¿ ¥EÅÑ/// The system-reported text scale.
///
/// This establishes the text scaling factor to use when rendering text,
/// according to the user's platform preferences.
///
/// The [onTextScaleFactorChanged] callback is called whenever this value
/// changes.
///
/// See also:
///
///  * [WidgetsBindingObserver], for a mechanism at the widgets layer to
///    observe when this value changes.   ¿ ¥{Åê¿ µ’Å5/// A callback that is invoked whenever [textScaleFactor] changes value.
///
/// The framework invokes this callback in the same zone in which the callback
/// was set.
///
/// See also:
///
///  * [WidgetsBindingObserver], for a mechanism at the widgets layer to
///    observe when this callback is invoked.   ¿ ∂kÄñ¿ ∂o  ¿ ∂à¿ ∂ó   ¿ ∑Å3¿ ∑ˆÄ›/// Whether the spell check service is supported on the current platform.
///
/// This option is used by [EditableTextState] to define its
/// [SpellCheckConfiguration] when a default spell check service
/// is requested.   ¿ ∏lÅP¿ πvÄˆ/// Whether showing system context menu is supported on the current platform.
///
/// This option is used by [AdaptiveTextSelectionToolbar] to decide whether
/// to show system context menu, or to fallback to the default Flutter context
/// menu.   ¿ πÚÅ1¿ ∫˜ÄÌ/// Whether briefly displaying the characters as you type in obscured text
/// fields is enabled in system settings.
///
/// See also:
///
///  * [EditableText.obscureText], which when set to true hides the text in
///    the text field.   ¿ ªKÄ˙¿ ºÄ¨/// The setting indicating the current brightness mode of the host platform.
/// If the platform has no preference, [platformBrightness] defaults to
/// [Brightness.light].   ¿ ºIÅô¿ Ω¶Å8/// A callback that is invoked whenever [platformBrightness] changes value.
///
/// The framework invokes this callback in the same zone in which the callback
/// was set.
///
/// See also:
///
///  * [WidgetsBindingObserver], for a mechanism at the widgets layer to
///    observe when this callback is invoked.   ¿ æHÄü¿ æL  ¿ æh¿ æw   ¿ æÎÄã¿ øBH/// The setting indicating the current system font of the host platform.   ¿ øzÅì¿ ¿’Å6/// A callback that is invoked whenever [systemFontFamily] changes value.
///
/// The framework invokes this callback in the same zone in which the callback
/// was set.
///
/// See also:
///
///  * [WidgetsBindingObserver], for a mechanism at the widgets layer to
///    observe when this callback is invoked.   ¿ ¡oÄô¿ ¡s  ¿ ¡ç¿ ¡ú   ¿ Õ¬Å¿ Œ•Äœ/// Whether the user has requested that updateSemantics be called when the
/// semantic contents of a view changes.
///
/// The [onSemanticsEnabledChanged] callback is called whenever this value
/// changes.   ¿ Œ›Äˇ¿ œ§Ä¨/// A callback that is invoked when the value of [semanticsEnabled] changes.
///
/// The framework invokes this callback in the same zone in which the
/// callback was set.   ¿ –>Äô¿ –B  ¿ –\¿ –k   ¿ “ÃÅƒ¿ ‘^Å_/// A callback that is invoked whenever the user requests an action to be
/// performed on a semantics node.
///
/// This callback is used when the user expresses the action they wish to
/// perform based on the semantics node supplied by updateSemantics.
///
/// The framework invokes this callback in the same zone in which the
/// callback was set.   ¿ ‘¸Ä†¿ ’   ¿ ’&¿ ’6   ¿ ÷‹Z¿ ◊1/// The [FrameData] object for the current frame.   ¿ ◊hÄÜ¿ ◊ƒG/// A callback that is invoked when the window updates the [FrameData].   ¿ ÿBÄÑ¿ ÿF  ¿ ÿY¿ ÿh   ¿ ⁄≠Éå¿ ﬁ%ÉD/// A callback that is invoked when an unhandled error occurs in the root
/// isolate.
///
/// This callback must return `true` if it has handled the error. Otherwise,
/// it must return `false` and a fallback mechanism such as printing to stderr
/// will be used, as configured by the specific platform embedding via
/// `Settings::unhandled_exception_callback`.
///
/// The VM or the process may exit or become unresponsive after calling this
/// callback. The callback will not be called for exceptions that cause the VM
/// or process to terminate or become unresponsive before the callback can be
/// invoked.
///
/// This callback is not directly invoked by errors in child isolates of the
/// root isolate. Programs that create new isolates must listen for errors on
/// those isolates and forward the errors to the root isolate.   ¿ ﬁ<d¿ ﬁ@  ¿ ﬁH¿ ﬁX   ¿ ‡ÄÖ¸¿ ÊTÖå/// The route or path that the embedder requested when the application was
/// launched.
///
/// This will be the string "`/`" if no particular route was requested.
///
/// ## Android
///
/// On Android, calling
/// [`FlutterView.setInitialRoute`](/javadoc/io/flutter/view/FlutterView.html#setInitialRoute-java.lang.String-)
/// will set this value. The value must be set sufficiently early, i.e. before
/// the [runApp] call is executed in Dart, for this to have any effect on the
/// framework. The `createFlutterView` method in your `FlutterActivity`
/// subclass is a suitable time to set the value. The application's
/// `AndroidManifest.xml` file must also be updated to have a suitable
/// [`<intent-filter>`](https://developer.android.com/guide/topics/manifest/intent-filter-element.html).
///
/// ## iOS
///
/// On iOS, calling
/// [`FlutterViewController.setInitialRoute`](/ios-embedder/interface_flutter_view_controller.html#a7f269c2da73312f856d42611cc12a33f)
/// will set this value. The value must be set sufficiently early, i.e. before
/// the [runApp] call is executed in Dart, for this to have any effect on the
/// framework. The `application:didFinishLaunchingWithOptions:` method is a
/// suitable time to set this value.
///
/// See also:
///
///  * [Navigator], a widget that handles routing.
///  * [SystemChannels.navigation], which handles subsequent navigation
///    requests from the embedder.   7°~Äê°ËX/// Returns the [FlutterView] with the provided ID if one exists, or null
/// otherwise. °Ó°¸   ØóÄ¯Øú  Ø•Ø™  Ø≠$Ø¡   ±^Å4±c  ±o±t   ≤ÌÄ⁄≤Ú  ≥≥   ¥6Å¥;  ¥P
¥U  ¥\$¥p   æôÉz¿ A8Ç{/// Requests a focus change of the [FlutterView] with ID [viewId].
///
/// If an app would like to request the engine to move focus, in forward direction,
/// to the [FlutterView] with ID 1 it should call this method with [ViewFocusState.focused]
/// and [ViewFocusDirection.forward].
///
/// There is no need to call this method if the view in question already has
/// focus as it won't have any effect.
///
/// A call to this method will lead to the engine calling [onViewFocusChange]
/// if the request is successfully fulfilled.
///
/// See also:
///
///  * [onViewFocusChange], a callback to subscribe to view focus change events. ¿ AU¿ Ac  ¿ An¿ Aá  ¿ Aë%¿ AÆ   ¿ E2Ä†¿ E7  ¿ EC¿ EH   ¿ HC¿ H    ¿ JÁÄ¯¿ JÏ  ¿ K¿ K   ¿ LØç±¿ L»  ¿ L·¿ LÎ   ¿ ZdÅ”¿ Z{  ¿ Zå¿ Zù  ¿ Zß	¿ Z≠   ¿ _ÁÉt¿ _ˆ  ¿ `¿ `   ¿ iAV¿ iF  ¿ ic
¿ ii   ¿ iõÄü¿ j  ¿ j.
¿ j4  ¿ iõ¿ iú¿ i¢¿ i∂¿ i®¿ i£¿ i∞¿ iµ¿ i±¿ i∑¿ i˜¿ iæ¿ i∏¿ i¿¿ jjÅå¿ jo  ¿ j~¿ jâ   ¿ k˙Ç◊¿ mæÅ¨/// Sends a message to a platform-specific plugin.
///
/// The `name` parameter determines which plugin receives the message. The
/// `data` parameter contains the message payload and is typically UTF-8
/// encoded JSON but can be arbitrary data. If the plugin replies to the
/// message, `callback` will be called with the response.
///
/// The framework invokes [callback] in the same zone in which this method was
/// called. ¿ m“¿ m⁄  ¿ mﬂ¿ mÍ  ¿ mÔ)¿ n   ¿ n’Äö¿ n›  ¿ nÚ¿ n˙  ¿ nˇ)¿ o!  ¿ o*¿ o5   ¿ osÄË¿ o˝  ¿ p¿ p  ¿ p )¿ pB  ¿ pK¿ pV  ¿ os¿ ot¿ oz¿ o¢¿ oÇ¿ o{¿ oä¿ o°¿ oã¿ oì¿ oõ¿ o£¿ o·¿ o™¿ o§¿ o¨¿ p_É	¿ r\ÅÁ/// Sends a message to a platform-specific plugin via a [SendPort].
///
/// This operates similarly to [sendPlatformMessage] but is used when sending
/// messages from background isolates. The [port] parameter allows Flutter to
/// know which isolate to send the result to. The [name] parameter is the name
/// of the channel communication will happen on. The [data] parameter is the
/// payload of the message. The [identifier] parameter is a unique integer
/// assigned to the message. ¿ ry¿ rÅ  ¿ rä¿ rï  ¿ rû¿ r£  ¿ r≤¿ rº   ¿ slÄô¿ st  ¿ sç¿ sï  ¿ sö¿ sü  ¿ s™¿ sØ  ¿ s¥¿ sø   ¿ t	ÄÁ¿ tü  ¿ tπ¿ t¡  ¿ t∆¿ tÀ  ¿ t÷¿ t€  ¿ t‡¿ tÎ  ¿ t	¿ t
¿ t¿ t@¿ t¿ t¿ t ¿ t?¿ t!¿ t)¿ t1¿ t9¿ tA¿ tÉ¿ tH¿ tB¿ tJ¿ tÙÅH¿ u®Ä®/// Registers the current isolate with the isolate identified with by the
/// [token]. This is required if platform channels are to be used on a
/// background isolate. ¿ u¬¿ u‘   ¿ v?Ä©¿ vπ  ¿ v’¿ v⁄  ¿ v?¿ v@¿ vF¿ v[¿ vL¿ vG¿ vT¿ vZ¿ vU¿ v\¿ v†¿ vc¿ v]¿ ve¿ {≤Äõ¿ {„)/// Called by [_dispatchPlatformMessage]. ¿ {˝¿ |  ¿ |¿ |   ¿ |QÄΩ¿ |”  ¿ |Ó¿ |Û  ¿ |˛¿ }	  ¿ |Q¿ |R¿ |X¿ |v¿ |^¿ |Y¿ |f¿ |u¿ |g¿ |o¿ |w¿ |∫¿ |~¿ |x¿ |Ä¿ }Ç¿ }…Ää/// Wraps the given [callback] in another callback that ensures that the
/// original callback is called in the zone it was registered in. ¿ }Ù)¿ ~   ¿ 1É—¿ Ä!Ä‡/// Send a message to the framework using the [ChannelBuffers].
///
/// This method constructs the appropriate callback to respond
/// with the given `responseId`. It should only be called for messages
/// from the platform. ¿ Ä:¿ ÄB  ¿ ÄG¿ ÄR  ¿ ÄW¿ Ä\   ¿ ÉÇ$¿ ÑÎÅÕ/// Set the debug name associated with this platform dispatcher's root
/// isolate.
///
/// Normally debug names are automatically generated from the Dart port, entry
/// point, and source file. For example: `main.dart$main-1234`.
///
/// This can be combined with flutter tools `--isolate-filter` flag to debug
/// specific root isolates. For example: `flutter attach --isolate-filter=[name]`.
/// Note that this does not rename any child isolates of the root. ¿ Ñˇ¿ Ö   ¿ Ö.Äó¿ Ö£  ¿ Ö∏¿ Ö¿  ¿ Ö.¿ Ö/¿ Ö5¿ ÖK¿ Ö;¿ Ö6¿ ÖC¿ ÖJ¿ ÖD¿ ÖL¿ Öä¿ ÖS¿ ÖM¿ ÖU¿ Ö…Å≈¿ á'ÅL/// Requests the Dart VM to adjusts the GC heuristics based on the requested `performance_mode`.
///
/// This operation is a no-op of web. The request to change a performance may be ignored by the
/// engine or not resolve in a predictable way.
///
/// See [DartPerformanceMode] for more information on individual performance modes. ¿ áB¿ áW   ¿ áíÄù¿ à	  ¿ à%¿ à*  ¿ áí¿ áì¿ áô¿ á´¿ áû¿ áö¿ á¶¿ á™¿ áß¿ á¨¿ áÒ¿ á≥¿ á≠¿ áµ¿ à3Ç¿ äÅ∑/// The embedder can specify data that the isolate can request synchronously
/// on launch. This accessor fetches that data.
///
/// This data is persistent for the duration of the Flutter application and is
/// available even after isolate restarts. Because of this lifecycle, the size
/// of this data must be kept to a minimum.
///
/// For asynchronous communication between the embedder and isolate, a
/// platform channel may be used.   ¿ äEÄó¿ ä¿   ¿ äE¿ äF¿ äL¿ ä^¿ äT¿ äM¿ ä\¿ ä]¿ ä_¿ ä¢¿ äf¿ ä`¿ äh¿ ä‡Åâ¿ åEÅM/// Requests that, at the next appropriate opportunity, the [onBeginFrame] and
/// [onDrawFrame] callbacks be invoked.
///
/// See also:
///
///  * [SchedulerBinding], the Flutter framework class which manages the
///    scheduling of frames.
///  * [scheduleWarmUpFrame], which should only be used to schedule warm up
///    frames.   ¿ åmz¿ å÷   ¿ åm¿ ån¿ åt¿ åÑ¿ åz¿ åu¿ åÇ¿ åÉ¿ åÖ¿ åΩ¿ åå¿ åÜ¿ åé¿ åÎÖu¿ ëZÑ=/// Schedule a frame to run as soon as possible, rather than waiting for the
/// engine to request a frame in response to a system "Vsync" signal.
///
/// The application can call this method as soon as it starts up so that the
/// first frame (which is likely to be quite expensive) can start a few extra
/// milliseconds earlier. Using it in other situations might lead to
/// unintended results, such as screen tearing. Depending on platforms and
/// situations, the warm up frame might or might not be actually rendered onto
/// the screen.
///
/// For more introduction to the warm up frame, see
/// [SchedulerBinding.scheduleWarmUpFrame].
///
/// This method uses the provided callbacks as the begin frame callback and
/// the draw frame callback instead of [onBeginFrame] and [onDrawFrame].
///
/// See also:
///
///  * [SchedulerBinding.scheduleWarmUpFrame], which uses this method, and
///    introduces the warm up frame in more details.
///  * [scheduleFrame], which schedules the frame at the next appropriate
///    opportunity and should be used to render regular frames. ¿ ëo ¿ ëÜ  ¿ ëë¿ ë®   ¿ íd|¿ íŒ   ¿ íd¿ íe¿ ík¿ í{¿ íq¿ íl¿ íy¿ íz¿ í|¿ íµ¿ íÉ¿ í}¿ íÖ¿ ïÂÇ1¿ ïÍ  ¿ ñ
¿ ñ   ¿ òÉK¿ õÅj/// Change the retained semantics data about this platform dispatcher.
///
/// If [semanticsEnabled] is true, the user has requested that this function
/// be called whenever the semantic content of this platform dispatcher
/// changes.
///
/// In either case, this function disposes the given update, which means the
/// semantics update cannot be used further. ¿ õ¿ õ(  ¿ ôï¿ ôñ¿ ô†¿ ö˛¿ ô°¿ õiÄ®¿ õ·  ¿ õÚ¿ ú
  ¿ õi¿ õj¿ õp¿ õç¿ õv¿ õq¿ õ~¿ õå¿ õ¿ õÜ¿ õã¿ õá¿ õé¿ õ»¿ õï¿ õè¿ õó¿ °0É‚¿ ¢~Å5/// Performs the platform-native locale resolution.
///
/// Each platform may return different results.
///
/// If the platform fails to resolve a locale, then this will return null.
///
/// This method returns synchronously and is a direct call to
/// platform specific APIs without invoking method channels. ¿ ¢ú¿ ¢™   ¿ •Äâ¿ •#  ¿ •B"¿ •Q   ¿ •£ÄÕ¿ ¶,  ¿ ¶L"¿ ¶[  ¿ •£¿ •§¿ •™¿ •¬¿ •≤¿ •´¿ •∫¿ •¡¿ •ª¿ •√¿ ¶¿ • ¿ •ƒ¿ •Ã¿ ®‚Ñπ¿ ®Á  ¿ ®ˆ¿ ©   ¿ ≠À-¿ ≠“    ¿ ∞¡Ä˙¿ ∞∆  ¿ ∞„¿ ∞Î   ¿ ¬8ãÜ¿ ¬=  ¿ ¬U¿ ¬]   ¿ —Å¡¿ —  ¿ —$¿ —*   ¿ ’ÃÅ¿ ’—  ¿ ’‚¿ ’Á   ¿ ÿˆÅÅ¿ ÿ˚  ¿ Ÿ
¿ Ÿ  ¿ Ÿ 
¿ Ÿ%  ¿ Ÿ,¿ Ÿ7   ¿ ﬁ§Åÿ¿ ﬁ©  ¿ ﬁ∏¿ ﬁ¿  ¿ ﬁ∆¿ ﬁ“   ¿ ÊÄÄÑ¿ Ê   ¿ ÊÄ¿ ÊÅ¿ Êá¿ Êô¿ Êè¿ Êà¿ Êó¿ Êò¿ Êö¿ Ê’¿ Ê°¿ Êõ¿ Ê£¿ ÁáR¿ Í–Éû/// Computes the scaled font size from the given `unscaledFontSize`, according
/// to the user's platform preferences.
///
/// Many platforms allow users to scale text globally for better readability.
/// Given the font size the app developer specified in logical pixels, this
/// method converts it to the preferred font size (also in logical pixels) that
/// accounts for platform-wide text scaling. The return value is always
/// non-negative.
///
/// The scaled value of the same font size input may change if the user changes
/// the text scaling preference (in system settings for example). The
/// [onTextScaleFactorChanged] callback can be used to monitor such changes.
///
/// Instead of directly calling this method, applications should typically use
/// [MediaQuery.textScalerOf] to retrive the scaled font size in a widget tree,
/// so text in the app resizes properly when the text scaling preference
/// changes. ¿ Íﬁ¿ ÍÊ   ¿ Ó¸Ñt¿ Ô  ¿ Ô¿ Ô   ¿ ¯!ÄΩ¿ ¯ù  ¿ ¯∞¿ ¯∏  ¿ ¯…¿ ¯Œ  ¿ ¯!¿ ¯"¿ ¯(¿ ¯E¿ ¯0¿ ¯)¿ ¯8¿ ¯D¿ ¯9¿ ¯A¿ ¯F¿ ¯Ç¿ ¯M¿ ¯G¿ ¯O ¿ ¯‚ç[¿ ˘I`/// Configuration of the platform.
///
/// Immutable class (but can't use @immutable in dart:ui) ¿ ˘dÅw ¿ ˘j¿ ˘Ä 	¿ ˘á=¿ ˘ç  ¿ ˘ "¿ ˘–  ¿ ˘Ú¿ ˘¯  ¿ ˙*¿ ˙  ¿ ˙E¿ ˙K  ¿ ˙e¿ ˙k  ¿ ˙ä¿ ˙ê  ¿ ˙•¿ ˙´  ¿ ˙¿¿ ˙∆  ¿ ˘§¿ ˘™¿ ˘ø¿ ˘¿¿ ˘¡¿ ˘√¿ ˘¬¿ ˘Á¿ ˙
¿ ˙/¿ ˙9¿ ˙:¿ ˙\¿ ˙t¿ ˙Ç¿ ˙É¿ ˙z¿ ˙Å¿ ˙{	¿ ˛∏~¿ ˇ!J/// Additional accessibility features that may be enabled by the platform. ¿ ˇ;~¿ ˇ§Y/// The setting indicating whether time should always be shown in the 24-hour
/// format. ¿ ˇæÄì¿ As/// Whether the user has requested that updateSemantics be called when the
/// semantic contents of a view changes. ¿ VÄ÷¿Ä¨/// The setting indicating the current brightness mode of the host platform.
/// If the platform has no preference, [platformBrightness] defaults to
/// [Brightness.light]. ¿1B¿d#/// The system-reported text scale. ¿xZ¿À=/// The full system-reported supported locales of the device. ¿◊{¿BX/// The route or path that the embedder requested when the application was
/// launched. ¿WM¿î,/// The system-reported default font family. ¿©Éë¿+ÉZ/// A unique identifier for this [_PlatformConfiguration].
///
/// This unique identifier is optionally assigned by the platform embedder.
/// Dart code that runs on the Flutter UI thread and synchronously invokes
/// platform APIs can use this identifier to tell the embedder to use the
/// configuration that matches the current [_PlatformConfiguration] in
/// dart:ui. See the [_getScaledFontSize] function for an example.
///
/// This field's nullability also indicates whether the platform supports
/// nonlinear text scaling (as it's the only feature that requires synchronous
/// invocation of platform APIs). This field is always null if the platform
/// does not use nonlinear text scaling, or when dart:ui has not received any
/// configuration updates from the embedder yet. The _getScaledFontSize
/// function should not be called in either case.  ¿ ˙ﬂÉ’¿ ˙ˆ  	¿ ˚,¿ ˚  ¿ ˚7¿ ˚>  ¿ ˚X¿ ˚_  ¿ ˚t¿ ˚Å  ¿ ˚ò¿ ˚°  ¿ ˚µ¿ ˚ƒ  ¿ ˚–¿ ˚Ÿ  ¿ ˚Ó¿ ˚˜  ¿ ¸¿ ¸    ¿?ê⁄¿j$/// An immutable view configuration. ¿ÅÅÑ ¿á¿ô 	¿†¿¶  ¿¡¿«  ¿‹"¿‚  ¿#¿
  ¿-+¿3  ¿^¿d  ¿É.¿â  ¿∑/¿Ω  ¿Ï¿Ú  ¿∏¿Õ¿—¿“¿Ó¿˘¿˙¿¿"¿#¿H¿S¿T¿m¿x¿y¿ö¿†¿Ø¿∞¿Œ¿‰¿Â¿‘¿„¿’¿˝	¿	n¿nV/// The identifier for a display for this view, in
/// [PlatformDispatcher._displays]. ¿|L¿∏,/// The pixel density of the output surface. ¿ÕI¿	7/// The size requested for the view in physical pixels. ¿	Å™¿
ªÅÅ/// The number of physical pixels on each side of the display rectangle into
/// which the view can render, but over which the operating system will likely
/// place system UI, such as the keyboard, that fully obscures any content.
///
/// The relationship between this [viewInsets], [viewPadding], and [padding]
/// are described in more detail in the documentation for [FlutterView]. ¿
 ÇÁ¿¶Ç±/// The number of physical pixels on each side of the display rectangle into
/// which the view can render, but which may be partially obscured by system
/// UI (such as the system notification area), or physical intrusions in
/// the display (e.g. overscan regions on television screens or phone sensor
/// housings).
///
/// Unlike [padding], this value does not change relative to [viewInsets].
/// For example, on an iPhone X, it will not change in response to the soft
/// keyboard being visible or hidden, whereas [padding] will.
///
/// The relationship between this [viewInsets], [viewPadding], and [padding]
/// are described in more detail in the documentation for [FlutterView]. ¿∂Å–¿sÅú/// The number of physical pixels on each side of the display rectangle into
/// which the view can render, but where the operating system will consume
/// input gestures for the sake of system navigation.
///
/// For example, an operating system might use the vertical edges of the
/// screen, where swiping inwards from the edges takes users backward
/// through the history of screens they previously visited. ¿ãÇ¿ÜÅÿ/// The number of physical pixels on each side of the display rectangle into
/// which the view can render, but which may be partially obscured by system
/// UI (such as the system notification area), or physical intrusions in
/// the display (e.g. overscan regions on television screens or phone sensor
/// housings).
///
/// The relationship between this [viewInsets], [viewPadding], and [padding]
/// are described in more detail in the documentation for [FlutterView]. ¿íÅ&¿©Äˆ/// Additional configuration for touch gestures performed on this view.
///
/// For example, the touch slop defined in physical pixels may be provided
/// by the gesture settings and should be preferred over the framework
/// touch slop constant. ¿ΩÑ
¿∏Éø/// Areas of the display that are obstructed by hardware features.
///
/// This list is populated only on Android. If the device has no display
/// features, this list is empty.
///
/// The coordinate space in which the [DisplayFeature.bounds] are defined spans
/// across the screens currently in use. This means that the space between the screens
/// is virtually part of the Flutter view space, with the [DisplayFeature.bounds]
/// of the display feature as an obstructed area. The [DisplayFeature.type] can
/// be used to determine if this display feature obstructs the screen or not.
/// For example, [DisplayFeatureType.hinge] and [DisplayFeatureType.cutout] both
/// obstruct the display, while [DisplayFeatureType.fold] is a crease in the display.
///
/// Folding [DisplayFeature]s like the [DisplayFeatureType.hinge] and
/// [DisplayFeatureType.fold] also have a [DisplayFeature.state] which can be
/// used to determine the posture the device is in.  ¿ÃK¿ﬂ   ¿Ã¿Õ ¿·ô©¿´Ç√/// Time-related performance metrics of a frame.
///
/// If you're using the whole Flutter framework, please use
/// [SchedulerBinding.addTimingsCallback] to get this. It's preferred over using
/// [PlatformDispatcher.onReportTimings] directly because
/// [SchedulerBinding.addTimingsCallback] allows multiple callbacks. If
/// [SchedulerBinding] is unavailable, then see [PlatformDispatcher.onReportTimings]
/// for how to get this.
///
/// The metrics in debug mode (`flutter run` without any flags) may be very
/// different from those in profile and release modes due to the debug overhead.
/// Therefore it's recommended to only monitor and analyze performance metrics
/// in profile and release modes. ¿ªÉü ¿ ﬂ¿ ÍÅ/// Construct [FrameTiming] with raw timestamps in microseconds.
///
/// This constructor is used for unit test only. Real [FrameTiming]s should
/// be retrieved from [PlatformDispatcher.onReportTimings].
///
/// If the [frameNumber] is not provided, it defaults to `-1`.¿ Ò¿ ˇ  ¿!¿!  ¿!+¿!9  ¿!I¿!W  ¿!g¿!u  ¿!Ü!¿!î  ¿!≠¿!≤  ¿! ¿!œ  ¿!Á¿!Ï  ¿"¿"  ¿"%¿"*  ¿!√¿!‡¿!ˇ¿"¿"7¿"8¿#^Åë¿$∫¿$ª¿$ºÅB/// Construct [FrameTiming] with raw timestamps in microseconds.
///
/// List [timestamps] must have the same number of elements as
/// [FramePhase.values].
///
/// This constructor is usually only called by the Flutter engine, or a test.
/// To get the [FrameTiming] of your app, see [PlatformDispatcher.onReportTimings].¿$Ω
¿$√  ¿$À¿$—¿$Ì¿$ﬂ¿$“¿$◊¿$ÿ¿$‚¿$ÛX¿% ¿%+¿%¿%¿%¿%#¿%$¿%-¿%=¿%>¿%D¿%E¿3Î¿3˚  ¿&‰É,¿)¥Ç¢/// The duration to build the frame on the UI thread.
///
/// The build starts approximately when [PlatformDispatcher.onBeginFrame] is
/// called. The [Duration] in the [PlatformDispatcher.onBeginFrame] callback
/// is exactly the `Duration(microseconds:
/// timestampInMicroseconds(FramePhase.buildStart))`.
///
/// The build finishes when [FlutterView.render] is called.
///
/// {@template dart.ui.FrameTiming.fps_smoothness_milliseconds}
/// To ensure smooth animations of X fps, this should not exceed 1000/X
/// milliseconds.
/// {@endtemplate}
/// {@template dart.ui.FrameTiming.fps_milliseconds}
/// That's about 16ms for 60fps, and 8ms for 120fps.
/// {@endtemplate}   ¿*Å%¿*⁄Ä∞/// The duration to rasterize the frame on the raster thread.
///
/// {@macro dart.ui.FrameTiming.fps_smoothness_milliseconds}
/// {@macro dart.ui.FrameTiming.fps_milliseconds}   ¿+=Ä≈¿+ßX/// The duration between receiving the vsync signal and starting building the
/// frame.   ¿,Åë¿->Å/// The timespan between vsync start and raster finish.
///
/// To achieve the lowest latency on an X fps display, this should not exceed
/// 1000/X milliseconds.
/// {@macro dart.ui.FrameTiming.fps_milliseconds}
///
/// See also [vsyncOverhead], [buildDuration] and [rasterDuration].   ¿-õÄ„¿.@Äñ/// The number of layers stored in the raster cache during the frame.
///
/// See also [layerCacheBytes], [pictureCacheCount] and [pictureCacheBytes].   ¿.ÇÅ¿/EÄ¥/// The number of bytes of image data used to cache layers during the frame.
///
/// See also [layerCacheCount], [layerCacheMegabytes], [pictureCacheCount] and [pictureCacheBytes].   ¿/áÄˇ¿0MÄ¥/// The number of megabytes of image data used to cache layers during the frame.
///
/// See also [layerCacheCount], [layerCacheBytes], [pictureCacheCount] and [pictureCacheBytes].   ¿0äÄÁ¿1/Äñ/// The number of pictures stored in the raster cache during the frame.
///
/// See also [layerCacheCount], [layerCacheBytes] and [pictureCacheBytes].   ¿1uÅ¿2:Ä∂/// The number of bytes of image data used to cache pictures during the frame.
///
/// See also [layerCacheCount], [layerCacheBytes], [pictureCacheCount] and [pictureCacheMegabytes].   ¿2ÄÅ¿3HÄ∂/// The number of megabytes of image data used to cache pictures during the frame.
///
/// See also [layerCacheCount], [layerCacheBytes], [pictureCacheCount] and [pictureCacheBytes].   ¿3â^¿3Õ9/// The frame key associated with this frame measurement.   ¿%PÄﬁ¿%ÓÄï/// This is a raw timestamp in microseconds from some epoch. The epoch in all
/// [FrameTiming] is the same, but it may not match [DateTime]'s epoch. ¿&¿&   ¿&2V¿&;  ¿&H¿&T   ¿&åT¿&ê  ¿&ô¿&´   ¿4FN¿4M  ¿4W¿4a   ¿4òÅ¿4´   ¿4ò¿4ô ¿WòÜ9¿ZëÇÚ/// A representation of distances for each of the four edges of a rectangle,
/// used to encode the view insets and padding that applications should place
/// around their user interface, as exposed by [FlutterView.viewInsets] and
/// [FlutterView.padding]. View insets and padding are preferably read via
/// [MediaQuery.of].
///
/// For a generic class that represents distances around a rectangle, see the
/// [EdgeInsets] class.
///
/// See also:
///
///  * [WidgetsBindingObserver], for a widgets layer mechanism to receive
///    notifications when the padding changes.
///  * [MediaQuery.of], for the preferred mechanism for accessing these values.
///  * [Scaffold], which automatically applies the padding in material design
///    applications. ¿Z°j¿Z≤¿Z≥¿Z¥ ¿Z∑¿Z∆  ¿ZÀ¿Z⁄  ¿Zﬁ¿ZÌ  ¿ZÛ¿[   ¿[h¿[sT/// The distance from the left edge to the first unpadded pixel, in physical pixels. ¿[|f¿[ﬂS/// The distance from the top edge to the first unpadded pixel, in physical pixels. ¿[Áj¿\LU/// The distance from the right edge to the first unpadded pixel, in physical pixels. ¿\Vl¿\ºV/// The distance from the bottom edge to the first unpadded pixel, in physical pixels. ¿\«Äé¿]0/// A view padding that has zeros for each edge.¿]¿]%¿]&¿]'¿]T¿],¿](¿].¿]6¿]3¿]8¿]B¿]=¿]D¿]O¿]I¿]Q ¿]Zu¿]m   ¿]Z¿][ ¿^¡ç;¿aOÇá/// Immutable layout constraints for [FlutterView]s.
///
/// Similar to [BoxConstraints], a [Size] respects a [ViewConstraints] if, and
/// only if, all of the following relations hold:
///
/// * [minWidth] <= [Size.width] <= [maxWidth]
/// * [minHeight] <= [Size.height] <= [maxHeight]
///
/// The constraints themselves must satisfy these relations:
///
/// * 0.0 <= [minWidth] <= [maxWidth] <= [double.infinity]
/// * 0.0 <= [minHeight] <= [maxHeight] <= [double.infinity]
///
/// For each constraint, [double.infinity] is a legal value.
///
/// For a generic class that represents these kind of constraints, see the
/// [BoxConstraints] class. ¿acÄ÷ ¿a§¿a≥8/// Creates view constraints with the given constraints.¿a∫¿a¿  ¿a”¿aŸ  ¿a¯¿a˛  ¿b ¿b  ¿a ¿a„¿aÈ¿aÍ¿b	¿b#¿b)¿b*¿b=Ä·¿bï¿bñ¿bõF/// Creates view constraints that is respected only by the given size.¿bú	¿b¢  ¿b∂¿b≠¿b∏¿bº¿bΩ¿b”¿b ¿b’¿bŸ¿b⁄¿bÒ¿bÁ¿bÛ¿b˜¿b¯¿c¿c¿c¿c¿c¿c"M¿cg5/// The minimum width that satisfies the constraints. ¿ctu¿c·Y/// The maximum width that satisfies the constraints.
///
/// Might be [double.infinity]. ¿cÓO¿d46/// The minimum height that satisfies the constraints. ¿dBw¿d∞Z/// The maximum height that satisfies the constraints.
///
/// Might be [double.infinity]. ¿e•Äã¿eˆE/// Whether there is exactly one size that satisfies the constraints.   ¿h⁄V¿hÓ   ¿h⁄¿h€¿dæÄ„¿d˚5/// Whether the given size satisfies the constraints. ¿e		¿e   ¿f4Å,¿fóH/// Scales each constraint parameter by the inverse of the given factor. ¿fô¿f°   ¿gdÅr¿g~  ¿gÅ¿gâ  ¿gd¿ge¿i4Ç∆¿iG   ¿i4¿i5 ¿k˛åÉ¿q}Öx/// Area of the display that may be obstructed by a hardware feature.
///
/// This is populated only on Android.
///
/// The [bounds] are measured in logical pixels. On devices with two screens the
/// coordinate system starts with (0,0) in the top-left corner of the left or top screen
/// and expands to include both screens and the visual space between them.
///
/// The [type] describes the behaviour and if [DisplayFeature] obstructs the display.
/// For example, [DisplayFeatureType.hinge] and [DisplayFeatureType.cutout] both obstruct the display,
/// while [DisplayFeatureType.fold] does not.
///
/// ![Device with a hinge display feature](https://flutter.github.io/assets-for-api-docs/assets/hardware/display_feature_hinge.png)
///
/// ![Device with a fold display feature](https://flutter.github.io/assets-for-api-docs/assets/hardware/display_feature_fold.png)
///
/// ![Device with a cutout display feature](https://flutter.github.io/assets-for-api-docs/assets/hardware/display_feature_cutout.png)
///
/// The [state] contains information about the posture for foldable features
/// ([DisplayFeatureType.hinge] and [DisplayFeatureType.fold]). The posture is
/// the shape of the display, for example [DisplayFeatureState.postureFlat] or
/// [DisplayFeatureState.postureHalfOpened]. For [DisplayFeatureType.cutout],
/// the state is not used and has the [DisplayFeatureState.unknown] value. ¿r!ÄŒ ¿r'¿r5 ¿r<¿rK  ¿rV¿re  ¿rn¿r}  ¿rä¿rê¿rÌ¿rΩ¿rë¿rí¿rõ¿rª¿rú¿r¢¿r¥¿rµ¿r¿¿r…¿rÏ¿r ¿r—¿r‰¿rÂ¿rÛÇê¿u}Çh/// The area of the flutter view occupied by this display feature, measured in logical pixels.
///
/// On devices with two screens, the Flutter view spans from the top-left corner
/// of the left or top screen to the bottom-right corner of the right or bottom screen,
/// including the visual area occupied by any display feature. Bounds of display
/// features are reported in this coordinate system.
///
/// For example, on a dual screen device in portrait mode:
///
/// * [Rect.left] gives you the size of left screen, in logical pixels.
/// * [Rect.right] gives you the size of the left screen + the hinge width. ¿uàV¿u⁄6/// Type of display feature, e.g. hinge, fold, cutout. ¿u„ÄÆ¿våÄà/// Posture of display feature, which is populated only for folds and hinges.
///
/// For cutouts, this is [DisplayFeatureState.unknown] ¿wœA¿w„   ¿wœ¿w–¿vñÅ5¿v∞  ¿v≥¿vª  ¿vñ¿vó¿xk¿x'   ¿x¿x ¿Ç ¥y¿Ö˛É-/// An identifier used to select a user's language and formatting preferences.
///
/// This represents a [Unicode Language
/// Identifier](https://www.unicode.org/reports/tr35/#Unicode_language_identifier)
/// (i.e. without Locale extensions), except variants are not supported.
///
/// Locales are canonicalized according to the "preferred value" entries in the
/// [IANA Language Subtag
/// Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).
/// For example, `const Locale('he')` and `const Locale('iw')` are equal and
/// both have the [languageCode] `he`, because `iw` is a deprecated language
/// subtag that was replaced by the subtag `he`.
///
/// See also:
///
///  * [PlatformDispatcher.locale], which specifies the system's currently selected
///    [Locale]. ¿Ü	Ö˘ ¿ãå¿ãíÖ</// Creates a new Locale object. The first argument is the
/// primary language subtag, the second is the region (also
/// referred to as 'country') subtag.
///
/// For example:
///
/// ```dart
/// const Locale swissFrench = Locale('fr', 'CH');
/// const Locale canadianFrench = Locale('fr', 'CA');
/// ```
///
/// The primary language subtag must not be null. The region subtag is
/// optional. When there is no region/country subtag, the parameter should
/// be omitted or passed `null` instead of an empty-string.
///
/// The subtag values are _case sensitive_ and must be one of the valid
/// subtags according to CLDR supplemental data:
/// [language](https://github.com/unicode-org/cldr/blob/master/common/validity/language.xml),
/// [region](https://github.com/unicode-org/cldr/blob/master/common/validity/region.xml). The
/// primary language subtag must be at least two and at most eight lowercase
/// letters, but not four letters. The region subtag must be two
/// uppercase letters or three digits. See the [Unicode Language
/// Identifier](https://www.unicode.org/reports/tr35/#Unicode_language_identifier)
/// specification.
///
/// Validity is not checked by default, but some methods may throw away
/// invalid data.
///
/// See also:
///
///  * [Locale.fromSubtags], which also allows a [scriptCode] to be
///    specified.¿ãò¿ãû  ¿ã≤¿ã∏  	¿ãÃ¿ã“¿ãÊ¿ã·¿ã”¿ã‰¿ã˚¿ã¿ã˝¿åÖK¿êF¿êG¿êRÑ/// Creates a new Locale object.
///
/// The keyword arguments specify the subtags of the Locale.
///
/// The subtag values are _case sensitive_ and must be valid subtags according
/// to CLDR supplemental data:
/// [language](https://github.com/unicode-org/cldr/blob/master/common/validity/language.xml),
/// [script](https://github.com/unicode-org/cldr/blob/master/common/validity/script.xml) and
/// [region](https://github.com/unicode-org/cldr/blob/master/common/validity/region.xml) for
/// each of languageCode, scriptCode and countryCode respectively.
///
/// The [languageCode] subtag is optional. When there is no language subtag,
/// the parameter should be omitted or set to "und". When not supplied, the
/// [languageCode] defaults to "und", an undefined language code.
///
/// The [countryCode] subtag is optional. When there is no country subtag,
/// the parameter should be omitted or passed `null` instead of an empty-string.
///
/// Validity is not checked by default, but some methods may throw away
/// invalid data.¿êY¿êa  ¿êz¿êÄ  ¿êè¿êò  ¿êo¿ê´¿ê±¿êƒ¿êø¿ê≤¿ê¬¿ê‹¿êŒ¿êﬁ¿êÛ¿ê˘¿ë
¿ë¿ê˙¿ë¿ë¿ë¿ë,¿ë'¿ë¿ë*¿ëC¿ë6¿ëE¿ïÒ¿ï˛  ¿ñïê∑¿ñ∂ Ä¿ñÂ¿ßK¿ñ’¿ñ‰¿ñ÷¿ñﬁ¿ñÔ¿ñÎ¿ñÒ¿ó$¿ó ¿ó&¿óU¿óQ¿óW¿óá¿óÉ¿óâ¿ó∫¿ó∂¿óº¿ó˘¿óÙ¿ó˚¿ò.¿ò)¿ò0¿ò^¿òY¿ò`¿òñ¿òë¿òò¿òŒ¿ò…¿ò–¿ô¿ô¿ô	¿ô>¿ô9¿ô@¿ôt¿ôo¿ôv¿ô™¿ô•¿ô¨¿ôÂ¿ô‡¿ôÁ¿ö¿ö¿ö¿öN¿öI¿öP¿öä¿öÖ¿öå¿öæ¿öπ¿ö¿¿öÚ¿öÌ¿öÙ¿õ(¿õ#¿õ*¿õh¿õc¿õj¿õ£¿õû¿õ•¿õÿ¿õ”¿õ⁄¿ú¿ú¿ú
¿ú;¿ú6¿ú=¿úm¿úh¿úo¿úü¿úö¿ú°¿ú–¿úÀ¿ú“¿ù¿úˇ¿ù¿ùF¿ùA¿ùH¿ù}¿ùx¿ù¿ùÆ¿ù©¿ù∞¿ùÓ¿ùÈ¿ù¿û#¿û¿û%¿ûT¿ûO¿ûV¿ûà¿ûÉ¿ûä¿ûƒ¿ûø¿û∆¿ûˇ¿û˙¿ü¿ü4¿ü/¿ü6¿üf¿üa¿üh¿üñ¿üë¿üò¿ü‘¿üœ¿ü÷¿†¿†¿†	¿†B¿†=¿†D¿†w¿†r¿†y¿†´¿†¶¿†≠¿†›¿†ÿ¿†ﬂ¿°¿°¿°¿°G¿°B¿°I¿°z¿°u¿°|¿°Ø¿°™¿°±¿°Í¿°Â¿°Ï¿¢¿¢¿¢¿¢K¿¢F¿¢M¿¢~¿¢y¿¢Ä¿¢µ¿¢∞¿¢∑¿¢Á¿¢‚¿¢È¿£¿£¿£¿£R¿£M¿£T¿£å¿£á¿£é¿£º¿£∑¿£æ¿£Ô¿£Í¿£Ò¿§!¿§¿§#¿§Z¿§U¿§\¿§è¿§ä¿§ë¿§ ¿§≈¿§Ã¿• ¿§˚¿•¿•@¿•;¿•B¿•r¿•m¿•t¿•≠¿•®¿•Ø¿•·¿•‹¿•„¿¶¿¶¿¶¿¶J¿¶E¿¶L¿¶~¿¶y¿¶Ä¿¶±¿¶¨¿¶≥¿¶Ò¿¶Ï¿¶Û¿ß!¿ß¿ß#¿ßQÅË¿©/Å∑/// The script subtag for the locale.
///
/// This may be null, indicating that there is no specified script subtag.
///
/// This must be a valid Unicode Language Identifier script subtag as listed
/// in [Unicode CLDR supplemental
/// data](https://github.com/unicode-org/cldr/blob/master/common/validity/script.xml).
///
/// See also:
///
///  * [Locale.fromSubtags], which describes the conventions for creating
///    [Locale] objects. ¿≠¿≠$  ¿≠∫Å¶¿≠€ ¿Æ¿Ø_¿≠¯¿Æ¿≠˘¿Æ¿Æ¿Æ¿Æ¿ÆB¿Æ>¿ÆD¿Æá¿ÆÉ¿Æâ¿Æ≈¿Æ¡¿Æ«¿Æ˙¿Æˆ¿Æ¸¿Ø5¿Ø1¿Ø7¿≤g¿≤v  ¿≤á"¿≤ñ  ¿ëUÑô¿ï°Ñ/// The primary language subtag for the locale.
///
/// This must not be null. It may be 'und', representing 'undefined'.
///
/// This is expected to be string registered in the [IANA Language Subtag
/// Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry)
/// with the type "language". The string specified must match the case of the
/// string in the registry.
///
/// Language subtags that are deprecated in the registry and have a preferred
/// code are changed to their preferred code. For example, `const
/// Locale('he')` and `const Locale('iw')` are equal, and both have the
/// [languageCode] `he`, because `iw` is a deprecated language subtag that was
/// replaced by the subtag `he`.
///
/// This must be a valid Unicode Language subtag as listed in [Unicode CLDR
/// supplemental
/// data](https://github.com/unicode-org/cldr/blob/master/common/validity/language.xml).
///
/// See also:
///
///  * [Locale.fromSubtags], which describes the conventions for creating
///    [Locale] objects.   ¿©>É’¿¨ÀÉZ/// The region subtag for the locale.
///
/// This may be null, indicating that there is no specified region subtag.
///
/// This is expected to be string registered in the [IANA Language Subtag
/// Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry)
/// with the type "region". The string specified must match the case of the
/// string in the registry.
///
/// Region subtags that are deprecated in the registry and have a preferred
/// code are changed to their preferred code. For example, `const Locale('de',
/// 'DE')` and `const Locale('de', 'DD')` are equal, and both have the
/// [countryCode] `DE`, because `DD` is a deprecated language subtag that was
/// replaced by the subtag `DE`.
///
/// See also:
///
///  * [Locale.fromSubtags], which describes the conventions for creating
///    [Locale] objects.   ¿±ın¿≤	   ¿±ı¿±ˆ¿ØeÇå¿Ø  ¿ØÇ¿Øä  ¿Øe¿Øf¿≤ÆÅÍ¿≥ÎÅ/// Returns a string representing the locale.
///
/// This identifier happens to be a valid Unicode Locale Identifier using
/// underscores as separator, however it is intended to be used for debugging
/// purposes only. For parsable results, use [toLanguageTag] instead.  ¿≥»¿≥…¿≥ÿ¿≥Ÿ¿¥úÅ¿µíÄ‰/// Returns a syntactically valid Unicode BCP47 Locale Identifier.
///
/// Some examples of such identifiers: "en", "es-419", "hi-Deva-IN" and
/// "zh-Hans-CN". See http://www.unicode.org/reports/tr35/ for technical
/// details.   ¿µªÅÜ¿µ¬  ¿µœ¿µ◊    ¿∫ÏÖ9¿ª‹ÄÈ/// An event to request a [SemanticsAction] of [type] to be performed on the
/// [SemanticsNode] identified by [nodeId] owned by the [FlutterView] identified
/// by [viewId].
///
/// Used by [SemanticsBinding.performSemanticsAction]. ¿ªıÄ™ ¿º#¿º7%/// Creates a [SemanticsActionEvent].¿º>¿ºM  ¿ºV¿ºe  ¿ºp¿º  ¿ºä¿ºê   ¿º£D¿º„'/// The type of action to be performed. ¿ºÏw¿Ω]b/// The id of the [FlutterView] the [SemanticsNode] identified by [nodeId] is
/// associated with. ¿Ωh\¿ΩæI/// The id of the [SemanticsNode] on which the action is to be performed. ¿Ω…@¿æ &/// Optional arguments for the action. ¿æ5¿æ" ¿æ;¿æA¿æB ¿æHÅ€¿æΩ[/// Create a clone of the [SemanticsActionEvent] but with provided parameters
/// replaced. ¿æÃ¿æﬁ  ¿æÁ¿æÌ  ¿æ¯¿æ˛  ¿ø	*¿ø  ¿ø ¿¿≤Ç√¿¡pÄ±/// An event for the engine to communicate view focus changes to the app.
///
/// This value will be typically passed to the [PlatformDispatcher.onViewFocusChange]
/// callback. ¿¡ÉÄè ¿¡¨¿¡∫ /// Creates a [ViewFocusChange].¿¡¡¿¡–  ¿¡€¿¡Í  ¿¡Ù¿¬   ¿¬S¿¬c@/// The ID of the [FlutterView] that experienced a focus change. ¿¬n<¿¬•/// The state focus changed to. ¿¬ØH¿¬Ó#/// The direction focus changed to.  ¿¬¸w¿√   ¿¬¸¿¬˝  
¿É˜¿∞Äè/// Various important time points in the lifetime of a frame.
///
/// [FrameTiming] records a timestamp of each phase for performance analysis.  ¿øÄÉ¿8r/// The timestamp of the vsync signal given by the operating system.
///
/// See also [FrameTiming.vsyncOverhead]. ¿Gn¿´]/// When the UI thread starts building a frame.
///
/// See also [FrameTiming.buildDuration]. ¿∫q¿ _/// When the UI thread finishes building a frame.
///
/// See also [FrameTiming.buildDuration]. ¿0w¿úe/// When the raster thread starts rasterizing a frame.
///
/// See also [FrameTiming.rasterDuration]. ¿¨z¿g/// When the raster thread finishes rasterizing a frame.
///
/// See also [FrameTiming.rasterDuration]. ¿+Ä‰¿˚Ä«/// When the raster thread finished rasterizing a frame in wall-time.
///
/// This is useful for correlating time raster finish time with the system
/// clock to integrate with other profiling tools.    ¿ÅÀ¿   ¿.^¿}L/// The number of engine layers cached in the raster cache during the frame. ¿ëW¿ŸE/// The number of bytes used to cache engine layers during the frame. ¿Ìa¿=M/// The number of picture layers cached in the raster cache during the frame. ¿ST¿ñ@/// The number of bytes used to cache pictures during the frame. ¿¨0¿—"/// The frame number of the frame.    ¿6åõw¿@OâΩ/// States that an application can be in once it is running.
///
/// States not supported on a platform will be synthesized by the framework when
/// transitioning between states which are supported, so that all
/// implementations share the same state machine.
///
/// The initial value for the state is the [detached] state, updated to the
/// current state (usually [resumed]) as soon as the first lifecycle update is
/// received from the platform.
///
/// For historical and name collision reasons, Flutter's application state names
/// do not correspond one to one with the state names on all platforms. On
/// Android, for instance, when the OS calls
/// [`Activity.onPause`](https://developer.android.com/reference/android/app/Activity#onPause()),
/// Flutter will enter the [inactive] state, but when Android calls
/// [`Activity.onStop`](https://developer.android.com/reference/android/app/Activity#onStop()),
/// Flutter enters the [paused] state. See the individual state's documentation
/// for descriptions of what they mean on each platform.
///
/// The current application state can be obtained from
/// [SchedulerBinding.instance.lifecycleState], and changes to the state can be
/// observed by creating an [AppLifecycleListener], or by using a
/// [WidgetsBindingObserver] by overriding the
/// [WidgetsBindingObserver.didChangeAppLifecycleState] method.
///
/// Applications should not rely on always receiving all possible notifications.
///
/// For example, if the application is killed with a task manager, a kill
/// signal, the user pulls the power from the device, or there is a rapid
/// unscheduled disassembly of the device, no notification will be sent before
/// the application is suddenly terminated, and some states may be skipped.
///
/// See also:
///
/// * [AppLifecycleListener], an object used observe the lifecycle state that
///   provides state transition callbacks.
/// * [WidgetsBindingObserver], for a mechanism to observe the lifecycle state
///   from the widgets layer.
/// * iOS's [UIKit activity
///   lifecycle](https://developer.apple.com/documentation/uikit/app_and_environment/managing_your_app_s_life_cycle?language=objc)
///   documentation.
/// * Android's [activity
///   lifecycle](https://developer.android.com/guide/components/activities/activity-lifecycle)
///   documentation.
/// * macOS's [AppKit activity
///   lifecycle](https://developer.apple.com/documentation/appkit/nsapplicationdelegate?language=objc)
///   documentation.  ¿@eÇ%¿BÇÇ/// The application is still hosted by a Flutter engine but is detached from
/// any host views.
///
/// The application defaults to this state before it initializes, and can be
/// in this state (applicable on Android, iOS, and web) after all views have been
/// detached.
///
/// When the application is in this state, the engine is running without a
/// view.
///
/// This state is only entered on iOS, Android, and web, although on all platforms
/// it is the default state before the application begins running. ¿BèÑQ¿FŸÑ%/// On all platforms, this state indicates that the application is in the
/// default running mode for a running application that has input focus and is
/// visible.
///
/// On Android, this state corresponds to the Flutter host view having focus
/// ([`Activity.onWindowFocusChanged`](https://developer.android.com/reference/android/app/Activity#onWindowFocusChanged(boolean))
/// was called with true) while in Android's "resumed" state. It is possible
/// for the Flutter app to be in the [inactive] state while still being in
/// Android's
/// ["onResume"](https://developer.android.com/guide/components/activities/activity-lifecycle)
/// state if the app has lost focus
/// ([`Activity.onWindowFocusChanged`](https://developer.android.com/reference/android/app/Activity#onWindowFocusChanged(boolean))
/// was called with false), but hasn't had
/// [`Activity.onPause`](https://developer.android.com/reference/android/app/Activity#onPause())
/// called on it.
///
/// On iOS and macOS, this corresponds to the app running in the foreground
/// active state. ¿FÂÜ—¿MÆÜé/// At least one view of the application is visible, but none have input
/// focus. The application is otherwise running normally.
///
/// On non-web desktop platforms, this corresponds to an application that is
/// not in the foreground, but still has visible windows.
///
/// On the web, this corresponds to an application that is running in a
/// window or tab that does not have input focus.
///
/// On iOS and macOS, this state corresponds to the Flutter host view running in the
/// foreground inactive state. Apps transition to this state when in a phone
/// call, when responding to a TouchID request, when entering the app switcher
/// or the control center, or when the UIViewController hosting the Flutter
/// app is transitioning.
///
/// On Android, this corresponds to the Flutter host view running in Android's
/// paused state (i.e.
/// [`Activity.onPause`](https://developer.android.com/reference/android/app/Activity#onPause())
/// has been called), or in Android's "resumed" state (i.e.
/// [`Activity.onResume`](https://developer.android.com/reference/android/app/Activity#onResume())
/// has been called) but does not have window focus. Examples of when apps
/// transition to this state include when the app is partially obscured or
/// another activity is focused, a app running in a split screen that isn't
/// the current app, an app interrupted by a phone call, a picture-in-picture
/// app, a system dialog, another view. It will also be inactive when the
/// notification window shade is down, or the application switcher is visible.
///
/// On Android and iOS, apps in this state should assume that they may be
/// [hidden] and [paused] at any time. ¿MªÇÌ¿P¢Ç–/// All views of an application are hidden, either because the application is
/// about to be paused (on iOS and Android), or because it has been minimized
/// or placed on a desktop that is no longer visible (on non-web desktop), or
/// is running in a window or tab that is no longer visible (on the web).
///
/// On iOS and Android, in order to keep the state machine the same on all
/// platforms, a transition to this state is synthesized before the [paused]
/// state is entered when coming from [inactive], and before the [inactive]
/// state is entered when coming from [paused]. This allows cross-platform
/// implementations that want to know when an app is conceptually "hidden" to
/// only write one handler. ¿P≠ÅS¿Q˙Å</// The application is not currently visible to the user, and not responding
/// to user input.
///
/// When the application is in this state, the engine will not call the
/// [PlatformDispatcher.onBeginFrame] and [PlatformDispatcher.onDrawFrame]
/// callbacks.
///
/// This state is only entered on iOS and Android.    ¿RÅ•¿S&Å/// The possible responses to a request to exit the application.
///
/// The request is typically responded to by creating an [AppLifecycleListener]
/// and supplying an [AppLifecycleListener.onExitRequested] callback, or by
/// overriding [WidgetsBindingObserver.didRequestAppExit].  ¿S:/¿Se(/// Exiting the application can proceed. ¿Sm:¿S°1/// Cancel the exit: do not exit the application.    ¿S¨ÉÍ¿T_/// The type of application exit to perform when calling
/// [ServicesBinding.exitApplication].  ¿T!Åå¿U£Åw/// Requests that the application start an orderly exit, sending a request
/// back to the framework through the [WidgetsBinding]. If that responds
/// with [AppExitResponse.exit], then proceed with the same steps as a
/// [required] exit. If that responds with [AppExitResponse.cancel], then the
/// exit request is canceled and the application continues executing normally. ¿U≤Å·¿WãÅ»/// A non-cancelable orderly exit request. The engine will shut down the
/// engine and call the native UI toolkit's exit API.
///
/// If you need an even faster and more dangerous exit, then call `dart:io`'s
/// `exit()` directly, and even the native toolkit's exit API won't be called.
/// This is quite dangerous, though, since it's possible that the engine will
/// crash because it hasn't been properly shut down, causing the app to crash
/// on exit.    ¿xÉÖÚ¿|ºÑ3/// Type of [DisplayFeature], describing the [DisplayFeature] behaviour and if
/// it obstructs the display.
///
/// Some types of [DisplayFeature], like [DisplayFeatureType.fold], can be
/// reported without actually impeding drawing on the screen. They are useful
/// for knowing where the display is bent or has a crease. The
/// [DisplayFeature.bounds] can be 0-width in such cases.
///
/// The shape formed by the screens for types [DisplayFeatureType.fold] and
/// [DisplayFeatureType.hinge] is called the posture and is exposed in
/// [DisplayFeature.state]. For example, the [DisplayFeatureState.postureFlat] posture
/// means the screens form a flat surface.
///
/// ![Device with a hinge display feature](https://flutter.github.io/assets-for-api-docs/assets/hardware/display_feature_hinge.png)
///
/// ![Device with a fold display feature](https://flutter.github.io/assets-for-api-docs/assets/hardware/display_feature_fold.png)
///
/// ![Device with a cutout display feature](https://flutter.github.io/assets-for-api-docs/assets/hardware/display_feature_cutout.png)  ¿|”H¿}>/// [DisplayFeature] type is new and not yet known to Flutter. ¿}Ä†¿}ªÄï/// A fold in the flexible screen without a physical gap.
///
/// The bounds for this display feature type indicate where the display makes a crease. ¿}√V¿~N/// A physical separation with a hinge that allows two display panels to fold. ¿~U¿~lL/// A non-displaying area of the screen, usually housing cameras or sensors.    ¿~wÑQ¿Ä®Ç+/// State of the display feature, which contains information about the posture
/// for foldable features.
///
/// The posture is the shape made by the parts of the flexible screen or
/// physical screen panels. They are inspired by and similar to
/// [Android Postures](https://developer.android.com/guide/topics/ui/foldables#postures).
///
/// * For [DisplayFeatureType.fold]s & [DisplayFeatureType.hinge]s, the state is
///   the posture.
/// * For [DisplayFeatureType.cutout]s, the state is not used and has the
/// [DisplayFeatureState.unknown] value.  ¿Ä¿{¿Å4o/// The display feature is a [DisplayFeatureType.cutout] or this state is new
/// and not yet known to Flutter. ¿Å?}¿Å±k/// The foldable device is completely open.
///
/// The screen space that is presented to the user is flat. ¿Å¿Å¿Ç¥ÄÎ/// Fold angle is in an intermediate position between opened and closed state.
///
/// There is a non-flat angle between parts of the flexible screen or between
/// physical screen panels such that the screens start to face each other.    ¿∑EÉ•¿∏RÅ/// Various performance modes for tuning the Dart VM's GC performance.
///
/// For the editor of this enum, please keep the order in sync with `Dart_PerformanceMode`
/// in [dart_api.h](https://github.com/dart-lang/sdk/blob/main/runtime/include/dart_api.h#L1302).  ¿∏j?¿∏°4/// This is the default mode that the Dart VM is in. ¿∏ÆÅ¿π∑Å /// Optimize for low latency, at the expense of throughput and memory overhead
/// by performing work in smaller batches (requiring more overhead) or by
/// delaying work (requiring more memory). An embedder should not remain in
/// this mode indefinitely. ¿π√Ä•¿∫^Äñ/// Optimize for high throughput, at the expense of latency and memory overhead
/// by performing work in larger batches with more intervening growth. ¿∫mz¿∫·o/// Optimize for low memory, at the expensive of throughput and latency by more
/// frequently performing work.    ¿√wÇ„¿≈≈ÇH/// Represents the focus state of a given [FlutterView].
///
/// When focus is lost, the view's focus state changes to [ViewFocusState.unfocused].
///
/// When focus is gained, the view's focus state changes to [ViewFocusState.focused].
///
/// Valid transitions within a view are:
///
/// - [ViewFocusState.focused] to [ViewFocusState.unfocused].
/// - [ViewFocusState.unfocused] to [ViewFocusState.focused].
///
/// See also:
///
///   * [ViewFocusDirection], that specifies the focus direction.
///   * [ViewFocusEvent], that conveys information about a [FlutterView] focus change.  ¿≈ÿC¿∆7/// Specifies that a view does not have platform focus. ¿∆ 7¿∆P-/// Specifies that a view has platform focus.    ¿∆\É%¿«wÅ/// Represents the direction in which the focus transitioned across [FlutterView]s.
///
/// See also:
///
///   * [ViewFocusState], that specifies the current focus state of a [FlutterView].
///   * [ViewFocusEvent], that conveys information about a [FlutterView] focus change.  ¿«éÄ∫¿»?Ä®/// Indicates the focus transition did not have a direction.
///
/// This is typically associated with focus being programmatically requested or
/// when focus is lost. ¿»MÄë¿»◊ÄÉ/// Indicates the focus transition was performed in a forward direction.
///
/// This is typically result of the user pressing tab. ¿»„Äõ¿…vÄå/// Indicates the focus transition was performed in a backward direction.
///
/// This is typically result of the user pressing shift + tab.       é&xéJ  édéo  é&é'é-é>é. Ä∂mÅE/// Signature of callbacks that have no arguments and return no data.    Å%ÇÉÅ„/// Signature for [PlatformDispatcher.onBeginFrame].
///
/// The `duration` argument is the point at which the current frame interval
/// began, expressed as a duration since some epoch. The epoch in all
/// frames will be the same, but it may not match [DateTime]'s epoch.
///
/// For any two frames `a` and `b` such that the frame number of `a` is less
/// than the frame number of `b`, the duration argument for `a` will be less
/// than or equal to the duration argument for `b`.  É/É9   ÉDÇ˚ÜÇ∑/// Signature for [PlatformDispatcher.onReportTimings].
///
/// {@template dart.ui.TimingsCallback.list}
/// The callback takes a list of [FrameTiming] because it may not be
/// immediately triggered after each frame. Instead, Flutter tries to batch
/// frames together and send all their timings at once to decrease the
/// overhead (as this is available in the release mode). The list is sorted in
/// ascending order of time (earliest frame first). The timing of any frame
/// will be sent within about 1 second (100ms if in the profile/debug mode)
/// even if there are no later frames to batch. The timing of the first frame
/// will be sent immediately without batching.
/// {@endtemplate}  Ü$Ü7   ÜAÄàÜÖ;/// Signature for [PlatformDispatcher.onPointerDataPacket].  ÜØÜ¬   ÜÀÄÌáäÄ∂/// Signature for [PlatformDispatcher.onKeyData].
///
/// The callback should return true if the key event has been handled by the
/// framework and should not be propagated further.  á™á≥   á∫Äëà>/// Signature for [PlatformDispatcher.onSemanticsActionEvent].  à.àD   àMÄÚàˇÄ©/// Signature for responses to platform messages.
///
/// Used as a parameter to [PlatformDispatcher.sendPlatformMessage] and
/// [PlatformDispatcher.onPlatformMessage].  â/â:   âAÅsäD~/// Deprecated. Migrate to [ChannelBuffers.setListener] instead.
///
/// Signature for [PlatformDispatcher.onPlatformMessage].  älät  äyäÑ  äâ)ä´  â¿â¡âÀä:âœääﬂ?äÁ   ã
ã   ã Å—å™ÅÅ/// Signature for [PlatformDispatcher.onError].
///
/// If this method returns false, the engine may use some fallback method to
/// provide information about the error.
///
/// After calling this method, the process or the VM may terminate. Some severe
/// unhandled errors may not be able to call this method either, such as Dart
/// compilation errors or process terminating errors.  å»å–  å⁄åÊ   ¿]”ÄÏ¿^£b/// Deprecated. Will be removed in a future version of Flutter.
///
/// Use [ViewPadding] instead.   ¿^6¿^7¿^A¿^ô¿^E¿^c¿¿'Äâ¿¿i9/// Signature for [PlatformDispatcher.onViewFocusChange].  ¿¿ë¿¿°    ç@)çM çeçfçÎ8ç¯ é  ä» <ÄÜÄ§ÄµÄ∂Ä¸Å$Å%ÅZÅ^Å´ÅÒÇ7Ç;ÇàÇ’É	ÉCÉDÉ|ÉÄÉ≠ÉÚÑ>ÑÖÑ‘Ö ÖlÖ∫ÖÈÖ¸Ü@ÜAÜ}Ü ÜÀÜ˝ááNáÇáπá∫á˘àLàMààÉàÀà˜â@âAâÇâÜâ¿âÕää:ä<äµä∂äﬂãã ãPãTã°ã ãŒåålå¢åÚåÛç@çkçlçßç™çÎé%é&é@é{éüé†éÃéÂèè	èWèkèlèºêê9êhê¢ê©ê™ëë4ë6ë7ë`ëdë´ëØë˚íííkíöíûí‚ììì\ì•ìıîBîQîlî∑îÏïïBïFïGïqïwïªññXñ^ñØñ˝óKóïóÊòòòcò¥ò‡ô0ô~ôóôŒööö_ö`öñöúöÍö˘õPõÅõπõ¯ú(ú`údúeúâúèúﬂúÂù.ù4ùÑù“ùÏùÚû<ûãû◊ü"ü<üòü‡††N†O†ù†¥†∫°
°>°{°|°»°Ÿ¢¢¢\¢ì¢ô¢Ê£1£o£u£ø§	§P§v§|§√••\•™•˘¶G¶å¶í¶¢¶®¶€ß(ßAßcßúß€®®7®ì®€©	©©E©©´©È©¯™!™P™X™k™u™à™å™≥™‚™„´3´J´P´†´‡¨¨
¨X¨g¨m¨µ¨ ¨–¨‡¨Ê≠0≠h≠£≠ﬁÆÆ+Æ\Æ~Æ®Æ¨Æ≠ÆŸÆﬁØØØjØïØ’∞∞V∞å∞ê∞ë∞Ω∞¬∞‚∞Á±4±\±y± ±Î±˘±ˇ≤B≤Y≤è≤ì≤î≤¡≤∆≤Î≥≥3≥a≥à≥é≥ƒ≥»≥…≥ı≥˙¥4¥Ñ¥Ãµµ>µBµCµüµ•µı∂H∂ü∂Ó∑?∑c∑i∑ª∏	∏^∏•∏´∏˛πTπª∫"∫H∫N∫†∫¥∫∫ªª?ªEªìªôª©ªØº(ºlº≥ΩΩKΩzΩ‹ææDægæíæñæóæ‹æ‚ø8øñøæøƒ¿ @¿ @<¿ @B¿ @í¿ @¬¿ @»¿ @ÿ¿ @ﬁ¿ A1¿ AQ¿ Aj¿ Aç¿ A∏¿ Aø¿ B¿ B¿ B¿ BL¿ BR¿ Bõ¿ BÍ¿ C¿ C¿ Cd¿ C•¿ CÚ¿ D¿ DG¿ Dg¿ Dç¿ Dª¿ DŸ¿ Dˇ¿ E¿ E¿ E0¿ EW¿ Eo¿ EÉ¿ Eú¿ E»¿ Eœ¿ E”¿ E‘¿ F¿ F]¿ Fc¿ FÆ¿ F¯¿ G)¿ GG¿ Gl¿ Gò¿ Gµ¿ G⁄¿ Gﬁ¿ Gﬂ¿ H¿ H!¿ HM¿ HQ¿ HR¿ Hì¿ Hô¿ HÍ¿ H˘¿ Hˇ¿ I¿ I¿ Ib¿ Is¿ I¡¿ IÙ¿ J!¿ Jb¿ Já¿ J¥¿ J∏¿ Jπ¿ JÂ¿ K¿ KA¿ Kd¿ KÅ¿ K£¿ KÕ¿ K÷¿ K‹¿ K‡¿ K·¿ L,¿ L{¿ L¨¿ L≠¿ LÙ¿ M'¿ Mo¿ M¥¿ M˜¿ N+¿ NR¿ NÇ¿ Nû¿ NÂ¿ O0¿ Oí¿ OÔ¿ PN¿ P≥¿ P˙¿ QL¿ Qò¿ Q‰¿ R5¿ RÜ¿ RŒ¿ S¿ Sm¿ S∏¿ T¿ TT¿ Tü¿ TÌ¿ U4¿ UÇ¿ U–¿ V¿ Vh¿ V∂¿ V˝¿ WJ¿ Wô¿ WË¿ X/¿ Xv¿ X¬¿ Y¿ YV¿ Y°¿ YË¿ YÚ¿ Z-¿ Z3¿ Z]¿ Za¿ Zb¿ Zµ¿ Z¯¿ [¿ [-¿ [`¿ [ì¿ [º¿ [Ó¿ [˘¿ \¿ \(¿ \1¿ \8¿ \9¿ \v¿ \|¿ \Õ¿ \‹¿ \‚¿ ]1¿ ]g¿ ]ó¿ ]∂¿ ]„¿ ]˛¿ ^¿ ^¿ ^å¿ ^…¿ ^œ¿ ^”¿ ^‘¿ _!¿ _&¿ _N¿ _y¿ _•¿ _¶¿ _Â¿ `¿ `K¿ `L¿ ``¿ `µ¿ a¿ ab¿ ac¿ aà¿ aÈ¿ bA¿ bâ¿ b–¿ bÏ¿ c<¿ cC¿ cD¿ cX¿ c\¿ c]¿ c¶¿ cø¿ c≈¿ d¿ db¿ dÉ¿ dâ¿ d’¿ e"¿ eU¿ e[¿ e¨¿ e˘¿ f:¿ f@¿ fl¿ fr¿ fø¿ g	¿ gY¿ gÜ¿ g¬¿ gÁ¿ h¿ hC¿ h¿ hØ¿ hµ¿ h÷¿ hˇ¿ i¿ i¿ i>¿ i?¿ iò¿ iô¿ i˘¿ j;¿ j<¿ jh¿ jì¿ jŒ¿ k
¿ kR¿ k™¿ k∞¿ kÛ¿ k˜¿ k¯¿ l-¿ l3¿ lÄ¿ lÀ¿ m¿ mR¿ mX¿ m©¿ m∑¿ n¿ n6¿ në¿ n™¿ n»¿ nŒ¿ n“¿ n”¿ o=¿ op¿ oq¿ o„¿ p\¿ p]¿ p£¿ p©¿ p˘¿ qI¿ qö¿ qÈ¿ r6¿ rU¿ ru¿ rÜ¿ rö¿ rÆ¿ r√¿ r›¿ s(¿ sA¿ s_¿ se¿ si¿ sj¿ s«¿ t¿ t¿ tÖ¿ tÒ¿ tÚ¿ u>¿ uá¿ u°¿ u‹¿ v
¿ v9¿ v=¿ v¢¿ vÈ¿ vÍ¿ w-¿ w3¿ w|¿ wú¿ w¢¿ wÚ¿ x@¿ xV¿ x\¿ x≠¿ x¸¿ y¿ y¿ yg¿ yv¿ yÖ¿ yª¿ yˆ¿ y˙¿ zB¿ zq¿ zú¿ z´¿ z·¿ {¿ { ¿ {]¿ {Ä¿ {´¿ {Ø¿ {∞¿ {‹¿ |N¿ |O¿ |º¿ }¿ }¿ }[¿ }ü¿ }¿ ~¿ ~%¿ ~A¿ ~T¿ ~Z¿ ~[¿ ~ú¿ ~Ã¿ ~Õ¿ ~Î¿ #¿ *¿ .¿ /¿ q¿ w¿ ∏¿ Ä¿ Ä¿ Äi¿ Äü¿ Ä´¿ Äÿ¿ ÄÍ¿ Å¿ Å'¿ ÅS¿ Åó¿ Å≤¿ Å“¿ Å‡¿ ÅÓ¿ Ç¿ ÇP¿ Ç[¿ Çd¿ Çq¿ Ç≤¿ ÇÔ¿ Ç˘¿ Çˇ¿ É¿ É¿ ÉM¿ É\¿ Éb¿ É≥¿ Éı¿ É˚¿ ÑJ¿ Ñü¿ Ñ‰¿ Ö+¿ Ö,¿ Öå¿ Ö∆¿ Ö«¿ Ü*¿ Ü0¿ Üí¿ Üƒ¿ Ü ¿ á ¿ á^¿ áã¿ áè¿ áê¿ áÛ¿ à0¿ à1¿ àÄ¿ à≤¿ à∏¿ â	¿ âZ¿ âà¿ âé¿ â◊¿ â˚¿ äB¿ äC¿ ä§¿ ä›¿ äﬁ¿ ã/¿ ãY¿ ã_¿ ão¿ ãu¿ ã¿¿ ãﬂ¿ å-¿ å>¿ åj¿ åk¿ åø¿ åË¿ åÈ¿ ç8¿ çÄ¿ çÜ¿ ç’¿ é%¿ él¿ éπ¿ è
¿ è¿ è"¿ èX¿ èÜ¿ èå¿ è⁄¿ ê%¿ ê+¿ ê;¿ êA¿ êé¿ ê≈¿ ë¿ ëS¿ ëµ¿ ë˚¿ í¿ í)¿ í<¿ íU¿ í]¿ ía¿ íb¿ í∑¿ í·¿ í‚¿ ì/¿ ìä¿ ìã¿ ì÷¿ ìÂ¿ ìÎ¿ î<¿ îK¿ î¢¿ î”¿ ï¿ ïJ¿ ïz¿ ï≤¿ ï∂¿ ï∑¿ ï„¿ ñ¿ ñd¿ ñ≠¿ ñÛ¿ ó¿ ó¿ ó<¿ óf¿ óm¿ ó¿¿ ò¿ ò¿ ò¿ òa¿ òg¿ ò∂¿ ô ¿ ô¿ ô¿ ôd¿ ôì¿ ô•¿ ôÛ¿ ö=¿ ö>¿ öç¿ ö›¿ ö˘¿ õ ¿ õf¿ õg¿ õ ¿ ú¿ ú¿ úK¿ úQ¿ ú°¿ ú‡¿ úÊ¿ ù4¿ ùl¿ ùr¿ ùæ¿ û¿ û7¿ ûå¿ ûç¿ ûÕ¿ û”¿ ü#¿ üb¿ üh¿ üπ¿ †¿ †¿ †¿ †f¿ †l¿ †|¿ †Ç¿ †Õ¿ †˜¿ °-¿ °.¿ °d¿ °j¿ °ú¿ °¢¿ °Ô¿ °ı¿ ¢5¿ ¢t¿ ¢Ω¿ ¢˘¿ £-¿ £b¿ £ñ¿ £…¿ £œ¿ £–¿ §&¿ §'¿ §D¿ §e¿ §Ü¿ §ø¿ §¯¿ §˛¿ •¿ •¿ •¿ •†¿ •°¿ ¶¿ ¶q¿ ¶r¿ ¶¥¿ ¶∫¿ ß¿ ß¿ ß ¿ ß0¿ ß6¿ ßÅ¿ ß±¿ ßÍ¿ ®¿ ®5¿ ®e¿ ®Ü¿ ®Ø¿ ®≥¿ ®¥¿ ®‡¿ ©¿ ©2¿ ©q¿ ©∫¿ ©Í¿ ™7¿ ™Ä¿ ™Œ¿ ´¿ ´¿ ´E¿ ´Ñ¿ ´√¿ ´ˇ¿ ¨	¿ ¨n¿ ¨å¿ ¨î¿ ¨ö¿ ¨¥¿ ¨¬¿ ¨»¿ ≠¿ ≠d¿ ≠ò¿ ≠ú¿ ≠ù¿ ≠…¿ ≠˘¿ ≠˙¿ ÆC¿ ÆI¿ Æã¿ Æë¿ Æ‚¿ Ø¿ Ø2¿ Ø]¿ ØÄ¿ ØÑ¿ ØÖ¿ Ø´¿ Ø¨¿ Ø˝¿ ∞K¿ ∞c¿ ∞í¿ ∞ì¿ ∞ø¿ ∞Û¿ ±F¿ ±a¿ ±å¿ ±≤¿ ±∏¿ ±º¿ ±Ω¿ ≤¿ ≤¿ ≤!¿ ≤P¿ ≤ö¿ ≤õ¿ ≤¡¿ ≤«¿ ≥¿ ≥F¿ ≥L¿ ≥ò¿ ≥ß¿ ≥≠¿ ≥Ω¿ ≥√¿ ¥¿ ¥8¿ ¥x¿ ¥y¿ ¥ƒ¿ ¥ ¿ µ¿ µ*¿ µ0¿ µ@¿ µF¿ µë¿ µ¡¿ ∂¿ ∂7¿ ∂i¿ ∂¢¿ ∂Ã¿ ∂˛¿ ∑¿ ∑¿ ∑O¿ ∑U¿ ∑î¿ ∑◊¿ ∑Î¿ ∏9¿ ∏i¿ ∏j¿ ∏∫¿ ∏¿¿ π¿ π_¿ πk¿ πΩ¿ πÔ¿ π¿ ∫=¿ ∫i¿ ∫o¿ ∫¿ ∫Ö¿ ∫”¿ ∫Ï¿ ª$¿ ªH¿ ªI¿ ªò¿ ª‚¿ ª¸¿ ºF¿ ºG¿ ºï¿ ºõ¿ ºÏ¿ º˚¿ Ω¿ Ω¿ Ω¿ Ωb¿ Ωí¿ Ω„¿ æ¿ æF¿ æÇ¿ æØ¿ æ‰¿ æË¿ æÈ¿ ø4¿ øw¿ øx¿ øƒ¿ ø ¿ ¿¿ ¿*¿ ¿0¿ ¿@¿ ¿F¿ ¿ë¿ ¿¡¿ ¡¿ ¡:¿ ¡m¿ ¡ß¿ ¡“¿ ¬¿ ¬	¿ ¬
¿ ¬6¿ ¬h¿ ¬Ω¿ ¬’¿ ¬„¿ ¬È¿ ¬Í¿ √;¿ √ä¿ √Ï¿ ƒ¿ ƒf¿ ƒs¿ ƒ¢¿ ƒ®¿ ƒ©¿ ≈¿ ≈C¿ ≈è¿ ≈ú¿ ≈Õ¿ ≈”¿ ≈‘¿ ≈Û¿ ∆?¿ ∆f¿ ∆ò¿ ∆û¿ ∆Ó¿ «¿ «K¿ «ß¿ «Æ¿ «¯¿ »:¿ »É¿ »Ó¿ …P¿ …ƒ¿  )¿  ¬¿  –¿  ÷¿ À¿ À3¿ Àg¿ Àï¿ Àø¿ ÀÁ¿ ÀÓ¿ Ã@¿ Ãb¿ ÃÅ¿ Ã…¿ Ãœ¿ ÃÙ¿ ÕB¿ ÕH¿ Õk¿ Õµ¿ Õª¿ Õø¿ Õ¿¿ Œ¿ Œ8¿ Œ>¿ Œã¿ Œö¿ Œ⁄¿ Œ€¿ œ*¿ œ0¿ œx¿ œê¿ œ›¿ –	¿ –<¿ –v¿ –°¿ –‘¿ –ÿ¿ –Ÿ¿ —¿ —4¿ —}¿ —∫¿ —»¿ —Œ¿ “¿ “$¿ “+¿ “}¿ “≈¿ “…¿ “ ¿ ”¿ ”;¿ ”A¿ ”ç¿ ”‘¿ ”⁄¿ ‘"¿ ‘:¿ ‘ë¿ ‘ ¿ ‘˙¿ ’A¿ ’i¿ ’ô¿ ’ù¿ ’û¿ ’ ¿ ’ı¿ ÷ ¿ ÷O¿ ÷]¿ ÷c¿ ÷õ¿ ÷’¿ ÷Ÿ¿ ÷⁄¿ ◊¿ ◊7¿ ◊e¿ ◊f¿ ◊∞¿ ◊Ô¿ ÿ¿ ÿ@¿ ÿs¿ ÿó¿ ÿ√¿ ÿ«¿ ÿ»¿ ÿÙ¿ Ÿ>¿ Ÿb¿ ŸÄ¿ Ÿ£¿ Ÿø¿ ŸÒ¿ ⁄	¿ ⁄K¿ ⁄d¿ ⁄m¿ ⁄t¿ ⁄x¿ ⁄y¿ ⁄î¿ ⁄™¿ ⁄´¿ ⁄˜¿ €¿ €¿ €[¿ €¨¿ €ı¿ ‹%¿ ‹+¿ ‹z¿ ‹À¿ ›¿ ›*¿ ›0¿ ›¿ ›œ¿ ﬁ¿ ﬁ:¿ ﬁc¿ ﬁ|¿ ﬁù¿ ﬁ°¿ ﬁ¢¿ ﬁﬂ¿ ﬁ˚¿ ﬂ¿ ﬂ¿ ﬂ7¿ ﬂ8¿ ﬂi¿ ﬂî¿ ﬂ°¿ ﬂ≠¿ ‡¿ ‡$¿ ‡U¿ ‡k¿ ‡s¿ ‡y¿ ‡}¿ ‡~¿ ‡À¿ ‡€¿ ‡·¿ ·+¿ ·1¿ ·B¿ ·H¿ ·b¿ ·’¿ ‚&¿ ‚v¿ ‚¿¿ „¿ „O¿ „∫¿ „¿¿ „Õ¿ „”¿ „È¿ ‰q¿ ‰¬¿ Â¿ Â`¿ Âá¿ Âç¿ Âù¿ Â£¿ Âÿ¿ Ê"¿ ÊG¿ Ê}¿ Ê~¿ Ê◊¿ Á¿ Á¿ ÁW¿ ÁÅ¿ Áá¿ Á◊¿ Ë%¿ Ëw¿ Ë¡¿ Ë’¿ Ë€¿ È-¿ Èu¿ Èƒ¿ È ¿ Í¿ Ím¿ Í∏¿ Í«¿ Í˘¿ Î¿ ÎC¿ ÎD¿ Îf¿ ÎÖ¿ Îã¿ Îå¿ Îƒ¿ Î˙¿ Ï#¿ Ïe¿ Ïπ¿ Ïø¿ Ì1¿ Ì2¿ Ìä¿ Ì‡¿ ÓP¿ ÓW¿ Ó[¿ Ó\¿ Óö¿ Ó¿¿ Ó˙¿ Ô-¿ Ôn¿ Ôë¿ Ô›¿ Ô˘¿ ¿ ¿ W¿ v¿ ñ¿ ∞¿ ∂¿ ∑¿ ˛¿ Òj¿ ÒÉ¿ Ò’¿ Ò€¿ ÒÛ¿ Ú¿ ÚN¿ Úâ¿ Ú‡¿ Û¿ ÛV¿ Û\¿ Ûm¿ Ûq¿ Ûr¿ Ûª¿ Û‘¿ ÛŸ¿ Ù ¿ Ùl¿ Ù∫¿ ı¿ ıX¿ ı©¿ ı˘¿ ˆ6¿ ˆÖ¿ ˆ¢¿ ˆß¿ ˆ˜¿ ˜G¿ ˜ò¿ ˜Ë¿ ¯¿ ¯Ñ¿ ¯ﬂ¿ ¯·¿ ¯‚¿ ˘¿ ˘	¿ ˘C¿ ˘b¿ ˘É¿ ˘∆¿ ˘Ó¿ ˙¿ ˙A¿ ˙a¿ ˙Ü¿ ˙°¿ ˙º¿ ˙÷¿ ˙‹¿ ˙›¿ ˚¿ ˚3¿ ˚T¿ ˚p¿ ˚î¿ ˚±¿ ˚Ã¿ ˚Í¿ ¸¿ ¸"¿ ¸)¿ ¸L¿ ¸û¿ ¸¿ ˝3¿ ˝|¿ ˝º¿ ˝‰¿ ˛'¿ ˛j¿ ˛™¿ ˛±¿ ˛µ¿ ˛∂¿ ˇ¿ ˇ8¿ ˇ9¿ ˇâ¿ ˇó¿ ˇª¿ ˇº¿ 	¿ 4¿ S¿ T¿ £¿ Ì¿¿.¿/¿U¿u¿v¿∂¿‘¿’¿"¿2¿T¿U¿Ñ¿¶¿ß¿‰¿Í¿8¿Ö¿—¿¿_¿e¿±¿¿P¿†¿Í¿¿<¿>¿?¿d¿¿ú¿Ω¿ÿ¿ ¿)¿Z¿¿≥¿Ë¿ ¿¿¿<¿b¿y¿z¿©¿ ¿À¿	¿	¿	¿	h¿	π¿
¿
¿
\¿
ß¿
«¿
»¿¿f¿±¿ ¿¿¿d¿≤¿Ú¿¯¿G¿í¿≥¿¥¿¿P¿à¿é¿Ÿ¿!¿_¿à¿â¿ÿ¿'¿r¿¡¿“¿ÿ¿'¿r¿è¿ê¿⁄¿‡¿-¿v¿ë¿∫¿ª¿ ¿¿Q¿u¿{¿Õ¿&¿z¿Ã¿¿o¿«¿Õ¿¿e¿õ¿…¿ ¿÷¿Ï¿¿¿¿¿Y¿]¿´¿Ω¿¿
¿6¿D¿E¿w¿}¿©¿∑¿∏¿Ï¿Ú¿¿-¿.¿g¿m¿ö¿©¿™¿Â¿Î¿¿(¿)¿q¿w¿ƒ¿˘¿¿¿¿,¿{¿é¿è¿◊¿Í¿Î¿;¿P¿Q¿î¿©¿™¿œ¿ﬁ¿‡¿·¿¿¿R¿£¿›¿%¿z¿ì¿ó¿„¿4¿É¿•¿π¿¸¿ ¿ P¿ é¿ î¿ ’¿ Ì¿!
¿!'¿!E¿!c¿!Ç¿!©¿!∆¿!„¿"¿"!¿";¿"B¿"b¿"t¿"Ü¿"ô¿"¨¿"¿¿"‹¿"Û¿#
¿##¿#<¿#O¿#W¿#[¿#\¿#ü¿#•¿#Ê¿$¿$¿$W¿$≠¿$¿$Ò¿%M¿%N¿%û¿%Ë¿&/¿&0¿&â¿&ä¿&·¿&‚¿'¿' ¿'o¿'æ¿'Î¿(#¿()¿(g¿(m¿(Ø¿(˘¿)¿)"¿)Y¿)ê¿)•¿*¿*¿*R¿*X¿*ó¿*À¿+:¿+;¿+ã¿+ò¿,¿,¿,>¿,D¿,î¿,Ø¿,„¿,È¿-/¿-ò¿-ô¿-·¿-Á¿.6¿.¿.Ä¿.œ¿.’¿/;¿/Ñ¿/Ö¿/ÿ¿/ﬁ¿0@¿0á¿0à¿0“¿0ÿ¿1%¿1r¿1s¿1ƒ¿1 ¿20¿2}¿2~¿2”¿2Ÿ¿3;¿3Ü¿3á¿3√¿3Ë¿3È¿4C¿4D¿4ï¿4ñ¿4¢¿4∏¿4ˇ¿58¿5o¿5û¿5Ã¿5˙¿6,¿6^¿6Ö¿6â¿6ã¿6å¿6…¿6Õ¿7¿7`¿7í¿7ñ¿7‚¿81¿8Q¿8U¿8¶¿8Ò¿9¿9Ä¿9ƒ¿:$¿:t¿:≠¿:±¿:Ë¿;8¿;z¿;©¿;È¿;Ì¿<>¿<B¿<å¿<÷¿=%¿=q¿=u¿=É¿=á¿=’¿> ¿>O¿>m¿>â¿?¿?!¿?;¿?ö¿?Ø¿?Œ¿@5¿@J¿@c¿@≤¿@»¿@Œ¿A¿Aq¿AÅ¿Aá¿A‘¿A‡¿AÊ¿B;¿BÄ¿Bå¿Bç¿BŸ¿C*¿C9¿C?¿Cé¿D¿Db¿DØ¿Dø¿E ¿EF¿EÀ¿E¯¿F[¿Fo¿Fu¿F√¿F◊¿F‚¿F„¿G.¿Gj¿Gp¿Gø¿G˚¿H¿HK¿H¿HÖ¿H‹¿I+¿I|¿I ¿IÊ¿IÏ¿J=¿JV¿Jπ¿J˜¿K\¿K©¿Kˆ¿LD¿Lî¿L‡¿M1¿M7¿MÉ¿M¨¿M∏¿Mπ¿N	¿NY¿N©¿Nı¿N˚¿OH¿Oó¿OÂ¿P2¿PÇ¿P†¿P™¿P´¿P˙¿Q¿Q¿Q_¿Q¨¿QΩ¿Q√¿Q¯¿R¿R¿R¿RF¿RJ¿Rö¿RÊ¿S!¿S8¿Sc¿Sk¿Sü¿S©¿S´¿S¨¿SÂ¿T¿T¿Tl¿T∑¿U ¿UP¿U°¿UØ¿U∞¿U˚¿V3¿V9¿Vâ¿V⁄¿W*¿Wz¿Wâ¿Wï¿Wó¿Wò¿WÂ¿X3¿X¿X ¿Xﬂ¿X„¿Y1¿YI¿YM¿Y[¿Y_¿Y©¿Yÿ¿Z(¿Zv¿Zã¿Zü¿[¿[¿[d¿[y¿[z¿[–¿[‰¿[Â¿\=¿\S¿\T¿\≠¿\ƒ¿\≈¿\¯¿]W¿]X¿]d¿]z¿]Ã¿]–¿]“¿]”¿^¿^¿^6¿^C¿^a¿^ô¿^õ¿^¿¿^¡¿^ˆ¿^˙¿_I¿_{¿_¿_Æ¿_‡¿_‰¿`!¿`%¿``¿`ù¿`°¿`ﬁ¿`‚¿a-¿aI¿aa¿aú¿a∂¿aœ¿aÙ¿b¿b4¿b:¿b;¿bÑ¿bß¿bƒ¿b·¿c ¿c¿c ¿cX¿cq¿cr¿c™¿c∞¿c“¿cÎ¿cÏ¿d%¿d?¿d@¿dy¿d¿d°¿dª¿dº¿dÙ¿e¿eY¿eû¿e¢¿e£¿eÎ¿f1¿f2¿f}¿f™¿f∆¿fÈ¿g¿g1¿gV¿g]¿ga¿gb¿gn¿gë¿g≥¿g∆¿gÃ¿g¯¿h¿h¿h6¿h\¿hÇ¿h™¿h”¿h◊¿hÿ¿h‰¿i1¿i2¿i>¿iT¿iõ¿iƒ¿i ¿j¿j<¿jk¿jq¿j´¿j√¿jÙ¿j¸¿kG¿kM¿kâ¿k»¿k˜¿k˚¿k˝¿k˛¿lD¿lH¿lo¿ls¿lƒ¿m¿mh¿ml¿m¬¿n)¿nW¿n[¿nﬂ¿n„¿oe¿oi¿oÔ¿oÛ¿p@¿pè¿pﬁ¿q,¿qw¿qé¿q˚¿r¿r8¿rR¿rj¿rÉ¿r¿rÒ¿sR¿sX¿s´¿t¿tX¿tè¿tï¿t“¿tÿ¿u"¿up¿uÖ¿uÜ¿uø¿u‡¿u·¿v1¿v7¿vp¿vì¿vî¿v†¿v√¿vÂ¿v¯¿v˛¿w*¿w>¿wD¿wg¿wâ¿wß¿w»¿wÃ¿wÕ¿wŸ¿x¿x¿x¿x4¿x|¿xÄ¿xÇ¿xÉ¿x“¿x¿xÙ¿y?¿yç¿yÃ¿z¿z
¿zV¿zù¿zÙ¿{¿{#¿{ß¿{´¿|-¿|1¿|∑¿|—¿}¿}¿}Y¿}_¿}π¿}¡¿~¿~¿~j¿~t¿~v¿~w¿~∆¿~·¿~Â¿.¿n¿»¿Ã¿Ä¿Ä0¿Äz¿Ä£¿Äæ¿Å¿Å2¿Å=¿Åk¿Åq¿ÅØ¿Åæ¿Ç¿Ç¿Çe¿Ç≤¿Ç«¿Ç…¿Ç ¿É¿É¿ÉE¿Éò¿É·¿ÉÂ¿Ñ5¿ÑO¿Ñ≤¿Ñˇ¿ÖL¿Ö}¿ÖÅ¿Öè¿Öì¿ÖÁ¿Ö¯¿Ü¿ÜD¿ÜÇ¿Ü™¿Ü∞¿Ü√¿Ü…¿Ü◊¿á¿áD¿áN¿áT¿áù¿áÍ¿à(¿à.¿àx¿à´¿â¿âk¿â∫¿â˝¿ä@¿äï¿ä™¿ä∞¿ä˙¿ã¿ã¿ã$¿ã*¿ãp¿ãÑ¿ãî¿ãÆ¿ã≈¿ãÈ¿å¿å¿å'¿å-¿ål¿år¿å√¿å‰¿çD¿ç£¿é¿éG¿éM¿éú¿éÍ¿è.¿è4¿èÅ¿è‘¿è⁄¿ê$¿ê8¿êU¿êv¿êã¿ê§¿ê«¿êÏ¿ë¿ë/¿ëR¿ëS¿ëÖ¿ëã¿ë”¿ëŸ¿í%¿íâ¿íŸ¿í˜¿í˝¿ìM¿ìë¿ì€¿î,¿îO¿îU¿î£¿î∂¿ï¿ï¿ï'¿ï-¿ïy¿ïî¿ïÔ¿ñ¿ñ¿ñL¿ñì¿ñÁ¿ó¿óM¿ó¿ó≤¿ó¿ò%¿òU¿òç¿ò≈¿ò˛¿ô5¿ôk¿ô°¿ô‹¿ö¿öE¿öÅ¿öµ¿öÈ¿õ¿õ_¿õö¿õœ¿õˇ¿ú2¿úd¿úñ¿ú«¿ú˚¿ù=¿ùt¿ù•¿ùÂ¿û¿ûK¿û¿ûª¿ûˆ¿ü+¿ü]¿üç¿üÀ¿ü˛¿†9¿†n¿†¢¿†‘¿°¿°>¿°q¿°¶¿°·¿¢¿¢B¿¢u¿¢¨¿¢ﬁ¿£¿£I¿£É¿£≥¿£Ê¿§¿§Q¿§Ü¿§¡¿§˜¿•7¿•i¿•§¿•ÿ¿¶¿¶A¿¶u¿¶®¿¶Ë¿ß¿ßI¿ßN¿ßO¿ßw¿ß}¿ß ¿ß–¿®¿®C¿®ú¿®¢¿®≤¿®∏¿©¿©¿©;¿©<¿©d¿©j¿©∑¿©Ω¿™	¿™m¿™ª¿™Ÿ¿™ﬂ¿´-¿´~¿´«¿¨¿¨:¿¨@¿¨P¿¨V¿¨¢¿¨Ω¿≠¿≠2¿≠3¿≠q¿≠∏¿Æ
¿Æ:¿Æ¿ÆΩ¿ÆÚ¿Ø-¿Ø]¿Øb¿Øc¿Øo¿Øí¿Ø¥¿Ø«¿ØÕ¿ØÈ¿Ø˝¿∞¿∞4¿∞l¿∞ö¿∞ﬂ¿±.¿±ç¿±Ó¿±Ú¿±Û¿±ˇ¿≤d¿≤e¿≤Ö¿≤´¿≤¨¿≤‹¿≤‚¿≥.¿≥~¿≥∆¿≥÷¿≥‚¿≥¯¿¥#¿¥?¿¥n¿¥t¿¥ï¿¥ô¿¥ö¿¥ﬂ¿¥Â¿µ/¿µz¿µâ¿µ∏¿µπ¿µ„¿∂¿∂T¿∂~¿∂Ñ¿∂≤¿∂Î¿∑¿∑#¿∑>¿∑B¿∑D¿∑E¿∑å¿∑ê¿∑Î¿∏M¿∏h¿∏ü¿∏´¿∏¨¿∏˝¿πI¿πó¿πµ¿π¿¿π¡¿∫¿∫\¿∫j¿∫k¿∫Ω¿∫ﬂ¿∫È¿∫Î¿∫Ï¿ª9¿ªä¿ªõ¿ªü¿ª÷¿ªÛ¿º¿º:¿ºR¿ºl¿ºÜ¿ºö¿º†¿º°¿ºÀ¿ºÈ¿ºÍ¿Ω:¿ΩQ¿Ωe¿Ωf¿Ω≤¿Ω∆¿Ω«¿Ω¿æ¿æ¿æE¿æF¿æñ¿æ¶¿æ»¿æ„¿æÙ¿ø¿ø5¿ø<¿ø]¿ø|¿ø°¿ø∆¿¿¿¿ ¿¿$¿¿&¿¿'¿¿a¿¿±¿¿≤¿¿¸¿¡ ¿¡V¿¡d¿¡Å¿¡§¿¡Ω¿¡◊¿¡¿¬¿¬¿¬¿¬W¿¬k¿¬l¿¬é¿¬¨¿¬≠¿¬”¿¬˘¿¬˙¿√¿√¿√p¿√t¿√v¿√w¿√∞¿√¥¿ƒ
¿ƒ¿ƒd¿ƒh¿ƒë¿ƒï¿ƒ”¿≈¿≈¿≈#¿≈'¿≈i¿≈¿¿≈÷¿∆¿∆¿∆¿∆N¿∆Y¿∆[¿∆\¿∆∞¿∆¥¿∆¬¿∆∆¿«¿«r¿«å¿«À¿«—¿»#¿»=¿»J¿»K¿»ñ¿»ú¿»’¿»‡¿»·¿…-¿…3¿…t¿…Ä¿…Ç   dart.uiÄ¨ _kUnsetGestureSetting_kFlutterKeyDataChannel_wrapUnmodifiableByteDataRootIsolateTokenPlatformDispatcher_PlatformConfiguration_ViewConfiguration
FramePhase_FrameTimingInfoFrameTimingAppLifecycleStateAppExitResponseAppExitTypeViewPaddingViewConstraintsDisplayFeatureDisplayFeatureTypeDisplayFeatureStateLocaleDartPerformanceModeSemanticsActionEventViewFocusEventViewFocusStateViewFocusDirection EÖ